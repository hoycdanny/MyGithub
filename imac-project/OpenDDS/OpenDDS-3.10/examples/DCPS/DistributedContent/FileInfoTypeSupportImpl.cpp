/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file FileInfo.idl */
#include "FileInfoTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/CorbaSeq/OctetSeqTypeSupportImpl.h"
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DistributedContent */



/* Begin TYPEDEF: OctetSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DistributedContent::OctetSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const DistributedContent::OctetSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_octet_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, DistributedContent::OctetSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_octet_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, DistributedContent::OctetSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  ser >> length;
  ser.skip(length, 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: FileDiff */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DistributedContent::FileDiff& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.file_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.filename.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.change_source.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.previous_version);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.new_version);
  gen_find_size(stru.difference, size, padding);
}

bool operator<<(Serializer& strm, const DistributedContent::FileDiff& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.file_id)
    && (strm << stru.filename.in())
    && (strm << stru.change_source.in())
    && (strm << stru.previous_version)
    && (strm << stru.new_version)
    && (strm << stru.difference);
}

bool operator>>(Serializer& strm, DistributedContent::FileDiff& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.file_id)
    && (strm >> stru.filename.out())
    && (strm >> stru.change_source.out())
    && (strm >> stru.previous_version)
    && (strm >> stru.new_version)
    && (strm >> stru.difference);
}

size_t gen_max_marshaled_size(const DistributedContent::FileDiff& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DistributedContent::FileDiff> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const DistributedContent::FileDiff> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.file_id);
}

bool operator<<(Serializer& strm, KeyOnly<const DistributedContent::FileDiff> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.file_id);
}

bool operator>>(Serializer& strm, KeyOnly<DistributedContent::FileDiff> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.file_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DistributedContent {
::DDS::DataWriter_ptr FileDiffTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<FileDiff> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr FileDiffTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<FileDiff> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr FileDiffTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<FileDiff> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<FileDiff, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& FileDiffTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<FileDiff>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool FileDiffTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* FileDiffTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
FileDiffTypeSupport::_ptr_type FileDiffTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DistributedContent::FileDiff> : MetaStruct {
  typedef DistributedContent::FileDiff T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const DistributedContent::FileDiff& typed = *static_cast<const DistributedContent::FileDiff*>(stru);
    if (std::strcmp(field, "file_id") == 0) {
      return typed.file_id;
    }
    if (std::strcmp(field, "filename") == 0) {
      return typed.filename.in();
    }
    if (std::strcmp(field, "change_source") == 0) {
      return typed.change_source.in();
    }
    if (std::strcmp(field, "previous_version") == 0) {
      return typed.previous_version;
    }
    if (std::strcmp(field, "new_version") == 0) {
      return typed.new_version;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DistributedContent::FileDiff)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "file_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'file_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "filename") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'filename' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'filename' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "change_source") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'change_source' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'change_source' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "previous_version") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'previous_version' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "new_version") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'new_version' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    gen_skip_over(ser, static_cast<DistributedContent::OctetSeq*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DistributedContent::FileDiff");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "file_id") == 0) {
      return make_field_cmp(&T::file_id, next);
    }
    if (std::strcmp(field, "filename") == 0) {
      return make_field_cmp(&T::filename, next);
    }
    if (std::strcmp(field, "change_source") == 0) {
      return make_field_cmp(&T::change_source, next);
    }
    if (std::strcmp(field, "previous_version") == 0) {
      return make_field_cmp(&T::previous_version, next);
    }
    if (std::strcmp(field, "new_version") == 0) {
      return make_field_cmp(&T::new_version, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DistributedContent::FileDiff)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"file_id", "filename", "change_source", "previous_version", "new_version", "difference", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "file_id") == 0) {
      return &static_cast<const T*>(stru)->file_id;
    }
    if (std::strcmp(field, "filename") == 0) {
      return &static_cast<const T*>(stru)->filename;
    }
    if (std::strcmp(field, "change_source") == 0) {
      return &static_cast<const T*>(stru)->change_source;
    }
    if (std::strcmp(field, "previous_version") == 0) {
      return &static_cast<const T*>(stru)->previous_version;
    }
    if (std::strcmp(field, "new_version") == 0) {
      return &static_cast<const T*>(stru)->new_version;
    }
    if (std::strcmp(field, "difference") == 0) {
      return &static_cast<const T*>(stru)->difference;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DistributedContent::FileDiff)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "file_id") == 0) {
      static_cast<T*>(lhs)->file_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "filename") == 0) {
      static_cast<T*>(lhs)->filename = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "change_source") == 0) {
      static_cast<T*>(lhs)->change_source = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "previous_version") == 0) {
      static_cast<T*>(lhs)->previous_version = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "new_version") == 0) {
      static_cast<T*>(lhs)->new_version = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "difference") == 0) {
      static_cast<T*>(lhs)->difference = *static_cast<const DistributedContent::OctetSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DistributedContent::FileDiff)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "file_id") == 0) {
      return static_cast<const T*>(lhs)->file_id == static_cast<const T*>(rhs)->file_id;
    }
    if (std::strcmp(field, "filename") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->filename.in(), static_cast<const T*>(rhs)->filename.in());
    }
    if (std::strcmp(field, "change_source") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->change_source.in(), static_cast<const T*>(rhs)->change_source.in());
    }
    if (std::strcmp(field, "previous_version") == 0) {
      return static_cast<const T*>(lhs)->previous_version == static_cast<const T*>(rhs)->previous_version;
    }
    if (std::strcmp(field, "new_version") == 0) {
      return static_cast<const T*>(lhs)->new_version == static_cast<const T*>(rhs)->new_version;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DistributedContent::FileDiff)");
  }
};

template<>
const MetaStruct& getMetaStruct<DistributedContent::FileDiff>()
{
  static MetaStructImpl<DistributedContent::FileDiff> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, DistributedContent::FileDiff*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DistributedContent::FileDiff>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FileDiff */

/* End MODULE: DistributedContent */
