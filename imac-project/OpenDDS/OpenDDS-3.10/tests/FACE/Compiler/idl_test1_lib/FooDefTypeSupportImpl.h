/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file ../../../DCPS/Compiler/idl_test1_lib/FooDef.idl */
#ifndef OPENDDS_IDL_GENERATED_FOODEFTYPESUPPORTIMPL_H_35LYDD
#define OPENDDS_IDL_GENERATED_FOODEFTYPESUPPORTIMPL_H_35LYDD
#include "FooDefC.h"
#include "dds/DCPS/Definitions.h"
#include "FooDefTypeSupportC.h"
#include "dds/DCPS/PoolAllocationBase.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "foolib_export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin CONST: tao_version */


/* End CONST: tao_version */


/* Begin CONST: dds_version */


/* End CONST: dds_version */


/* Begin MODULE: Xyz */



/* Begin CONST: c0 */


/* End CONST: c0 */


/* Begin CONST: c1 */


/* End CONST: c1 */


/* Begin CONST: c2 */


/* End CONST: c2 */


/* Begin CONST: c3 */


/* End CONST: c3 */


/* Begin CONST: c4 */


/* End CONST: c4 */


/* Begin CONST: c5 */


/* End CONST: c5 */


/* Begin CONST: c6 */


/* End CONST: c6 */


/* Begin CONST: c7 */


/* End CONST: c7 */


/* Begin CONST: c8 */


/* End CONST: c8 */


/* Begin CONST: c9 */


/* End CONST: c9 */


/* Begin CONST: c10 */


/* End CONST: c10 */


/* Begin CONST: c11 */


/* End CONST: c11 */


/* Begin CONST: c13 */


/* End CONST: c13 */


/* Begin TYPEDEF: ArrayOfShorts */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfShorts_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfShorts_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfShorts_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfShorts_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfShorts */


/* Begin TYPEDEF: ArrayOfShorts2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfShorts2_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfShorts2_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfShorts2_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfShorts2_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfShorts2 */


/* Begin TYPEDEF: MultiDimArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::MultiDimArray_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::MultiDimArray_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::MultiDimArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::MultiDimArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: MultiDimArray */


/* Begin STRUCT: StructOfMultiDimArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::StructOfMultiDimArray& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::StructOfMultiDimArray& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::StructOfMultiDimArray& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::StructOfMultiDimArray>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::StructOfMultiDimArray*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StructOfMultiDimArray */


/* Begin TYPEDEF: ArrayOfArrayOfShorts2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfArrayOfShorts2_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfArrayOfShorts2_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfArrayOfShorts2_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfArrayOfShorts2_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfArrayOfShorts2 */


/* Begin STRUCT: StructOfArrayOfArrayOfShorts2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::StructOfArrayOfArrayOfShorts2& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::StructOfArrayOfArrayOfShorts2& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::StructOfArrayOfArrayOfShorts2& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::StructOfArrayOfArrayOfShorts2>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::StructOfArrayOfArrayOfShorts2*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StructOfArrayOfArrayOfShorts2 */


/* Begin ENUM: ColorX */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ColorX& enumval);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ColorX& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_Xyz_ColorX_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: ColorX */


/* Begin CONST: c15 */


/* End CONST: c15 */


/* Begin TYPEDEF: UShortSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::UShortSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::UShortSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::UShortSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::UShortSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UShortSeq */


/* Begin TYPEDEF: ArrayOfShortsSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfShortsSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfShortsSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfShortsSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfShortsSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfShortsSeq */


/* Begin TYPEDEF: ShortSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ShortSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ShortSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ShortSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ShortSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ShortSeq */


/* Begin STRUCT: AStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AStruct& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AStruct& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AStruct& stru);

FooLib_Export
size_t gen_max_marshaled_size(const Xyz::AStruct& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::AStruct> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const Xyz::AStruct> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::AStruct> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::AStruct> stru);

template <>
struct MarshalTraits<Xyz::AStruct> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export AStruct_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::AStruct& v1, const Xyz::AStruct& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.v1 < v2.v1) return true;
    if (v2.v1 < v1.v1) return false;
    return false;
  }
};
}


namespace Xyz {
class AStructTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::AStruct> {
  typedef Xyz::AStruct MessageType;
  typedef Xyz::AStructSeq MessageSequenceType;
  typedef Xyz::AStructTypeSupport TypeSupportType;
  typedef Xyz::AStructTypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::AStructDataWriter DataWriterType;
  typedef Xyz::AStructDataReader DataReaderType;
  typedef Xyz::AStruct_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::AStruct"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class FooLib_Export AStructTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<AStructTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<AStruct> TraitsType;
  typedef AStructTypeSupport TypeSupportType;
  typedef AStructTypeSupport::_var_type _var_type;
  typedef AStructTypeSupport::_ptr_type _ptr_type;

  AStructTypeSupportImpl() {}
  virtual ~AStructTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static AStructTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::AStruct>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AStruct*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: AStruct */


/* Begin TYPEDEF: ArrayOfAStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfAStruct_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfAStruct_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfAStruct_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfAStruct_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfAStruct */


/* Begin STRUCT: StructContainingArrayOfAStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::StructContainingArrayOfAStruct& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::StructContainingArrayOfAStruct& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::StructContainingArrayOfAStruct& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::StructContainingArrayOfAStruct>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::StructContainingArrayOfAStruct*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StructContainingArrayOfAStruct */


/* Begin UNION: AUnion */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AUnion& uni, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AUnion& uni);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AUnion& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AUnion*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End UNION: AUnion */


/* Begin STRUCT: StructAUnion */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::StructAUnion& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::StructAUnion& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::StructAUnion& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::StructAUnion>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::StructAUnion*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StructAUnion */


/* Begin TYPEDEF: AUnionSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AUnionSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AUnionSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AUnionSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AUnionSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: AUnionSeq */


/* Begin TYPEDEF: AcharSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AcharSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AcharSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AcharSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AcharSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: AcharSeq */


/* Begin TYPEDEF: AStringSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AStringSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AStringSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AStringSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AStringSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: AStringSeq */


/* Begin TYPEDEF: AcharSeqSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AcharSeqSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AcharSeqSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AcharSeqSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AcharSeqSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: AcharSeqSeq */


/* Begin TYPEDEF: MyChar */


/* End TYPEDEF: MyChar */


/* Begin TYPEDEF: AMyCharSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AMyCharSeq& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AMyCharSeq& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AMyCharSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AMyCharSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: AMyCharSeq */


/* Begin TYPEDEF: BoundedString */


/* End TYPEDEF: BoundedString */


/* Begin TYPEDEF: UnboundedSeqOfBoundedString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::UnboundedSeqOfBoundedString& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::UnboundedSeqOfBoundedString& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::UnboundedSeqOfBoundedString& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::UnboundedSeqOfBoundedString*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnboundedSeqOfBoundedString */


/* Begin TYPEDEF: BoundedSeqOfBoundedString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::BoundedSeqOfBoundedString& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::BoundedSeqOfBoundedString& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::BoundedSeqOfBoundedString& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::BoundedSeqOfBoundedString*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BoundedSeqOfBoundedString */


/* Begin TYPEDEF: UnboundedSeqOfUnboundedString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::UnboundedSeqOfUnboundedString& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::UnboundedSeqOfUnboundedString& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::UnboundedSeqOfUnboundedString& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::UnboundedSeqOfUnboundedString*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnboundedSeqOfUnboundedString */


/* Begin TYPEDEF: AStructSeqX */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::AStructSeqX& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AStructSeqX& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AStructSeqX& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::AStructSeqX*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: AStructSeqX */


/* Begin TYPEDEF: ArrayOfAStructSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfAStructSeq_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfAStructSeq_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfAStructSeq_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfAStructSeq_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfAStructSeq */


/* Begin STRUCT: StructContainingArrayOfAStructSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::StructContainingArrayOfAStructSeq& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::StructContainingArrayOfAStructSeq& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::StructContainingArrayOfAStructSeq& stru);

FooLib_Export
size_t gen_max_marshaled_size(const Xyz::StructContainingArrayOfAStructSeq& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::StructContainingArrayOfAStructSeq> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const Xyz::StructContainingArrayOfAStructSeq> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::StructContainingArrayOfAStructSeq> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::StructContainingArrayOfAStructSeq> stru);

template <>
struct MarshalTraits<Xyz::StructContainingArrayOfAStructSeq> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export StructContainingArrayOfAStructSeq_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::StructContainingArrayOfAStructSeq&, const Xyz::StructContainingArrayOfAStructSeq&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Xyz {
class StructContainingArrayOfAStructSeqTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::StructContainingArrayOfAStructSeq> {
  typedef Xyz::StructContainingArrayOfAStructSeq MessageType;
  typedef Xyz::StructContainingArrayOfAStructSeqSeq MessageSequenceType;
  typedef Xyz::StructContainingArrayOfAStructSeqTypeSupport TypeSupportType;
  typedef Xyz::StructContainingArrayOfAStructSeqTypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::StructContainingArrayOfAStructSeqDataWriter DataWriterType;
  typedef Xyz::StructContainingArrayOfAStructSeqDataReader DataReaderType;
  typedef Xyz::StructContainingArrayOfAStructSeq_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::StructContainingArrayOfAStructSeq"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class FooLib_Export StructContainingArrayOfAStructSeqTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<StructContainingArrayOfAStructSeqTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<StructContainingArrayOfAStructSeq> TraitsType;
  typedef StructContainingArrayOfAStructSeqTypeSupport TypeSupportType;
  typedef StructContainingArrayOfAStructSeqTypeSupport::_var_type _var_type;
  typedef StructContainingArrayOfAStructSeqTypeSupport::_ptr_type _ptr_type;

  StructContainingArrayOfAStructSeqTypeSupportImpl() {}
  virtual ~StructContainingArrayOfAStructSeqTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static StructContainingArrayOfAStructSeqTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::StructContainingArrayOfAStructSeq>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::StructContainingArrayOfAStructSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StructContainingArrayOfAStructSeq */


/* Begin TYPEDEF: OctetArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::OctetArray_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::OctetArray_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::OctetArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::OctetArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetArray */


/* Begin STRUCT: Foo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::Foo& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::Foo& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::Foo& stru);

FooLib_Export
size_t gen_max_marshaled_size(const Xyz::Foo& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::Foo> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const Xyz::Foo> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::Foo> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::Foo> stru);

template <>
struct MarshalTraits<Xyz::Foo> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export Foo_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::Foo& v1, const Xyz::Foo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.key < v2.key) return true;
    if (v2.key < v1.key) return false;
    if (v1.xcolor < v2.xcolor) return true;
    if (v2.xcolor < v1.xcolor) return false;
    return false;
  }
};
}


namespace Xyz {
class FooTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::Foo> {
  typedef Xyz::Foo MessageType;
  typedef Xyz::FooSeq MessageSequenceType;
  typedef Xyz::FooTypeSupport TypeSupportType;
  typedef Xyz::FooTypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::FooDataWriter DataWriterType;
  typedef Xyz::FooDataReader DataReaderType;
  typedef Xyz::Foo_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::Foo"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class FooLib_Export FooTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<FooTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Foo> TraitsType;
  typedef FooTypeSupport TypeSupportType;
  typedef FooTypeSupport::_var_type _var_type;
  typedef FooTypeSupport::_ptr_type _ptr_type;

  FooTypeSupportImpl() {}
  virtual ~FooTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static FooTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::Foo>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::Foo*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Foo */


/* Begin ENUM: TestEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::TestEnum& enumval);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::TestEnum& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_Xyz_TestEnum_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: TestEnum */


/* Begin TYPEDEF: TypedefTestEnum */


/* End TYPEDEF: TypedefTestEnum */


/* Begin STRUCT: StructWithTypedefedEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::StructWithTypedefedEnum& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::StructWithTypedefedEnum& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::StructWithTypedefedEnum& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::StructWithTypedefedEnum>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::StructWithTypedefedEnum*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StructWithTypedefedEnum */


/* Begin UNION: TestUnion */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::TestUnion& uni, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::TestUnion& uni);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::TestUnion& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::TestUnion*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End UNION: TestUnion */

/* End MODULE: Xyz */


/* Begin MODULE: N1 */



/* Begin STRUCT-FWD: FwdDeclStruct */


/* End STRUCT-FWD: FwdDeclStruct */

/* End MODULE: N1 */


/* Begin MODULE: N1 */



/* Begin TYPEDEF: FwdDeclSameNamespaceStructs */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const N1::FwdDeclSameNamespaceStructs& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const N1::FwdDeclSameNamespaceStructs& seq);

FooLib_Export
bool operator>>(Serializer& strm, N1::FwdDeclSameNamespaceStructs& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, N1::FwdDeclSameNamespaceStructs*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FwdDeclSameNamespaceStructs */

/* End MODULE: N1 */


/* Begin MODULE: N2 */



/* Begin TYPEDEF: FwdDeclDiffNamespaceStructs */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const N2::FwdDeclDiffNamespaceStructs& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const N2::FwdDeclDiffNamespaceStructs& seq);

FooLib_Export
bool operator>>(Serializer& strm, N2::FwdDeclDiffNamespaceStructs& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, N2::FwdDeclDiffNamespaceStructs*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FwdDeclDiffNamespaceStructs */

/* End MODULE: N2 */


/* Begin MODULE: N1 */



/* Begin STRUCT: FwdDeclStruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const N1::FwdDeclStruct& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const N1::FwdDeclStruct& stru);

FooLib_Export
bool operator>>(Serializer& strm, N1::FwdDeclStruct& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<N1::FwdDeclStruct>();
FooLib_Export
void gen_skip_over(Serializer& ser, N1::FwdDeclStruct*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FwdDeclStruct */

/* End MODULE: N1 */


/* Begin MODULE: N1 */



/* Begin TYPEDEF: FwdDeclSameNamespaceAfterDefStructs */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const N1::FwdDeclSameNamespaceAfterDefStructs& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const N1::FwdDeclSameNamespaceAfterDefStructs& seq);

FooLib_Export
bool operator>>(Serializer& strm, N1::FwdDeclSameNamespaceAfterDefStructs& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, N1::FwdDeclSameNamespaceAfterDefStructs*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FwdDeclSameNamespaceAfterDefStructs */

/* End MODULE: N1 */


/* Begin STRUCT: Bar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Bar& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Bar& stru);

FooLib_Export
bool operator>>(Serializer& strm, Bar& stru);

FooLib_Export
size_t gen_max_marshaled_size(const Bar& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Bar> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const Bar> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Bar> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<Bar> stru);

template <>
struct MarshalTraits<Bar> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export Bar_OpenDDS_KeyLessThan {
  bool operator()(const Bar&, const Bar&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};


class BarTypeSupportImpl;

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Bar> {
  typedef Bar MessageType;
  typedef BarSeq MessageSequenceType;
  typedef BarTypeSupport TypeSupportType;
  typedef BarTypeSupportImpl TypeSupportTypeImpl;
  typedef BarDataWriter DataWriterType;
  typedef BarDataReader DataReaderType;
  typedef Bar_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Bar"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


class FooLib_Export BarTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<BarTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Bar> TraitsType;
  typedef BarTypeSupport TypeSupportType;
  typedef BarTypeSupport::_var_type _var_type;
  typedef BarTypeSupport::_ptr_type _ptr_type;

  BarTypeSupportImpl() {}
  virtual ~BarTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static BarTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Bar>();
FooLib_Export
void gen_skip_over(Serializer& ser, Bar*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Bar */
#endif /* OPENDDS_IDL_GENERATED_FOODEFTYPESUPPORTIMPL_H_35LYDD */
