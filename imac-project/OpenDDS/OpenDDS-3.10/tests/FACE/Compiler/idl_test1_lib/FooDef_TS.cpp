/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file ../../../DCPS/Compiler/idl_test1_lib/FooDef.idl */
#include "FooDef_TS.hpp"
#include "FooDefTypeSupportImpl.h"
#include "dds/FACE/FaceTSS.h"

namespace FACE { namespace TS {

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::AStruct& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::AStruct& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_AStruct_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_AStruct_Initializer {
  Xyz_AStruct_Initializer()
  {
    Xyz::AStructTypeSupport_var ts = new Xyz::AStructTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_AStruct;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructContainingArrayOfAStructSeq& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructContainingArrayOfAStructSeq& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructContainingArrayOfAStructSeq_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructContainingArrayOfAStructSeq_Initializer {
  Xyz_StructContainingArrayOfAStructSeq_Initializer()
  {
    Xyz::StructContainingArrayOfAStructSeqTypeSupport_var ts = new Xyz::StructContainingArrayOfAStructSeqTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructContainingArrayOfAStructSeq;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::Foo& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::Foo& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_Foo_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_Foo_Initializer {
  Xyz_Foo_Initializer()
  {
    Xyz::FooTypeSupport_var ts = new Xyz::FooTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_Foo;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Bar& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Bar& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Bar_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Bar_Initializer {
  Bar_Initializer()
  {
    BarTypeSupport_var ts = new BarTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Bar;

}}
