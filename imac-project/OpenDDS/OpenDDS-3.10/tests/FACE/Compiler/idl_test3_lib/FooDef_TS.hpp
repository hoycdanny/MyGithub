/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file ../../../DCPS/Compiler/idl_test3_lib/FooDef.idl */
#ifndef OPENDDS_IDL_GENERATED_FOODEF_TS_HPP_G8MNKY
#define OPENDDS_IDL_GENERATED_FOODEF_TS_HPP_G8MNKY
#include "FooDefC.h"
#include "FACE/TS.hpp"
namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfArrayOfString_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfString& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfArrayOfString& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfString& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfArrayOfString_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfArrayOfChar_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfChar& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfArrayOfChar& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfChar& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfArrayOfChar_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfArrayOfOctet_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfOctet& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfArrayOfOctet& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfOctet& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfArrayOfOctet_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfArrayOfLong_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfLong& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfArrayOfLong& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfLong& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfArrayOfLong_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfArrayOfAnEnum_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfAnEnum& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfArrayOfAnEnum& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfArrayOfAnEnum& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfArrayOfAnEnum_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfSeqOfLong_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfSeqOfLong& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfSeqOfLong& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfSeqOfLong& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfSeqOfLong_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructAUnion_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructAUnion& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructAUnion& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructAUnion& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructAUnion_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_Foo_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::Foo& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::Foo& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::Foo& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_Foo_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

#endif /* OPENDDS_IDL_GENERATED_FOODEF_TS_HPP_G8MNKY */
