/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file ../../../DCPS/Compiler/idl_test3_lib/FooDef3.idl */
#include "FooDef3_TS.hpp"
#include "FooDef3TypeSupportImpl.h"
#include "dds/FACE/FaceTSS.h"

namespace FACE { namespace TS {

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructOfArrayOfSeqOfBoolean& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructOfArrayOfSeqOfBoolean& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructOfArrayOfSeqOfBoolean_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructOfArrayOfSeqOfBoolean_Initializer {
  Xyz_StructOfArrayOfSeqOfBoolean_Initializer()
  {
    Xyz::StructOfArrayOfSeqOfBooleanTypeSupport_var ts = new Xyz::StructOfArrayOfSeqOfBooleanTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructOfArrayOfSeqOfBoolean;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructOfArrayOfSeqOfString& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructOfArrayOfSeqOfString& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructOfArrayOfSeqOfString_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructOfArrayOfSeqOfString_Initializer {
  Xyz_StructOfArrayOfSeqOfString_Initializer()
  {
    Xyz::StructOfArrayOfSeqOfStringTypeSupport_var ts = new Xyz::StructOfArrayOfSeqOfStringTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructOfArrayOfSeqOfString;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructOfArrayOfSeqOfChar& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructOfArrayOfSeqOfChar& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructOfArrayOfSeqOfChar_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructOfArrayOfSeqOfChar_Initializer {
  Xyz_StructOfArrayOfSeqOfChar_Initializer()
  {
    Xyz::StructOfArrayOfSeqOfCharTypeSupport_var ts = new Xyz::StructOfArrayOfSeqOfCharTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructOfArrayOfSeqOfChar;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructOfArrayOfSeqOfOctet& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructOfArrayOfSeqOfOctet& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructOfArrayOfSeqOfOctet_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructOfArrayOfSeqOfOctet_Initializer {
  Xyz_StructOfArrayOfSeqOfOctet_Initializer()
  {
    Xyz::StructOfArrayOfSeqOfOctetTypeSupport_var ts = new Xyz::StructOfArrayOfSeqOfOctetTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructOfArrayOfSeqOfOctet;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructOfArrayOfSeqOfLong& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructOfArrayOfSeqOfLong& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructOfArrayOfSeqOfLong_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructOfArrayOfSeqOfLong_Initializer {
  Xyz_StructOfArrayOfSeqOfLong_Initializer()
  {
    Xyz::StructOfArrayOfSeqOfLongTypeSupport_var ts = new Xyz::StructOfArrayOfSeqOfLongTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructOfArrayOfSeqOfLong;

void Receive_Message(CONNECTION_ID_TYPE connection_id,
                     TIMEOUT_TYPE timeout,
                     TRANSACTION_ID_TYPE& transaction_id,
                     Xyz::StructOfArrayOfSeqOfAnEnum& message,
                     MESSAGE_SIZE_TYPE message_size,
                     RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::receive_message(connection_id, timeout,
                                    transaction_id, message,
                                    message_size, return_code);
}

void Send_Message(CONNECTION_ID_TYPE connection_id,
                  TIMEOUT_TYPE timeout,
                  TRANSACTION_ID_TYPE& transaction_id,
                  Xyz::StructOfArrayOfSeqOfAnEnum& message,
                  MESSAGE_SIZE_TYPE& message_size,
                  RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::send_message(connection_id, timeout,
                                 transaction_id, message,
                                 message_size, return_code);
}

void Register_Callback(CONNECTION_ID_TYPE connection_id,
                       const WAITSET_TYPE waitset,
                       Read_Callback::send_event_Xyz_StructOfArrayOfSeqOfAnEnum_Ptr data_callback,
                       MESSAGE_SIZE_TYPE max_message_size,
                       RETURN_CODE_TYPE& return_code) {
  OpenDDS::FaceTSS::register_callback(connection_id, waitset,
                                      data_callback,
                                      max_message_size, return_code);
}

struct Xyz_StructOfArrayOfSeqOfAnEnum_Initializer {
  Xyz_StructOfArrayOfSeqOfAnEnum_Initializer()
  {
    Xyz::StructOfArrayOfSeqOfAnEnumTypeSupport_var ts = new Xyz::StructOfArrayOfSeqOfAnEnumTypeSupportImpl;
    ts->register_type(0, "");
  }
} init_Xyz_StructOfArrayOfSeqOfAnEnum;

}}
