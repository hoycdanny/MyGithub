/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file ../../../DCPS/Compiler/idl_test3_lib/FooDef2.idl */
#ifndef OPENDDS_IDL_GENERATED_FOODEF2_TS_HPP_GCW8ZD
#define OPENDDS_IDL_GENERATED_FOODEF2_TS_HPP_GCW8ZD
#include "FooDef2C.h"
#include "FACE/TS.hpp"
namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfBoolean_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfBoolean& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfBoolean& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfBoolean& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfBoolean_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfString_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfString& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfString& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfString& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfString_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfChar_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfChar& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfChar& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfChar& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfChar_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfOctet_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfOctet& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfOctet& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfOctet& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfOctet_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfLong_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfLong& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfLong& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfLong& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfLong_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfArrayOfAnEnum_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfArrayOfAnEnum& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfArrayOfAnEnum& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfArrayOfAnEnum& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfArrayOfAnEnum_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfBoolean_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfBoolean& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfBoolean& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfBoolean& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfBoolean_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfString_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfString& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfString& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfString& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfString_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfChar_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfChar& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfChar& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfChar& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfChar_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfOctet_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfOctet& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfOctet& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfOctet& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfOctet_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfLong_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfLong& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfLong& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfLong& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfLong_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

namespace FACE
{
  namespace Read_Callback
  {
    typedef void (*send_event_Xyz_StructOfSeqOfAnEnum_Ptr) (
      /* in */ TRANSACTION_ID_TYPE transaction_id,
      /* inout */ Xyz::StructOfSeqOfAnEnum& message,
      /* in */ MESSAGE_TYPE_GUID message_type_id,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* in */ const WAITSET_TYPE waitset,
      /* out */ RETURN_CODE_TYPE& return_code);
  }

  namespace TS
  {
    FooLib_Export
    void Receive_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* out */ Xyz::StructOfSeqOfAnEnum& message,
      /* in */ MESSAGE_SIZE_TYPE message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Send_Message(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ TIMEOUT_TYPE timeout,
      /* inout */ TRANSACTION_ID_TYPE& transaction_id,
      /* inout */ Xyz::StructOfSeqOfAnEnum& message,
      /* inout */ MESSAGE_SIZE_TYPE& message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

    FooLib_Export
    void Register_Callback(
      /* in */ CONNECTION_ID_TYPE connection_id,
      /* in */ const WAITSET_TYPE waitset,
      /* in */ Read_Callback::send_event_Xyz_StructOfSeqOfAnEnum_Ptr data_callback,
      /* in */ MESSAGE_SIZE_TYPE max_message_size,
      /* out */ RETURN_CODE_TYPE& return_code);

  }
}

#endif /* OPENDDS_IDL_GENERATED_FOODEF2_TS_HPP_GCW8ZD */
