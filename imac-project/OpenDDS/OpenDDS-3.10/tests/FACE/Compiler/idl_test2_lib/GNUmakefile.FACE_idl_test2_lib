# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.FACE_idl_test2_lib
#
# $Id: gnu.mpd 2866 2016-09-08 21:53:48Z huangh $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.FACE_idl_test2_lib
DEPENDENCY_FILE  = .depend.FACE_idl_test2_lib

IDL_DEPENDENCY_FILE1 = .depend.FACE_idl_test2_lib_Idl1
IDL_DEPENDENCY_FILE2 = .depend.FACE_idl_test2_lib_Idl2

IDL_DEPENDENCY_FILES += \
	.depend.FACE_idl_test2_lib_Idl1 \
	.depend.FACE_idl_test2_lib_Idl2

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)FACE_idl_test2_lib.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)FACE_idl_test2_lib

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)FACE_idl_test2_lib.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  FooDefTypeSupportC.cpp \
  BazDefTypeSupportC.cpp \
  FooDefTypeSupportImpl.cpp \
  BazDefTypeSupportImpl.cpp \
  BazDef_TS.cpp \
  FooDef_TS.cpp

IDL_DEPS_FLAGS1 = $(TAO_IDLFLAGS) -Sa -St -I../../../.. -SS -Wb,no_fixed_err -Wb,export_macro=FooLib_Export -Wb,export_include=foolib_export.h -I../../../DCPS/Compiler/idl_test2_lib
IDL_DEPS1 = FooDefTypeSupport.idl

IDL_DEPS_FLAGS2 = $(TAO_IDLFLAGS) -Sa -St -I../../../.. -SS -Wb,no_fixed_err -Wb,export_macro=FooLib_Export -Wb,export_include=foolib_export.h -I../../../DCPS/Compiler/idl_test2_lib
IDL_DEPS2 = BazDefTypeSupport.idl



LIBPATHS := . "$(ACE_ROOT)/lib" "../../../../lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lOpenDDS_FACE -lOpenDDS_Dcps -lTAO_BiDirGIOP -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/FACE_idl_test2_lib
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_FACE OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../../../lib $(if $(ARCH),../../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_FACE OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(built_in_topics),1)
ifneq ($(uses_wchar),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif

ifeq ($(built_in_topics),1)
ifneq ($(uses_wchar),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../../../lib $(if $(ARCH),-L../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../../../..
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DFOOLIB_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo FACE_idl_test2_lib will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(built_in_topics),1)
requires_disabled_macros += built_in_topics
endif
require_warning:
	@echo FACE_idl_test2_lib will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

ifeq ($(uses_wchar),1)
avoids_enabled_macros += uses_wchar
endif
avoid_warning:
	@echo FACE_idl_test2_lib will not be built due to the following enabled make macros: $(avoids_enabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += FooDefTypeSupportC.inl FooDefTypeSupportC.cpp FooDefTypeSupportS.h FooDefTypeSupportC.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "FooDefTypeSupport.idl" -nt "FooDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "FooDefTypeSupport.idl" -nt "FooDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "FooDefTypeSupport.idl" -nt "FooDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "FooDefTypeSupport.idl" -nt "FooDefTypeSupportC.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "FooDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "FooDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "FooDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "FooDefTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "FooDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "FooDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "FooDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "FooDefTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "FooDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "FooDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "FooDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "FooDefTypeSupportC.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
FooDefTypeSupportC.inl FooDefTypeSupportC.cpp FooDefTypeSupportS.h FooDefTypeSupportC.h: FooDefTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -I../../../.. -SS -Wb,no_fixed_err -Wb,export_macro=FooLib_Export -Wb,export_include=foolib_export.h -I../../../DCPS/Compiler/idl_test2_lib FooDefTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
FooDefTypeSupportC.inl FooDefTypeSupportC.cpp FooDefTypeSupportS.h FooDefTypeSupportC.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += BazDefTypeSupportC.inl BazDefTypeSupportC.cpp BazDefTypeSupportS.h BazDefTypeSupportC.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "BazDefTypeSupport.idl" -nt "BazDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "BazDefTypeSupport.idl" -nt "BazDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "BazDefTypeSupport.idl" -nt "BazDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "BazDefTypeSupport.idl" -nt "BazDefTypeSupportC.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "BazDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "BazDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "BazDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "BazDefTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "BazDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "BazDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "BazDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "BazDefTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "BazDefTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "BazDefTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "BazDefTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "BazDefTypeSupportC.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
BazDefTypeSupportC.inl BazDefTypeSupportC.cpp BazDefTypeSupportS.h BazDefTypeSupportC.h: BazDefTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -I../../../.. -SS -Wb,no_fixed_err -Wb,export_macro=FooLib_Export -Wb,export_include=foolib_export.h -I../../../DCPS/Compiler/idl_test2_lib BazDefTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
BazDefTypeSupportC.inl BazDefTypeSupportC.cpp BazDefTypeSupportS.h BazDefTypeSupportC.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += FooDefTypeSupportImpl.cpp FooDef_TS.cpp FooDefTypeSupport.idl FooDefTypeSupportImpl.h FooDefC.h FooDef_TS.hpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/FooDef.idl" -nt "FooDefTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/FooDef.idl" -nt "FooDef_TS.cpp" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/FooDef.idl" -nt "FooDefTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/FooDef.idl" -nt "FooDefTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/FooDef.idl" -nt "FooDefC.h" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/FooDef.idl" -nt "FooDef_TS.hpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "FooDefTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "FooDef_TS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "FooDefTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "FooDefTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "FooDefC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "FooDef_TS.hpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "FooDefTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "FooDef_TS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "FooDefTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "FooDefTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "FooDefC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "FooDef_TS.hpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
FooDefTypeSupportImpl.cpp FooDef_TS.cpp FooDefTypeSupport.idl FooDefTypeSupportImpl.h FooDefC.h FooDef_TS.hpp: ../../../DCPS/Compiler/idl_test2_lib/FooDef.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -GfaceTS -Lface -Wb,export_macro=FooLib_Export -Wb,export_include=foolib_export.h -I../../../DCPS/Compiler/idl_test2_lib ../../../DCPS/Compiler/idl_test2_lib/FooDef.idl


GENERATED_DIRTY += BazDefTypeSupportImpl.cpp BazDef_TS.cpp BazDefTypeSupport.idl BazDefTypeSupportImpl.h BazDefC.h BazDef_TS.hpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/BazDef.idl" -nt "BazDefTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/BazDef.idl" -nt "BazDef_TS.cpp" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/BazDef.idl" -nt "BazDefTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/BazDef.idl" -nt "BazDefTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/BazDef.idl" -nt "BazDefC.h" 2> /dev/null || $(TEST_EXE) "../../../DCPS/Compiler/idl_test2_lib/BazDef.idl" -nt "BazDef_TS.hpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "BazDefTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "BazDef_TS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "BazDefTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "BazDefTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "BazDefC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "BazDef_TS.hpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "BazDefTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "BazDef_TS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "BazDefTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "BazDefTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "BazDefC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "BazDef_TS.hpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
BazDefTypeSupportImpl.cpp BazDef_TS.cpp BazDefTypeSupport.idl BazDefTypeSupportImpl.h BazDefC.h BazDef_TS.hpp: ../../../DCPS/Compiler/idl_test2_lib/BazDef.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -GfaceTS -Lface -Wb,export_macro=FooLib_Export -Wb,export_include=foolib_export.h -I../../../DCPS/Compiler/idl_test2_lib ../../../DCPS/Compiler/idl_test2_lib/BazDef.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += FooDefTypeSupport$(IDL_CLIENT_HDR_EXT) BazDefTypeSupport$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = FooDefTypeSupportC.cpp BazDefTypeSupportC.cpp FooDefTypeSupportImpl.cpp BazDefTypeSupportImpl.cpp BazDef_TS.cpp FooDef_TS.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:FooDefTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:BazDefTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:FooDefTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:FooDef_TS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:BazDefTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:BazDef_TS.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(built_in_topics),1)
ifneq ($(uses_wchar),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


