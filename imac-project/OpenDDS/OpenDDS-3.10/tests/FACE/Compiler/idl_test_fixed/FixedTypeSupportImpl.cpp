/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Fixed.idl */
#include "FixedTypeSupportImpl.h"

#include <algorithm>
#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: M1 */



/* Begin CONST: f1 */


/* End CONST: f1 */


/* Begin TYPEDEF: Myfixed */


/* End TYPEDEF: Myfixed */


/* Begin TYPEDEF: FixedArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const M1::FixedArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    gen_find_size(arr[i0], size, padding);
  }
}

bool operator<<(Serializer& strm, const M1::FixedArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, M1::FixedArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
    if (!(strm >> arr[i0])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, M1::FixedArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 3; ++i) {
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
namespace M1 {
FixedArray_slice* FixedArray_alloc()
{
  void* const raw = ACE_Allocator::instance()->malloc(sizeof(FixedArray));
  FixedArray_slice* const slice = static_cast<FixedArray_slice*>(raw);
  FixedArray_init_i(slice);
  return slice;
}

void FixedArray_init_i(M1::Myfixed* begin)
{
  std::uninitialized_fill_n(begin, 3, M1::Myfixed());
}

void FixedArray_fini_i(M1::Myfixed* begin)
{
  for (int i = 0; i < 3; ++i) {
    begin[i].~Myfixed();
  }
}

void FixedArray_free(FixedArray_slice* slice)
{
  if (!slice) return;
  FixedArray_fini_i(slice);
  ACE_Allocator::instance()->free(slice);
}

FixedArray_slice* FixedArray_dup(const FixedArray_slice* slice)
{
  FixedArray_slice* const arr = FixedArray_alloc();
  if (arr) FixedArray_copy(arr, slice);
  return arr;
}

void FixedArray_copy(FixedArray_slice* dst, const FixedArray_slice* src)
{
  if (!src || !dst) return;
  for (ACE_CDR::ULong i0 = 0; i0 < 3; ++i0) {
    dst[i0] = src[i0];
  }
}

}

/* End TYPEDEF: FixedArray */


/* Begin TYPEDEF: FixedSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const M1::FixedSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    gen_find_size(seq[i], size, padding);
  }
}

bool operator<<(Serializer& strm, const M1::FixedSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, M1::FixedSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, M1::FixedSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  ser >> length;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FixedSeq */


/* Begin STRUCT: S1 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const M1::S1& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  M1::FixedArray_forany stru_vec(const_cast<M1::FixedArray_slice*>(stru.vec));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.key);
  gen_find_size(stru.amount, size, padding);
  gen_find_size(stru_vec, size, padding);
  gen_find_size(stru.lst, size, padding);
}

bool operator<<(Serializer& strm, const M1::S1& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  M1::FixedArray_forany stru_vec(const_cast<M1::FixedArray_slice*>(stru.vec));
  return (strm << stru.key)
    && (strm << stru.amount)
    && (strm << stru_vec)
    && (strm << stru.lst);
}

bool operator>>(Serializer& strm, M1::S1& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  M1::FixedArray_forany stru_vec(const_cast<M1::FixedArray_slice*>(stru.vec));
  return (strm >> stru.key)
    && (strm >> stru.amount)
    && (strm >> stru_vec)
    && (strm >> stru.lst);
}

size_t gen_max_marshaled_size(const M1::S1& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const M1::S1> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const M1::S1> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.key);
}

bool operator<<(Serializer& strm, KeyOnly<const M1::S1> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.key);
}

bool operator>>(Serializer& strm, KeyOnly<M1::S1> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.key);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace M1 {
::DDS::DataWriter_ptr S1TypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<S1> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr S1TypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<S1> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr S1TypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<S1> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<S1, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& S1TypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<S1>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool S1TypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* S1TypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
S1TypeSupport::_ptr_type S1TypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<M1::S1> : MetaStruct {
  typedef M1::S1 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const M1::S1& typed = *static_cast<const M1::S1*>(stru);
    if (std::strcmp(field, "key") == 0) {
      return typed.key;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct M1::S1)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "key") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'key' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    gen_skip_over(ser, static_cast<M1::Myfixed*>(0));
    gen_skip_over(ser, static_cast<M1::FixedArray_forany*>(0));
    gen_skip_over(ser, static_cast<M1::FixedSeq*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct M1::S1");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "key") == 0) {
      return make_field_cmp(&T::key, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct M1::S1)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"key", "amount", "vec", "lst", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "key") == 0) {
      return &static_cast<const T*>(stru)->key;
    }
    if (std::strcmp(field, "amount") == 0) {
      return &static_cast<const T*>(stru)->amount;
    }
    if (std::strcmp(field, "vec") == 0) {
      return &static_cast<const T*>(stru)->vec;
    }
    if (std::strcmp(field, "lst") == 0) {
      return &static_cast<const T*>(stru)->lst;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct M1::S1)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "key") == 0) {
      static_cast<T*>(lhs)->key = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "vec") == 0) {
      M1::FixedArray* lhsArr = &static_cast<T*>(lhs)->vec;
      const M1::FixedArray* rhsArr = static_cast<const M1::FixedArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "lst") == 0) {
      static_cast<T*>(lhs)->lst = *static_cast<const M1::FixedSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct M1::S1)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "key") == 0) {
      return static_cast<const T*>(lhs)->key == static_cast<const T*>(rhs)->key;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct M1::S1)");
  }
};

template<>
const MetaStruct& getMetaStruct<M1::S1>()
{
  static MetaStructImpl<M1::S1> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, M1::S1*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<M1::S1>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
namespace M1 {
bool S1::operator==(const S1& rhs) const
{
  if (key != rhs.key) {
    return false;
  }
  if (amount != rhs.amount) {
    return false;
  }
  for (int i0 = 0; i0 < 3; ++i0) {
    if (vec[i0] != rhs.vec[i0]) {
      return false;
    }
  }
  if (lst != rhs.lst) {
    return false;
  }
  return true;
}

void swap(S1& lhs, S1& rhs)
{
  using std::swap;
  swap(lhs.key, rhs.key);
  swap(lhs.amount, rhs.amount);
  std::swap_ranges(lhs.vec, lhs.vec + 3, rhs.vec);
  swap(lhs.lst, rhs.lst);
}

ACE_CDR::Boolean operator<< (ACE_OutputCDR &, const S1&) { return true; }

ACE_CDR::Boolean operator>> (ACE_InputCDR &, S1&) { return true; }

}

/* End STRUCT: S1 */

/* End MODULE: M1 */
