/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file FaceHeaderTestMsg.idl */
#ifndef OPENDDS_IDL_GENERATED_FACEHEADERTESTMSGTYPESUPPORTIMPL_H_FCZ3PF
#define OPENDDS_IDL_GENERATED_FACEHEADERTESTMSGTYPESUPPORTIMPL_H_FCZ3PF
#include "FaceHeaderTestMsgC.h"
#include "dds/DCPS/Definitions.h"
#include "FaceHeaderTestMsgTypeSupportC.h"
#include "dds/DCPS/PoolAllocationBase.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "FaceHeaderTest_Export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: HeaderTest */



/* Begin TYPEDEF: BoundedString */


/* End TYPEDEF: BoundedString */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FaceHeaderTest_Export
void gen_find_size(const HeaderTest::Message& stru, size_t& size, size_t& padding);

FaceHeaderTest_Export
bool operator<<(Serializer& strm, const HeaderTest::Message& stru);

FaceHeaderTest_Export
bool operator>>(Serializer& strm, HeaderTest::Message& stru);

FaceHeaderTest_Export
size_t gen_max_marshaled_size(const HeaderTest::Message& stru, bool align);

FaceHeaderTest_Export
size_t gen_max_marshaled_size(KeyOnly<const HeaderTest::Message> stru, bool align);

FaceHeaderTest_Export
void gen_find_size(KeyOnly<const HeaderTest::Message> stru, size_t& size, size_t& padding);

FaceHeaderTest_Export
bool operator<<(Serializer& strm, KeyOnly<const HeaderTest::Message> stru);

FaceHeaderTest_Export
bool operator>>(Serializer& strm, KeyOnly<HeaderTest::Message> stru);

template <>
struct MarshalTraits<HeaderTest::Message> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace HeaderTest {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FaceHeaderTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const HeaderTest::Message&, const HeaderTest::Message&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace HeaderTest {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<HeaderTest::Message> {
  typedef HeaderTest::Message MessageType;
  typedef HeaderTest::MessageSeq MessageSequenceType;
  typedef HeaderTest::MessageTypeSupport TypeSupportType;
  typedef HeaderTest::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef HeaderTest::MessageDataWriter DataWriterType;
  typedef HeaderTest::MessageDataReader DataReaderType;
  typedef HeaderTest::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "HeaderTest::Message"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace HeaderTest {
class FaceHeaderTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
FaceHeaderTest_Export
const MetaStruct& getMetaStruct<HeaderTest::Message>();
FaceHeaderTest_Export
void gen_skip_over(Serializer& ser, HeaderTest::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: HeaderTest */
#endif /* OPENDDS_IDL_GENERATED_FACEHEADERTESTMSGTYPESUPPORTIMPL_H_FCZ3PF */
