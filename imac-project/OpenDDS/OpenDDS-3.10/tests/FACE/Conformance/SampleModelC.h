/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file SampleModel.idl */
#ifndef OPENDDS_IDL_GENERATED_SAMPLEMODELC_H_WUKQ8T
#define OPENDDS_IDL_GENERATED_SAMPLEMODELC_H_WUKQ8T
#include <tao/orbconf.h>
#include <tao/Basic_Types.h>
#include <ace/CDR_Stream.h>
#include <tao/VarOut_T.h>
#include "FACE/StringManager.h"
#include "FACE/types.hpp"
#include "SampleModel_Export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: FACE */



/* Begin MODULE: DM */



/* Begin TYPEDEF: Latitude */

namespace FACE {
namespace DM {
typedef ::FACE::Double Latitude;
typedef ::FACE::Double_out Latitude_out;
}
}

/* End TYPEDEF: Latitude */


/* Begin TYPEDEF: Longitude */

namespace FACE {
namespace DM {
typedef ::FACE::Double Longitude;
typedef ::FACE::Double_out Longitude_out;
}
}

/* End TYPEDEF: Longitude */


/* Begin TYPEDEF: Altitude */

namespace FACE {
namespace DM {
typedef ::FACE::Double Altitude;
typedef ::FACE::Double_out Altitude_out;
}
}

/* End TYPEDEF: Altitude */


/* Begin STRUCT: Position */

namespace FACE {
namespace DM {
struct Position;
typedef ::TAO_Fixed_Var_T<Position> Position_var;
typedef Position& Position_out;

struct SampleModel_Export Position
{
  typedef Position_var _var_type;
  typedef Position_out _out_type;

  FACE::DM::Latitude lat;
  FACE::DM::Longitude lon;
  FACE::DM::Altitude alt;

  bool operator==(const Position& rhs) const;
  bool operator!=(const Position& rhs) const { return !(*this == rhs); }
  OPENDDS_POOL_ALLOCATION_HOOKS
};

SampleModel_Export ACE_CDR::Boolean operator<< (ACE_OutputCDR& os, const Position& x);

SampleModel_Export ACE_CDR::Boolean operator>> (ACE_InputCDR& os, Position& x);

}
}

/* End STRUCT: Position */


/* Begin STRUCT: EGI_Data */

namespace FACE {
namespace DM {
struct EGI_Data;
typedef ::TAO_Fixed_Var_T<EGI_Data> EGI_Data_var;
typedef EGI_Data& EGI_Data_out;

struct SampleModel_Export EGI_Data
{
  typedef EGI_Data_var _var_type;
  typedef EGI_Data_out _out_type;

  FACE::DM::Position pos;

  bool operator==(const EGI_Data& rhs) const;
  bool operator!=(const EGI_Data& rhs) const { return !(*this == rhs); }
  OPENDDS_POOL_ALLOCATION_HOOKS
};

SampleModel_Export ACE_CDR::Boolean operator<< (ACE_OutputCDR& os, const EGI_Data& x);

SampleModel_Export ACE_CDR::Boolean operator>> (ACE_InputCDR& os, EGI_Data& x);

}
}

/* End STRUCT: EGI_Data */


/* Begin STRUCT: AttitudeBodyFrame */

namespace FACE {
namespace DM {
struct AttitudeBodyFrame;
typedef ::TAO_Fixed_Var_T<AttitudeBodyFrame> AttitudeBodyFrame_var;
typedef AttitudeBodyFrame& AttitudeBodyFrame_out;

struct SampleModel_Export AttitudeBodyFrame
{
  typedef AttitudeBodyFrame_var _var_type;
  typedef AttitudeBodyFrame_out _out_type;

  ::FACE::Octet empty;

  bool operator==(const AttitudeBodyFrame& rhs) const;
  bool operator!=(const AttitudeBodyFrame& rhs) const { return !(*this == rhs); }
  OPENDDS_POOL_ALLOCATION_HOOKS
};

SampleModel_Export ACE_CDR::Boolean operator<< (ACE_OutputCDR& os, const AttitudeBodyFrame& x);

SampleModel_Export ACE_CDR::Boolean operator>> (ACE_InputCDR& os, AttitudeBodyFrame& x);

}
}

/* End STRUCT: AttitudeBodyFrame */


/* Begin STRUCT: IMU_Data */

namespace FACE {
namespace DM {
struct IMU_Data;
typedef ::TAO_Fixed_Var_T<IMU_Data> IMU_Data_var;
typedef IMU_Data& IMU_Data_out;

struct SampleModel_Export IMU_Data
{
  typedef IMU_Data_var _var_type;
  typedef IMU_Data_out _out_type;

  FACE::DM::AttitudeBodyFrame att;

  bool operator==(const IMU_Data& rhs) const;
  bool operator!=(const IMU_Data& rhs) const { return !(*this == rhs); }
  OPENDDS_POOL_ALLOCATION_HOOKS
};

SampleModel_Export ACE_CDR::Boolean operator<< (ACE_OutputCDR& os, const IMU_Data& x);

SampleModel_Export ACE_CDR::Boolean operator>> (ACE_InputCDR& os, IMU_Data& x);

}
}

/* End STRUCT: IMU_Data */


/* Begin STRUCT: Nav_Data */

namespace FACE {
namespace DM {
struct Nav_Data;
typedef ::TAO_Fixed_Var_T<Nav_Data> Nav_Data_var;
typedef Nav_Data& Nav_Data_out;

struct SampleModel_Export Nav_Data
{
  typedef Nav_Data_var _var_type;
  typedef Nav_Data_out _out_type;

  FACE::DM::Position pos;
  FACE::DM::AttitudeBodyFrame att;

  bool operator==(const Nav_Data& rhs) const;
  bool operator!=(const Nav_Data& rhs) const { return !(*this == rhs); }
  OPENDDS_POOL_ALLOCATION_HOOKS
};

SampleModel_Export ACE_CDR::Boolean operator<< (ACE_OutputCDR& os, const Nav_Data& x);

SampleModel_Export ACE_CDR::Boolean operator>> (ACE_InputCDR& os, Nav_Data& x);

}
}

/* End STRUCT: Nav_Data */

/* End MODULE: DM */

/* End MODULE: FACE */
#endif /* OPENDDS_IDL_GENERATED_SAMPLEMODELC_H_WUKQ8T */
