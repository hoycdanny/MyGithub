// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_SATELLITETYPESUPPORTC_OBQRGU_H_
#define _TAO_IDL_SATELLITETYPESUPPORTC_OBQRGU_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "LivelinessKeepAliveTest_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "SatelliteC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO LivelinessKeepAliveTest_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Satellite
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< Satellite::Telemetry, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> TelemetrySeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_SATELLITE_TELEMETRYTYPESUPPORT__VAR_OUT_CH_)
#define _SATELLITE_TELEMETRYTYPESUPPORT__VAR_OUT_CH_

  class TelemetryTypeSupport;
  typedef TelemetryTypeSupport *TelemetryTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        TelemetryTypeSupport
      >
    TelemetryTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        TelemetryTypeSupport
      >
    TelemetryTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class LivelinessKeepAliveTest_Export TelemetryTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef TelemetryTypeSupport_ptr _ptr_type;
    typedef TelemetryTypeSupport_var _var_type;
    typedef TelemetryTypeSupport_out _out_type;

    // The static operations.
    static TelemetryTypeSupport_ptr _duplicate (TelemetryTypeSupport_ptr obj);

    static void _tao_release (TelemetryTypeSupport_ptr obj);

    static TelemetryTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static TelemetryTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TelemetryTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TelemetryTypeSupport (void);

    

    virtual ~TelemetryTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TelemetryTypeSupport (const TelemetryTypeSupport &);

    void operator= (const TelemetryTypeSupport &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_SATELLITE_TELEMETRYDATAWRITER__VAR_OUT_CH_)
#define _SATELLITE_TELEMETRYDATAWRITER__VAR_OUT_CH_

  class TelemetryDataWriter;
  typedef TelemetryDataWriter *TelemetryDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        TelemetryDataWriter
      >
    TelemetryDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        TelemetryDataWriter
      >
    TelemetryDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class LivelinessKeepAliveTest_Export TelemetryDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef TelemetryDataWriter_ptr _ptr_type;
    typedef TelemetryDataWriter_var _var_type;
    typedef TelemetryDataWriter_out _out_type;

    // The static operations.
    static TelemetryDataWriter_ptr _duplicate (TelemetryDataWriter_ptr obj);

    static void _tao_release (TelemetryDataWriter_ptr obj);

    static TelemetryDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static TelemetryDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TelemetryDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::Satellite::Telemetry & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::Satellite::Telemetry & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::Satellite::Telemetry & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::Satellite::Telemetry & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::Satellite::Telemetry & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::Satellite::Telemetry & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::Satellite::Telemetry & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::Satellite::Telemetry & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Satellite::Telemetry & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Satellite::Telemetry & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TelemetryDataWriter (void);

    

    virtual ~TelemetryDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TelemetryDataWriter (const TelemetryDataWriter &);

    void operator= (const TelemetryDataWriter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_SATELLITE_TELEMETRYDATAREADER__VAR_OUT_CH_)
#define _SATELLITE_TELEMETRYDATAREADER__VAR_OUT_CH_

  class TelemetryDataReader;
  typedef TelemetryDataReader *TelemetryDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        TelemetryDataReader
      >
    TelemetryDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        TelemetryDataReader
      >
    TelemetryDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class LivelinessKeepAliveTest_Export TelemetryDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef TelemetryDataReader_ptr _ptr_type;
    typedef TelemetryDataReader_var _var_type;
    typedef TelemetryDataReader_out _out_type;

    // The static operations.
    static TelemetryDataReader_ptr _duplicate (TelemetryDataReader_ptr obj);

    static void _tao_release (TelemetryDataReader_ptr obj);

    static TelemetryDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static TelemetryDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TelemetryDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::Satellite::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::Satellite::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::Satellite::Telemetry & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::Satellite::Telemetry & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::Satellite::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::Satellite::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::Satellite::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Satellite::Telemetry & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Satellite::Telemetry & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TelemetryDataReader (void);

    

    virtual ~TelemetryDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TelemetryDataReader (const TelemetryDataReader &);

    void operator= (const TelemetryDataReader &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Satellite

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Satellite
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< Satellite::Alert, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> AlertSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_SATELLITE_ALERTTYPESUPPORT__VAR_OUT_CH_)
#define _SATELLITE_ALERTTYPESUPPORT__VAR_OUT_CH_

  class AlertTypeSupport;
  typedef AlertTypeSupport *AlertTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        AlertTypeSupport
      >
    AlertTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        AlertTypeSupport
      >
    AlertTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class LivelinessKeepAliveTest_Export AlertTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef AlertTypeSupport_ptr _ptr_type;
    typedef AlertTypeSupport_var _var_type;
    typedef AlertTypeSupport_out _out_type;

    // The static operations.
    static AlertTypeSupport_ptr _duplicate (AlertTypeSupport_ptr obj);

    static void _tao_release (AlertTypeSupport_ptr obj);

    static AlertTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static AlertTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AlertTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AlertTypeSupport (void);

    

    virtual ~AlertTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AlertTypeSupport (const AlertTypeSupport &);

    void operator= (const AlertTypeSupport &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_SATELLITE_ALERTDATAWRITER__VAR_OUT_CH_)
#define _SATELLITE_ALERTDATAWRITER__VAR_OUT_CH_

  class AlertDataWriter;
  typedef AlertDataWriter *AlertDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        AlertDataWriter
      >
    AlertDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        AlertDataWriter
      >
    AlertDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class LivelinessKeepAliveTest_Export AlertDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef AlertDataWriter_ptr _ptr_type;
    typedef AlertDataWriter_var _var_type;
    typedef AlertDataWriter_out _out_type;

    // The static operations.
    static AlertDataWriter_ptr _duplicate (AlertDataWriter_ptr obj);

    static void _tao_release (AlertDataWriter_ptr obj);

    static AlertDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static AlertDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AlertDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::Satellite::Alert & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::Satellite::Alert & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::Satellite::Alert & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::Satellite::Alert & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::Satellite::Alert & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::Satellite::Alert & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::Satellite::Alert & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::Satellite::Alert & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Satellite::Alert & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Satellite::Alert & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AlertDataWriter (void);

    

    virtual ~AlertDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AlertDataWriter (const AlertDataWriter &);

    void operator= (const AlertDataWriter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_SATELLITE_ALERTDATAREADER__VAR_OUT_CH_)
#define _SATELLITE_ALERTDATAREADER__VAR_OUT_CH_

  class AlertDataReader;
  typedef AlertDataReader *AlertDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        AlertDataReader
      >
    AlertDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        AlertDataReader
      >
    AlertDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class LivelinessKeepAliveTest_Export AlertDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef AlertDataReader_ptr _ptr_type;
    typedef AlertDataReader_var _var_type;
    typedef AlertDataReader_out _out_type;

    // The static operations.
    static AlertDataReader_ptr _duplicate (AlertDataReader_ptr obj);

    static void _tao_release (AlertDataReader_ptr obj);

    static AlertDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static AlertDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AlertDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::Satellite::AlertSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::Satellite::AlertSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::Satellite::Alert & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::Satellite::Alert & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::Satellite::AlertSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::Satellite::AlertSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::Satellite::AlertSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Satellite::Alert & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Satellite::Alert & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AlertDataReader (void);

    

    virtual ~AlertDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AlertDataReader (const AlertDataReader &);

    void operator= (const AlertDataReader &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Satellite

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SATELLITE_TELEMETRYTYPESUPPORT__TRAITS_)
#define _SATELLITE_TELEMETRYTYPESUPPORT__TRAITS_

  template<>
  struct LivelinessKeepAliveTest_Export Objref_Traits< ::Satellite::TelemetryTypeSupport>
  {
    static ::Satellite::TelemetryTypeSupport_ptr duplicate (
        ::Satellite::TelemetryTypeSupport_ptr p);
    static void release (
        ::Satellite::TelemetryTypeSupport_ptr p);
    static ::Satellite::TelemetryTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Satellite::TelemetryTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SATELLITE_TELEMETRYDATAWRITER__TRAITS_)
#define _SATELLITE_TELEMETRYDATAWRITER__TRAITS_

  template<>
  struct LivelinessKeepAliveTest_Export Objref_Traits< ::Satellite::TelemetryDataWriter>
  {
    static ::Satellite::TelemetryDataWriter_ptr duplicate (
        ::Satellite::TelemetryDataWriter_ptr p);
    static void release (
        ::Satellite::TelemetryDataWriter_ptr p);
    static ::Satellite::TelemetryDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Satellite::TelemetryDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SATELLITE_TELEMETRYDATAREADER__TRAITS_)
#define _SATELLITE_TELEMETRYDATAREADER__TRAITS_

  template<>
  struct LivelinessKeepAliveTest_Export Objref_Traits< ::Satellite::TelemetryDataReader>
  {
    static ::Satellite::TelemetryDataReader_ptr duplicate (
        ::Satellite::TelemetryDataReader_ptr p);
    static void release (
        ::Satellite::TelemetryDataReader_ptr p);
    static ::Satellite::TelemetryDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Satellite::TelemetryDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SATELLITE_ALERTTYPESUPPORT__TRAITS_)
#define _SATELLITE_ALERTTYPESUPPORT__TRAITS_

  template<>
  struct LivelinessKeepAliveTest_Export Objref_Traits< ::Satellite::AlertTypeSupport>
  {
    static ::Satellite::AlertTypeSupport_ptr duplicate (
        ::Satellite::AlertTypeSupport_ptr p);
    static void release (
        ::Satellite::AlertTypeSupport_ptr p);
    static ::Satellite::AlertTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Satellite::AlertTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SATELLITE_ALERTDATAWRITER__TRAITS_)
#define _SATELLITE_ALERTDATAWRITER__TRAITS_

  template<>
  struct LivelinessKeepAliveTest_Export Objref_Traits< ::Satellite::AlertDataWriter>
  {
    static ::Satellite::AlertDataWriter_ptr duplicate (
        ::Satellite::AlertDataWriter_ptr p);
    static void release (
        ::Satellite::AlertDataWriter_ptr p);
    static ::Satellite::AlertDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Satellite::AlertDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SATELLITE_ALERTDATAREADER__TRAITS_)
#define _SATELLITE_ALERTDATAREADER__TRAITS_

  template<>
  struct LivelinessKeepAliveTest_Export Objref_Traits< ::Satellite::AlertDataReader>
  {
    static ::Satellite::AlertDataReader_ptr duplicate (
        ::Satellite::AlertDataReader_ptr p);
    static void release (
        ::Satellite::AlertDataReader_ptr p);
    static ::Satellite::AlertDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Satellite::AlertDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "SatelliteTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

