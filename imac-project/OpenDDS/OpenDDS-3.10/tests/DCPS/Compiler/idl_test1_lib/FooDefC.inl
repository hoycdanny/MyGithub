// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfShorts_forany>::free (
    Xyz::ArrayOfShorts_slice * _tao_slice
  )
{
  Xyz::ArrayOfShorts_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfShorts_slice *
TAO::Array_Traits<Xyz::ArrayOfShorts_forany>::dup (
    const Xyz::ArrayOfShorts_slice * _tao_slice
  )
{
  return Xyz::ArrayOfShorts_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfShorts_forany>::copy (
    Xyz::ArrayOfShorts_slice * _tao_to,
    const Xyz::ArrayOfShorts_slice * _tao_from
  )
{
  Xyz::ArrayOfShorts_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfShorts_forany>::zero (
    Xyz::ArrayOfShorts_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Short ();
    }
}

ACE_INLINE
Xyz::ArrayOfShorts_slice *
TAO::Array_Traits<Xyz::ArrayOfShorts_forany>::alloc (void)
{
  return Xyz::ArrayOfShorts_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfShorts2_forany>::free (
    Xyz::ArrayOfShorts2_slice * _tao_slice
  )
{
  Xyz::ArrayOfShorts2_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfShorts2_slice *
TAO::Array_Traits<Xyz::ArrayOfShorts2_forany>::dup (
    const Xyz::ArrayOfShorts2_slice * _tao_slice
  )
{
  return Xyz::ArrayOfShorts2_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfShorts2_forany>::copy (
    Xyz::ArrayOfShorts2_slice * _tao_to,
    const Xyz::ArrayOfShorts2_slice * _tao_from
  )
{
  Xyz::ArrayOfShorts2_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfShorts2_forany>::zero (
    Xyz::ArrayOfShorts2_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Short ();
    }
}

ACE_INLINE
Xyz::ArrayOfShorts2_slice *
TAO::Array_Traits<Xyz::ArrayOfShorts2_forany>::alloc (void)
{
  return Xyz::ArrayOfShorts2_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::MultiDimArray_forany>::free (
    Xyz::MultiDimArray_slice * _tao_slice
  )
{
  Xyz::MultiDimArray_free (_tao_slice);
}

ACE_INLINE
Xyz::MultiDimArray_slice *
TAO::Array_Traits<Xyz::MultiDimArray_forany>::dup (
    const Xyz::MultiDimArray_slice * _tao_slice
  )
{
  return Xyz::MultiDimArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::MultiDimArray_forany>::copy (
    Xyz::MultiDimArray_slice * _tao_to,
    const Xyz::MultiDimArray_slice * _tao_from
  )
{
  Xyz::MultiDimArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::MultiDimArray_forany>::zero (
    Xyz::MultiDimArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 4; ++i2)
            {
              for ( ::CORBA::ULong i3 = 0; i3 < 5; ++i3)
                {
                  _tao_slice[i0][i1][i2][i3] = ::TAO::String_Manager ();
                }
            }
        }
    }
}

ACE_INLINE
Xyz::MultiDimArray_slice *
TAO::Array_Traits<Xyz::MultiDimArray_forany>::alloc (void)
{
  return Xyz::MultiDimArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfArrayOfShorts2_forany>::free (
    Xyz::ArrayOfArrayOfShorts2_slice * _tao_slice
  )
{
  Xyz::ArrayOfArrayOfShorts2_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfArrayOfShorts2_slice *
TAO::Array_Traits<Xyz::ArrayOfArrayOfShorts2_forany>::dup (
    const Xyz::ArrayOfArrayOfShorts2_slice * _tao_slice
  )
{
  return Xyz::ArrayOfArrayOfShorts2_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfArrayOfShorts2_forany>::copy (
    Xyz::ArrayOfArrayOfShorts2_slice * _tao_to,
    const Xyz::ArrayOfArrayOfShorts2_slice * _tao_from
  )
{
  Xyz::ArrayOfArrayOfShorts2_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfArrayOfShorts2_forany>::zero (
    Xyz::ArrayOfArrayOfShorts2_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      // call the underlying _zero
      TAO::Array_Traits< Xyz::ArrayOfShorts2_forany>::zero (_tao_slice[i0]);
    }
}

ACE_INLINE
Xyz::ArrayOfArrayOfShorts2_slice *
TAO::Array_Traits<Xyz::ArrayOfArrayOfShorts2_forany>::alloc (void)
{
  return Xyz::ArrayOfArrayOfShorts2_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAStruct_forany>::free (
    Xyz::ArrayOfAStruct_slice * _tao_slice
  )
{
  Xyz::ArrayOfAStruct_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfAStruct_slice *
TAO::Array_Traits<Xyz::ArrayOfAStruct_forany>::dup (
    const Xyz::ArrayOfAStruct_slice * _tao_slice
  )
{
  return Xyz::ArrayOfAStruct_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAStruct_forany>::copy (
    Xyz::ArrayOfAStruct_slice * _tao_to,
    const Xyz::ArrayOfAStruct_slice * _tao_from
  )
{
  Xyz::ArrayOfAStruct_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAStruct_forany>::zero (
    Xyz::ArrayOfAStruct_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = Xyz::AStruct ();
    }
}

ACE_INLINE
Xyz::ArrayOfAStruct_slice *
TAO::Array_Traits<Xyz::ArrayOfAStruct_forany>::alloc (void)
{
  return Xyz::ArrayOfAStruct_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:39

// *************************************************************
// Inline operations for union Xyz::AUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:58

// Accessor to set the discriminant.
ACE_INLINE
void
Xyz::AUnion::_d (Xyz::ColorX discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Xyz::ColorX
Xyz::AUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:865

/// Accessor to set the member.
ACE_INLINE
void
Xyz::AUnion::rsv (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Xyz::redx;
  this->u_.rsv_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Xyz::AUnion::rsv (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Xyz::redx;
  // Set the value.
  this->u_.rsv_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Xyz::AUnion::rsv (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Xyz::redx;
  // Set the value.
  ::CORBA::String_var rsv_var = val;
  this->u_.rsv_ = rsv_var._retn ();
}

ACE_INLINE
const char *
Xyz::AUnion::rsv (void) const // get method
{
  return this->u_.rsv_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1068

/// Accessor to set the member.
ACE_INLINE
void
Xyz::AUnion::gsv (const Xyz::AStruct &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Xyz::greenx;
  ACE_NEW (
      this->u_.gsv_,
      Xyz::AStruct (val)
    );
}

// Readonly get method.
ACE_INLINE
const Xyz::AStruct &
Xyz::AUnion::gsv (void) const
{
  return *this->u_.gsv_;
}

// Read/write get method.
ACE_INLINE
Xyz::AStruct &
Xyz::AUnion::gsv (void)
{
  return *this->u_.gsv_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:580

// Accessor to set the member.
ACE_INLINE
void
Xyz::AUnion::usv (CORBA::UShort val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Xyz::bluex;
  // Set the value.
  this->u_.usv_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::UShort
Xyz::AUnion::usv (void) const
{
  return this->u_.usv_;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAStructSeq_forany>::free (
    Xyz::ArrayOfAStructSeq_slice * _tao_slice
  )
{
  Xyz::ArrayOfAStructSeq_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfAStructSeq_slice *
TAO::Array_Traits<Xyz::ArrayOfAStructSeq_forany>::dup (
    const Xyz::ArrayOfAStructSeq_slice * _tao_slice
  )
{
  return Xyz::ArrayOfAStructSeq_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAStructSeq_forany>::copy (
    Xyz::ArrayOfAStructSeq_slice * _tao_to,
    const Xyz::ArrayOfAStructSeq_slice * _tao_from
  )
{
  Xyz::ArrayOfAStructSeq_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAStructSeq_forany>::zero (
    Xyz::ArrayOfAStructSeq_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = Xyz::AStructSeqX ();
    }
}

ACE_INLINE
Xyz::ArrayOfAStructSeq_slice *
TAO::Array_Traits<Xyz::ArrayOfAStructSeq_forany>::alloc (void)
{
  return Xyz::ArrayOfAStructSeq_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::OctetArray_forany>::free (
    Xyz::OctetArray_slice * _tao_slice
  )
{
  Xyz::OctetArray_free (_tao_slice);
}

ACE_INLINE
Xyz::OctetArray_slice *
TAO::Array_Traits<Xyz::OctetArray_forany>::dup (
    const Xyz::OctetArray_slice * _tao_slice
  )
{
  return Xyz::OctetArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::OctetArray_forany>::copy (
    Xyz::OctetArray_slice * _tao_to,
    const Xyz::OctetArray_slice * _tao_from
  )
{
  Xyz::OctetArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::OctetArray_forany>::zero (
    Xyz::OctetArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Octet ();
    }
}

ACE_INLINE
Xyz::OctetArray_slice *
TAO::Array_Traits<Xyz::OctetArray_forany>::alloc (void)
{
  return Xyz::OctetArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:39

// *************************************************************
// Inline operations for union Xyz::TestUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:148



// Accessor to set the discriminant.
ACE_INLINE
void
Xyz::TestUnion::_d ( ::CORBA::Boolean discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
::CORBA::Boolean
Xyz::TestUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:232

/// Accessor to set the member.
ACE_INLINE
void
Xyz::TestUnion::te (Xyz::TestEnum val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = false;
  // Set the value.
  this->u_.te_ = val;
}

/// Retrieve the member.
ACE_INLINE
Xyz::TestEnum
Xyz::TestUnion::te (void) const
{
  return this->u_.te_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1068

/// Accessor to set the member.
ACE_INLINE
void
Xyz::TestUnion::swte (const Xyz::StructWithTypedefedEnum &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = true;
  this->u_.swte_ = val;
}

// Readonly get method.
ACE_INLINE
const Xyz::StructWithTypedefedEnum &
Xyz::TestUnion::swte (void) const
{
  return this->u_.swte_;
}

// Read/write get method.
ACE_INLINE
Xyz::StructWithTypedefedEnum &
Xyz::TestUnion::swte (void)
{
  return this->u_.swte_;
}

