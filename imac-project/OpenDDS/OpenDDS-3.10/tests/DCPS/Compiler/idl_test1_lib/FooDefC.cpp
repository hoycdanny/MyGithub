// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "FooDefC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FooDefC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfShorts_slice *
Xyz::ArrayOfShorts_dup (const Xyz::ArrayOfShorts_slice *_tao_src_array)
{
  Xyz::ArrayOfShorts_slice *_tao_dup_array =
    Xyz::ArrayOfShorts_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfShorts_slice *> (0);
    }
  
  Xyz::ArrayOfShorts_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfShorts_slice *
Xyz::ArrayOfShorts_alloc (void)
{
  Xyz::ArrayOfShorts_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Short[5], 0);
  return retval;
}

void
Xyz::ArrayOfShorts_free (
    Xyz::ArrayOfShorts_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfShorts_copy (
    Xyz::ArrayOfShorts_slice * _tao_to,
    const Xyz::ArrayOfShorts_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfShorts2_slice *
Xyz::ArrayOfShorts2_dup (const Xyz::ArrayOfShorts2_slice *_tao_src_array)
{
  Xyz::ArrayOfShorts2_slice *_tao_dup_array =
    Xyz::ArrayOfShorts2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfShorts2_slice *> (0);
    }
  
  Xyz::ArrayOfShorts2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfShorts2_slice *
Xyz::ArrayOfShorts2_alloc (void)
{
  Xyz::ArrayOfShorts2_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Short[3], 0);
  return retval;
}

void
Xyz::ArrayOfShorts2_free (
    Xyz::ArrayOfShorts2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfShorts2_copy (
    Xyz::ArrayOfShorts2_slice * _tao_to,
    const Xyz::ArrayOfShorts2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::MultiDimArray_slice *
Xyz::MultiDimArray_dup (const Xyz::MultiDimArray_slice *_tao_src_array)
{
  Xyz::MultiDimArray_slice *_tao_dup_array =
    Xyz::MultiDimArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::MultiDimArray_slice *> (0);
    }
  
  Xyz::MultiDimArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::MultiDimArray_slice *
Xyz::MultiDimArray_alloc (void)
{
  Xyz::MultiDimArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[2][3][4][5], 0);
  return retval;
}

void
Xyz::MultiDimArray_free (
    Xyz::MultiDimArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::MultiDimArray_copy (
    Xyz::MultiDimArray_slice * _tao_to,
    const Xyz::MultiDimArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 4; ++i2)
            {
              for ( ::CORBA::ULong i3 = 0; i3 < 5; ++i3)
                {
                  _tao_to[i0][i1][i2][i3] = _tao_from[i0][i1][i2][i3];
                }
            }
        }
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfShorts2_slice *
Xyz::ArrayOfArrayOfShorts2_dup (const Xyz::ArrayOfArrayOfShorts2_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfShorts2_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfShorts2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfShorts2_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfShorts2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfShorts2_slice *
Xyz::ArrayOfArrayOfShorts2_alloc (void)
{
  Xyz::ArrayOfArrayOfShorts2_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfShorts2[3], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfShorts2_free (
    Xyz::ArrayOfArrayOfShorts2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfShorts2_copy (
    Xyz::ArrayOfArrayOfShorts2_slice * _tao_to,
    const Xyz::ArrayOfArrayOfShorts2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfShorts2_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_USHORTSEQ_CS_)
#define _XYZ_USHORTSEQ_CS_

Xyz::UShortSeq::UShortSeq (void)
{}

Xyz::UShortSeq::UShortSeq (
    ::CORBA::ULong length,
    ::CORBA::UShort * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        ::CORBA::UShort,
        3
      >
    (length, buffer, release)
{}

Xyz::UShortSeq::UShortSeq (
    const UShortSeq &seq)
  : ::TAO::bounded_value_sequence<
        ::CORBA::UShort,
        3
      > (seq)
{}

Xyz::UShortSeq::~UShortSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_ARRAYOFSHORTSSEQ_CS_)
#define _XYZ_ARRAYOFSHORTSSEQ_CS_

Xyz::ArrayOfShortsSeq::ArrayOfShortsSeq (void)
{}

Xyz::ArrayOfShortsSeq::ArrayOfShortsSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_array_sequence<
        ArrayOfShorts,
        ArrayOfShorts_slice,
        ArrayOfShorts_tag
      > (max)
{}

Xyz::ArrayOfShortsSeq::ArrayOfShortsSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Xyz::ArrayOfShorts * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_array_sequence<
        ArrayOfShorts,
        ArrayOfShorts_slice,
        ArrayOfShorts_tag
      >
    (max, length, buffer, release)
{}

Xyz::ArrayOfShortsSeq::ArrayOfShortsSeq (
    const ArrayOfShortsSeq &seq)
  : ::TAO::unbounded_array_sequence<
        ArrayOfShorts,
        ArrayOfShorts_slice,
        ArrayOfShorts_tag
      > (seq)
{}

Xyz::ArrayOfShortsSeq::~ArrayOfShortsSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SHORTSEQ_CS_)
#define _XYZ_SHORTSEQ_CS_

Xyz::ShortSeq::ShortSeq (void)
{}

Xyz::ShortSeq::ShortSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (max)
{}

Xyz::ShortSeq::ShortSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      >
    (max, length, buffer, release)
{}

Xyz::ShortSeq::ShortSeq (
    const ShortSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (seq)
{}

Xyz::ShortSeq::~ShortSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfAStruct_slice *
Xyz::ArrayOfAStruct_dup (const Xyz::ArrayOfAStruct_slice *_tao_src_array)
{
  Xyz::ArrayOfAStruct_slice *_tao_dup_array =
    Xyz::ArrayOfAStruct_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfAStruct_slice *> (0);
    }
  
  Xyz::ArrayOfAStruct_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfAStruct_slice *
Xyz::ArrayOfAStruct_alloc (void)
{
  Xyz::ArrayOfAStruct_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::AStruct[3], 0);
  return retval;
}

void
Xyz::ArrayOfAStruct_free (
    Xyz::ArrayOfAStruct_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfAStruct_copy (
    Xyz::ArrayOfAStruct_slice * _tao_to,
    const Xyz::ArrayOfAStruct_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

Xyz::AUnion::AUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = Xyz::bluex;
}

Xyz::AUnion::AUnion (const ::Xyz::AUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Xyz::redx:
    {
      this->u_.rsv_ = ::CORBA::string_dup (u.u_.rsv_);
    }
    break;
    case Xyz::greenx:
    {
      if (u.u_.gsv_ == 0)
        {
          this->u_.gsv_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.gsv_,
              Xyz::AStruct (*u.u_.gsv_)
            );
        }
    }
    break;
    default:
    {
      this->u_.usv_ = u.u_.usv_;
    }
    break;
  }
}

Xyz::AUnion::~AUnion (void)
{
  // Finalize.
  this->_reset ();
}

Xyz::AUnion &
Xyz::AUnion::operator= (const ::Xyz::AUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Xyz::redx:
    {
      this->u_.rsv_ = ::CORBA::string_dup (u.u_.rsv_);
    }
    break;
    case Xyz::greenx:
    {
      if (u.u_.gsv_ == 0)
        {
          this->u_.gsv_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.gsv_,
              Xyz::AStruct (*u.u_.gsv_),
              *this
            );
        }
    }
    break;
    default:
    {
      this->u_.usv_ = u.u_.usv_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Xyz::AUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case Xyz::redx:
      ::CORBA::string_free (this->u_.rsv_);
      this->u_.rsv_ = 0;
      
    break;
    
    case Xyz::greenx:
      delete this->u_.gsv_;
      this->u_.gsv_ = 0;
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_AUNIONSEQ_CS_)
#define _XYZ_AUNIONSEQ_CS_

Xyz::AUnionSeq::AUnionSeq (void)
{}

Xyz::AUnionSeq::AUnionSeq (
    ::CORBA::ULong length,
    Xyz::AUnion * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        AUnion,
        3
      >
    (length, buffer, release)
{}

Xyz::AUnionSeq::AUnionSeq (
    const AUnionSeq &seq)
  : ::TAO::bounded_value_sequence<
        AUnion,
        3
      > (seq)
{}

Xyz::AUnionSeq::~AUnionSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_ACHARSEQ_CS_)
#define _XYZ_ACHARSEQ_CS_

Xyz::AcharSeq::AcharSeq (void)
{}

Xyz::AcharSeq::AcharSeq (
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        ::CORBA::Char,
        2
      >
    (length, buffer, release)
{}

Xyz::AcharSeq::AcharSeq (
    const AcharSeq &seq)
  : ::TAO::bounded_value_sequence<
        ::CORBA::Char,
        2
      > (seq)
{}

Xyz::AcharSeq::~AcharSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_ASTRINGSEQ_CS_)
#define _XYZ_ASTRINGSEQ_CS_

Xyz::AStringSeq::AStringSeq (void)
{}

Xyz::AStringSeq::AStringSeq (
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_basic_string_sequence<char, 4>
    (length, buffer, release)
{}

Xyz::AStringSeq::AStringSeq (
    const AStringSeq &seq)
  : ::TAO::bounded_basic_string_sequence<char, 4> (seq)
{}

Xyz::AStringSeq::~AStringSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_ACHARSEQSEQ_CS_)
#define _XYZ_ACHARSEQSEQ_CS_

Xyz::AcharSeqSeq::AcharSeqSeq (void)
{}

Xyz::AcharSeqSeq::AcharSeqSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        AcharSeq
      > (max)
{}

Xyz::AcharSeqSeq::AcharSeqSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Xyz::AcharSeq * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        AcharSeq
      >
    (max, length, buffer, release)
{}

Xyz::AcharSeqSeq::AcharSeqSeq (
    const AcharSeqSeq &seq)
  : ::TAO::unbounded_value_sequence<
        AcharSeq
      > (seq)
{}

Xyz::AcharSeqSeq::~AcharSeqSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_AMYCHARSEQ_CS_)
#define _XYZ_AMYCHARSEQ_CS_

Xyz::AMyCharSeq::AMyCharSeq (void)
{}

Xyz::AMyCharSeq::AMyCharSeq (
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        MyChar,
        5
      >
    (length, buffer, release)
{}

Xyz::AMyCharSeq::AMyCharSeq (
    const AMyCharSeq &seq)
  : ::TAO::bounded_value_sequence<
        MyChar,
        5
      > (seq)
{}

Xyz::AMyCharSeq::~AMyCharSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_UNBOUNDEDSEQOFBOUNDEDSTRING_CS_)
#define _XYZ_UNBOUNDEDSEQOFBOUNDEDSTRING_CS_

Xyz::UnboundedSeqOfBoundedString::UnboundedSeqOfBoundedString (void)
{}

Xyz::UnboundedSeqOfBoundedString::UnboundedSeqOfBoundedString (
    ::CORBA::ULong max)
  : ::TAO::unbounded_bd_string_sequence<char, 100> (max)
{}

Xyz::UnboundedSeqOfBoundedString::UnboundedSeqOfBoundedString (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_bd_string_sequence<char, 100>
    (max, length, buffer, release)
{}

Xyz::UnboundedSeqOfBoundedString::UnboundedSeqOfBoundedString (
    const UnboundedSeqOfBoundedString &seq)
  : ::TAO::unbounded_bd_string_sequence<char, 100> (seq)
{}

Xyz::UnboundedSeqOfBoundedString::~UnboundedSeqOfBoundedString (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_BOUNDEDSEQOFBOUNDEDSTRING_CS_)
#define _XYZ_BOUNDEDSEQOFBOUNDEDSTRING_CS_

Xyz::BoundedSeqOfBoundedString::BoundedSeqOfBoundedString (void)
{}

Xyz::BoundedSeqOfBoundedString::BoundedSeqOfBoundedString (
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_bd_string_sequence<char, 10, 100>
    (length, buffer, release)
{}

Xyz::BoundedSeqOfBoundedString::BoundedSeqOfBoundedString (
    const BoundedSeqOfBoundedString &seq)
  : ::TAO::bounded_bd_string_sequence<char, 10, 100> (seq)
{}

Xyz::BoundedSeqOfBoundedString::~BoundedSeqOfBoundedString (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_UNBOUNDEDSEQOFUNBOUNDEDSTRING_CS_)
#define _XYZ_UNBOUNDEDSEQOFUNBOUNDEDSTRING_CS_

Xyz::UnboundedSeqOfUnboundedString::UnboundedSeqOfUnboundedString (void)
{}

Xyz::UnboundedSeqOfUnboundedString::UnboundedSeqOfUnboundedString (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

Xyz::UnboundedSeqOfUnboundedString::UnboundedSeqOfUnboundedString (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

Xyz::UnboundedSeqOfUnboundedString::UnboundedSeqOfUnboundedString (
    const UnboundedSeqOfUnboundedString &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

Xyz::UnboundedSeqOfUnboundedString::~UnboundedSeqOfUnboundedString (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_ASTRUCTSEQX_CS_)
#define _XYZ_ASTRUCTSEQX_CS_

Xyz::AStructSeqX::AStructSeqX (void)
{}

Xyz::AStructSeqX::AStructSeqX (
    ::CORBA::ULong length,
    Xyz::AStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        AStruct,
        3
      >
    (length, buffer, release)
{}

Xyz::AStructSeqX::AStructSeqX (
    const AStructSeqX &seq)
  : ::TAO::bounded_value_sequence<
        AStruct,
        3
      > (seq)
{}

Xyz::AStructSeqX::~AStructSeqX (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfAStructSeq_slice *
Xyz::ArrayOfAStructSeq_dup (const Xyz::ArrayOfAStructSeq_slice *_tao_src_array)
{
  Xyz::ArrayOfAStructSeq_slice *_tao_dup_array =
    Xyz::ArrayOfAStructSeq_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfAStructSeq_slice *> (0);
    }
  
  Xyz::ArrayOfAStructSeq_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfAStructSeq_slice *
Xyz::ArrayOfAStructSeq_alloc (void)
{
  Xyz::ArrayOfAStructSeq_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::AStructSeqX[3], 0);
  return retval;
}

void
Xyz::ArrayOfAStructSeq_free (
    Xyz::ArrayOfAStructSeq_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfAStructSeq_copy (
    Xyz::ArrayOfAStructSeq_slice * _tao_to,
    const Xyz::ArrayOfAStructSeq_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::OctetArray_slice *
Xyz::OctetArray_dup (const Xyz::OctetArray_slice *_tao_src_array)
{
  Xyz::OctetArray_slice *_tao_dup_array =
    Xyz::OctetArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::OctetArray_slice *> (0);
    }
  
  Xyz::OctetArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::OctetArray_slice *
Xyz::OctetArray_alloc (void)
{
  Xyz::OctetArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Octet[3], 0);
  return retval;
}

void
Xyz::OctetArray_free (
    Xyz::OctetArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::OctetArray_copy (
    Xyz::OctetArray_slice * _tao_to,
    const Xyz::OctetArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

Xyz::TestUnion::TestUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
  
}

Xyz::TestUnion::TestUnion (const ::Xyz::TestUnion &u)
{
  this->disc_ = u.disc_;
  
  if (!this->disc_)
    {
      this->u_.te_ = 
        u.u_.te_;
    }
  
  if (this->disc_)
    {
      this->u_.swte_ = u.u_.swte_;
    }
  
}

Xyz::TestUnion::~TestUnion (void)
{
  // Finalize.
  this->_reset ();
}

Xyz::TestUnion &
Xyz::TestUnion::operator= (const ::Xyz::TestUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (!this->disc_)
    {
      this->u_.te_ = 
        u.u_.te_;
    }
  
  if (this->disc_)
    {
      this->u_.swte_ = u.u_.swte_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Xyz::TestUnion::_reset (void)
{
  
  if (!this->disc_)
    {
      
    }
  
  if (this->disc_)
    {
      
    }
  
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_N1_FWDDECLSAMENAMESPACESTRUCTS_CS_)
#define _N1_FWDDECLSAMENAMESPACESTRUCTS_CS_

N1::FwdDeclSameNamespaceStructs::FwdDeclSameNamespaceStructs (void)
{}

N1::FwdDeclSameNamespaceStructs::FwdDeclSameNamespaceStructs (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        FwdDeclStruct
      > (max)
{}

N1::FwdDeclSameNamespaceStructs::FwdDeclSameNamespaceStructs (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    N1::FwdDeclStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        FwdDeclStruct
      >
    (max, length, buffer, release)
{}

N1::FwdDeclSameNamespaceStructs::FwdDeclSameNamespaceStructs (
    const FwdDeclSameNamespaceStructs &seq)
  : ::TAO::unbounded_value_sequence<
        FwdDeclStruct
      > (seq)
{}

N1::FwdDeclSameNamespaceStructs::~FwdDeclSameNamespaceStructs (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_N2_FWDDECLDIFFNAMESPACESTRUCTS_CS_)
#define _N2_FWDDECLDIFFNAMESPACESTRUCTS_CS_

N2::FwdDeclDiffNamespaceStructs::FwdDeclDiffNamespaceStructs (void)
{}

N2::FwdDeclDiffNamespaceStructs::FwdDeclDiffNamespaceStructs (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        N1::FwdDeclStruct
      > (max)
{}

N2::FwdDeclDiffNamespaceStructs::FwdDeclDiffNamespaceStructs (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    N1::FwdDeclStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        N1::FwdDeclStruct
      >
    (max, length, buffer, release)
{}

N2::FwdDeclDiffNamespaceStructs::FwdDeclDiffNamespaceStructs (
    const FwdDeclDiffNamespaceStructs &seq)
  : ::TAO::unbounded_value_sequence<
        N1::FwdDeclStruct
      > (seq)
{}

N2::FwdDeclDiffNamespaceStructs::~FwdDeclDiffNamespaceStructs (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_N1_FWDDECLSAMENAMESPACEAFTERDEFSTRUCTS_CS_)
#define _N1_FWDDECLSAMENAMESPACEAFTERDEFSTRUCTS_CS_

N1::FwdDeclSameNamespaceAfterDefStructs::FwdDeclSameNamespaceAfterDefStructs (void)
{}

N1::FwdDeclSameNamespaceAfterDefStructs::FwdDeclSameNamespaceAfterDefStructs (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        FwdDeclStruct
      > (max)
{}

N1::FwdDeclSameNamespaceAfterDefStructs::FwdDeclSameNamespaceAfterDefStructs (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    N1::FwdDeclStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        FwdDeclStruct
      >
    (max, length, buffer, release)
{}

N1::FwdDeclSameNamespaceAfterDefStructs::FwdDeclSameNamespaceAfterDefStructs (
    const FwdDeclSameNamespaceAfterDefStructs &seq)
  : ::TAO::unbounded_value_sequence<
        FwdDeclStruct
      > (seq)
{}

N1::FwdDeclSameNamespaceAfterDefStructs::~FwdDeclSameNamespaceAfterDefStructs (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfShorts_forany &_tao_array)
{
  return
    strm.write_short_array (
        reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfShorts_forany &_tao_array)
{
  return
    strm.read_short_array (
        reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfShorts2_forany &_tao_array)
{
  return
    strm.write_short_array (
        reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfShorts2_forany &_tao_array)
{
  return
    strm.read_short_array (
        reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::MultiDimArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              for ( ::CORBA::ULong i3 = 0; i3 < 5 && _tao_marshal_flag; ++i3)
                {
                  _tao_marshal_flag = (strm << _tao_array [i0][i1][i2][i3].in ());
                }
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::MultiDimArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              for ( ::CORBA::ULong i3 = 0; i3 < 5 && _tao_marshal_flag; ++i3)
                {
                  _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2][i3].out ());
                }
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfMultiDimArray &_tao_aggregate)
{
  Xyz::MultiDimArray_forany _tao_aggregate_mda
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::MultiDimArray_slice*) (
      #else
      (const_cast<
          Xyz::MultiDimArray_slice*> (
      #endif
          _tao_aggregate.mda
        )
    );
  return
    (strm << _tao_aggregate_mda);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfMultiDimArray &_tao_aggregate)
{
  Xyz::MultiDimArray_forany _tao_aggregate_mda
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::MultiDimArray_slice*) (
      #else
      (const_cast<
          Xyz::MultiDimArray_slice*> (
      #endif
          _tao_aggregate.mda
        )
    );
  return
    (strm >> _tao_aggregate_mda);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfShorts2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfShorts2_var tmp_var (Xyz::ArrayOfShorts2_dup (_tao_array[i0]));
      Xyz::ArrayOfShorts2_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfShorts2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfShorts2_forany tmp (Xyz::ArrayOfShorts2_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfShorts2_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfShorts2_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfShorts2 &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfShorts2_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfShorts2_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfShorts2_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm << _tao_aggregate_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfShorts2 &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfShorts2_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfShorts2_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfShorts2_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm >> _tao_aggregate_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Xyz::ColorX _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Xyz::ColorX & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Xyz::ColorX> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_UShortSeq_CPP_
#define _TAO_CDR_OP_Xyz_UShortSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::UShortSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::UShortSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_UShortSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_ArrayOfShortsSeq_CPP_
#define _TAO_CDR_OP_Xyz_ArrayOfShortsSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfShortsSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfShortsSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_ArrayOfShortsSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_ShortSeq_CPP_
#define _TAO_CDR_OP_Xyz_ShortSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ShortSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ShortSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_ShortSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.v1) &&
    (strm << _tao_aggregate.v2s);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.v1) &&
    (strm >> _tao_aggregate.v2s);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfAStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfAStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructContainingArrayOfAStruct &_tao_aggregate)
{
  Xyz::ArrayOfAStruct_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm << _tao_aggregate_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructContainingArrayOfAStruct &_tao_aggregate)
{
  Xyz::ArrayOfAStruct_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm >> _tao_aggregate_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Xyz::redx:
      {
        result = strm << _tao_union.rsv ();
      }
      break;
    case Xyz::greenx:
      {
        result = strm << _tao_union.gsv ();
      }
      break;
    default:
      {
        result = strm << _tao_union.usv ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AUnion &_tao_union
  )
{
  Xyz::ColorX _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Xyz::redx:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.rsv (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Xyz::greenx:
      {
        Xyz::AStruct _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.gsv (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::UShort _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.usv (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructAUnion &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.sau_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructAUnion &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.sau_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AUnionSeq_CPP_
#define _TAO_CDR_OP_Xyz_AUnionSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AUnionSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AUnionSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AUnionSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AcharSeq_CPP_
#define _TAO_CDR_OP_Xyz_AcharSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AcharSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AcharSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AcharSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AStringSeq_CPP_
#define _TAO_CDR_OP_Xyz_AStringSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AStringSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AStringSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AStringSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AcharSeqSeq_CPP_
#define _TAO_CDR_OP_Xyz_AcharSeqSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AcharSeqSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AcharSeqSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AcharSeqSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AMyCharSeq_CPP_
#define _TAO_CDR_OP_Xyz_AMyCharSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AMyCharSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AMyCharSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AMyCharSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_UnboundedSeqOfBoundedString_CPP_
#define _TAO_CDR_OP_Xyz_UnboundedSeqOfBoundedString_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::UnboundedSeqOfBoundedString &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::UnboundedSeqOfBoundedString &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_UnboundedSeqOfBoundedString_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_BoundedSeqOfBoundedString_CPP_
#define _TAO_CDR_OP_Xyz_BoundedSeqOfBoundedString_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::BoundedSeqOfBoundedString &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::BoundedSeqOfBoundedString &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_BoundedSeqOfBoundedString_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_UnboundedSeqOfUnboundedString_CPP_
#define _TAO_CDR_OP_Xyz_UnboundedSeqOfUnboundedString_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::UnboundedSeqOfUnboundedString &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::UnboundedSeqOfUnboundedString &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_UnboundedSeqOfUnboundedString_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AStructSeqX_CPP_
#define _TAO_CDR_OP_Xyz_AStructSeqX_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AStructSeqX &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AStructSeqX &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AStructSeqX_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfAStructSeq_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfAStructSeq_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructContainingArrayOfAStructSeq &_tao_aggregate)
{
  Xyz::ArrayOfAStructSeq_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStructSeq_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStructSeq_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm << _tao_aggregate_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructContainingArrayOfAStructSeq &_tao_aggregate)
{
  Xyz::ArrayOfAStructSeq_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStructSeq_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStructSeq_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm >> _tao_aggregate_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::OctetArray_forany &_tao_array)
{
  return
    strm.write_octet_array (
        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::OctetArray_forany &_tao_array)
{
  return
    strm.read_octet_array (
        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::Foo &_tao_aggregate)
{
  Xyz::OctetArray_forany _tao_aggregate_ooo
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::OctetArray_slice*) (
      #else
      (const_cast<
          Xyz::OctetArray_slice*> (
      #endif
          _tao_aggregate.ooo
        )
    );
  Xyz::ArrayOfAStruct_forany _tao_aggregate_structArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.structArray
        )
    );
  return
    (strm << _tao_aggregate.key) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.octer)) &&
    (strm << _tao_aggregate.xcolor) &&
    (strm << _tao_aggregate_ooo) &&
    (strm << _tao_aggregate.ushrtseq) &&
    (strm << _tao_aggregate.thestruct) &&
    (strm << _tao_aggregate.theStructSeq) &&
    (strm << _tao_aggregate.theString.in ()) &&
    (strm << _tao_aggregate_structArray) &&
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y) &&
    (strm << _tao_aggregate.theUnion);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::Foo &_tao_aggregate)
{
  Xyz::OctetArray_forany _tao_aggregate_ooo
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::OctetArray_slice*) (
      #else
      (const_cast<
          Xyz::OctetArray_slice*> (
      #endif
          _tao_aggregate.ooo
        )
    );
  Xyz::ArrayOfAStruct_forany _tao_aggregate_structArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.structArray
        )
    );
  return
    (strm >> _tao_aggregate.key) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.octer)) &&
    (strm >> _tao_aggregate.xcolor) &&
    (strm >> _tao_aggregate_ooo) &&
    (strm >> _tao_aggregate.ushrtseq) &&
    (strm >> _tao_aggregate.thestruct) &&
    (strm >> _tao_aggregate.theStructSeq) &&
    (strm >> _tao_aggregate.theString.out ()) &&
    (strm >> _tao_aggregate_structArray) &&
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y) &&
    (strm >> _tao_aggregate.theUnion);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Xyz::TestEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Xyz::TestEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Xyz::TestEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructWithTypedefedEnum &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.tte);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructWithTypedefedEnum &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.tte);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::TestUnion &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_union._d ())
    {
      result = strm << _tao_union.te ();
    }
  
  if (_tao_union._d ())
    {
      result = strm << _tao_union.swte ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::TestUnion &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_discriminant)
    {
      Xyz::TestEnum _tao_union_tmp =
        static_cast<Xyz::TestEnum> (0UL);
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.te (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (_tao_discriminant)
    {
      Xyz::StructWithTypedefedEnum _tao_union_tmp;
      result = strm >> _tao_union_tmp;

      if (result)
        {
          _tao_union.swte (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_N1_FwdDeclSameNamespaceStructs_CPP_
#define _TAO_CDR_OP_N1_FwdDeclSameNamespaceStructs_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const N1::FwdDeclSameNamespaceStructs &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    N1::FwdDeclSameNamespaceStructs &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_N1_FwdDeclSameNamespaceStructs_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_N2_FwdDeclDiffNamespaceStructs_CPP_
#define _TAO_CDR_OP_N2_FwdDeclDiffNamespaceStructs_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const N2::FwdDeclDiffNamespaceStructs &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    N2::FwdDeclDiffNamespaceStructs &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_N2_FwdDeclDiffNamespaceStructs_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const N1::FwdDeclStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.v1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    N1::FwdDeclStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.v1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_N1_FwdDeclSameNamespaceAfterDefStructs_CPP_
#define _TAO_CDR_OP_N1_FwdDeclSameNamespaceAfterDefStructs_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const N1::FwdDeclSameNamespaceAfterDefStructs &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    N1::FwdDeclSameNamespaceAfterDefStructs &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_N1_FwdDeclSameNamespaceAfterDefStructs_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Bar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Bar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL



