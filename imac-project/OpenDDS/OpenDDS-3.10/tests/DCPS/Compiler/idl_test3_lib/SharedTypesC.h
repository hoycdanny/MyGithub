// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_SHAREDTYPESC_MIXMUY_H_
#define _TAO_IDL_SHAREDTYPESC_MIXMUY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "foolib_export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO FooLib_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Xyz
{

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:47

  enum AnEnum
  {
    redx,
    greenx,
    bluex
  };

  typedef AnEnum &AnEnum_out;

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_XYZ_SEQOFBOOLEAN_CH_)
#define _XYZ_SEQOFBOOLEAN_CH_

  class SeqOfBoolean;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqOfBoolean
      >
    SeqOfBoolean_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqOfBoolean
      >
    SeqOfBoolean_out;

  class FooLib_Export SeqOfBoolean
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::Boolean,
            6
          >
  {
  public:
    SeqOfBoolean (void);
    SeqOfBoolean (
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer,
      ::CORBA::Boolean release = false);
    SeqOfBoolean (const SeqOfBoolean &);
    virtual ~SeqOfBoolean (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SeqOfBoolean_var _var_type;
    typedef SeqOfBoolean_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_XYZ_SEQOFSTRING_CH_)
#define _XYZ_SEQOFSTRING_CH_

  class SeqOfString;

  typedef
    ::TAO_VarSeq_Var_T<
        SeqOfString
      >
    SeqOfString_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqOfString
      >
    SeqOfString_out;

  class FooLib_Export SeqOfString
    : public
        ::TAO::bounded_basic_string_sequence<char, 6>
  {
  public:
    SeqOfString (void);
    SeqOfString (
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    SeqOfString (const SeqOfString &);
    virtual ~SeqOfString (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SeqOfString_var _var_type;
    typedef SeqOfString_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_XYZ_SEQOFCHAR_CH_)
#define _XYZ_SEQOFCHAR_CH_

  class SeqOfChar;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqOfChar
      >
    SeqOfChar_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqOfChar
      >
    SeqOfChar_out;

  class FooLib_Export SeqOfChar
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::Char,
            6
          >
  {
  public:
    SeqOfChar (void);
    SeqOfChar (
      ::CORBA::ULong length,
      ::CORBA::Char* buffer,
      ::CORBA::Boolean release = false);
    SeqOfChar (const SeqOfChar &);
    virtual ~SeqOfChar (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SeqOfChar_var _var_type;
    typedef SeqOfChar_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_XYZ_SEQOFOCTET_CH_)
#define _XYZ_SEQOFOCTET_CH_

  class SeqOfOctet;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqOfOctet
      >
    SeqOfOctet_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqOfOctet
      >
    SeqOfOctet_out;

  class FooLib_Export SeqOfOctet
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::Octet,
            6
          >
  {
  public:
    SeqOfOctet (void);
    SeqOfOctet (
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer,
      ::CORBA::Boolean release = false);
    SeqOfOctet (const SeqOfOctet &);
    virtual ~SeqOfOctet (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SeqOfOctet_var _var_type;
    typedef SeqOfOctet_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_XYZ_SEQOFLONG_CH_)
#define _XYZ_SEQOFLONG_CH_

  class SeqOfLong;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqOfLong
      >
    SeqOfLong_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqOfLong
      >
    SeqOfLong_out;

  class FooLib_Export SeqOfLong
    : public
        ::TAO::bounded_value_sequence<
            ::CORBA::Long,
            6
          >
  {
  public:
    SeqOfLong (void);
    SeqOfLong (
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
    SeqOfLong (const SeqOfLong &);
    virtual ~SeqOfLong (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SeqOfLong_var _var_type;
    typedef SeqOfLong_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_XYZ_SEQOFANENUM_CH_)
#define _XYZ_SEQOFANENUM_CH_

  class SeqOfAnEnum;

  typedef
    ::TAO_FixedSeq_Var_T<
        SeqOfAnEnum
      >
    SeqOfAnEnum_var;

  typedef
    ::TAO_Seq_Out_T<
        SeqOfAnEnum
      >
    SeqOfAnEnum_out;

  class FooLib_Export SeqOfAnEnum
    : public
        ::TAO::unbounded_value_sequence<
            AnEnum
          >
  {
  public:
    SeqOfAnEnum (void);
    SeqOfAnEnum ( ::CORBA::ULong max);
    SeqOfAnEnum (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      AnEnum* buffer,
      ::CORBA::Boolean release = false);
    SeqOfAnEnum (const SeqOfAnEnum &);
    virtual ~SeqOfAnEnum (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SeqOfAnEnum_var _var_type;
    typedef SeqOfAnEnum_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Boolean ArrayOfBoolean[5];
  typedef ::CORBA::Boolean ArrayOfBoolean_slice;
  struct ArrayOfBoolean_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayOfBoolean,
        ArrayOfBoolean_slice,
        ArrayOfBoolean_tag
      >
    ArrayOfBoolean_var;

  typedef
    ArrayOfBoolean
    ArrayOfBoolean_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfBoolean,
        ArrayOfBoolean_slice,
        ArrayOfBoolean_tag
      >
    ArrayOfBoolean_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfBoolean_slice *
  ArrayOfBoolean_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfBoolean_free (
      ArrayOfBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfBoolean_slice *
  ArrayOfBoolean_dup (
      const ArrayOfBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfBoolean_copy (
      ArrayOfBoolean_slice *_tao_to,
      const ArrayOfBoolean_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::TAO::String_Manager ArrayOfString[5];
  typedef ::TAO::String_Manager ArrayOfString_slice;
  struct ArrayOfString_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfString,
        ArrayOfString_slice,
        ArrayOfString_tag
      >
    ArrayOfString_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfString,
        ArrayOfString_var,
        ArrayOfString_slice,
        ArrayOfString_tag
      >
    ArrayOfString_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfString,
        ArrayOfString_slice,
        ArrayOfString_tag
      >
    ArrayOfString_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfString_slice *
  ArrayOfString_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfString_free (
      ArrayOfString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfString_slice *
  ArrayOfString_dup (
      const ArrayOfString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfString_copy (
      ArrayOfString_slice *_tao_to,
      const ArrayOfString_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Char ArrayOfChar[5];
  typedef ::CORBA::Char ArrayOfChar_slice;
  struct ArrayOfChar_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayOfChar,
        ArrayOfChar_slice,
        ArrayOfChar_tag
      >
    ArrayOfChar_var;

  typedef
    ArrayOfChar
    ArrayOfChar_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfChar,
        ArrayOfChar_slice,
        ArrayOfChar_tag
      >
    ArrayOfChar_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfChar_slice *
  ArrayOfChar_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfChar_free (
      ArrayOfChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfChar_slice *
  ArrayOfChar_dup (
      const ArrayOfChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfChar_copy (
      ArrayOfChar_slice *_tao_to,
      const ArrayOfChar_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Octet ArrayOfOctet[5];
  typedef ::CORBA::Octet ArrayOfOctet_slice;
  struct ArrayOfOctet_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayOfOctet,
        ArrayOfOctet_slice,
        ArrayOfOctet_tag
      >
    ArrayOfOctet_var;

  typedef
    ArrayOfOctet
    ArrayOfOctet_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfOctet,
        ArrayOfOctet_slice,
        ArrayOfOctet_tag
      >
    ArrayOfOctet_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfOctet_slice *
  ArrayOfOctet_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfOctet_free (
      ArrayOfOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfOctet_slice *
  ArrayOfOctet_dup (
      const ArrayOfOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfOctet_copy (
      ArrayOfOctet_slice *_tao_to,
      const ArrayOfOctet_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Long ArrayOfLong[5];
  typedef ::CORBA::Long ArrayOfLong_slice;
  struct ArrayOfLong_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayOfLong,
        ArrayOfLong_slice,
        ArrayOfLong_tag
      >
    ArrayOfLong_var;

  typedef
    ArrayOfLong
    ArrayOfLong_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfLong,
        ArrayOfLong_slice,
        ArrayOfLong_tag
      >
    ArrayOfLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfLong_slice *
  ArrayOfLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfLong_free (
      ArrayOfLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfLong_slice *
  ArrayOfLong_dup (
      const ArrayOfLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfLong_copy (
      ArrayOfLong_slice *_tao_to,
      const ArrayOfLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef AnEnum ArrayOfAnEnum[5];
  typedef AnEnum ArrayOfAnEnum_slice;
  struct ArrayOfAnEnum_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ArrayOfAnEnum,
        ArrayOfAnEnum_slice,
        ArrayOfAnEnum_tag
      >
    ArrayOfAnEnum_var;

  typedef
    ArrayOfAnEnum
    ArrayOfAnEnum_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfAnEnum,
        ArrayOfAnEnum_slice,
        ArrayOfAnEnum_tag
      >
    ArrayOfAnEnum_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfAnEnum_slice *
  ArrayOfAnEnum_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfAnEnum_free (
      ArrayOfAnEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfAnEnum_slice *
  ArrayOfAnEnum_dup (
      const ArrayOfAnEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfAnEnum_copy (
      ArrayOfAnEnum_slice *_tao_to,
      const ArrayOfAnEnum_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef SeqOfBoolean ArrayOfSeqOfBoolean[6];
  typedef SeqOfBoolean ArrayOfSeqOfBoolean_slice;
  struct ArrayOfSeqOfBoolean_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfSeqOfBoolean,
        ArrayOfSeqOfBoolean_slice,
        ArrayOfSeqOfBoolean_tag
      >
    ArrayOfSeqOfBoolean_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfSeqOfBoolean,
        ArrayOfSeqOfBoolean_var,
        ArrayOfSeqOfBoolean_slice,
        ArrayOfSeqOfBoolean_tag
      >
    ArrayOfSeqOfBoolean_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfSeqOfBoolean,
        ArrayOfSeqOfBoolean_slice,
        ArrayOfSeqOfBoolean_tag
      >
    ArrayOfSeqOfBoolean_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfBoolean_slice *
  ArrayOfSeqOfBoolean_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfBoolean_free (
      ArrayOfSeqOfBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfBoolean_slice *
  ArrayOfSeqOfBoolean_dup (
      const ArrayOfSeqOfBoolean_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfBoolean_copy (
      ArrayOfSeqOfBoolean_slice *_tao_to,
      const ArrayOfSeqOfBoolean_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef SeqOfString ArrayOfSeqOfString[6];
  typedef SeqOfString ArrayOfSeqOfString_slice;
  struct ArrayOfSeqOfString_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfSeqOfString,
        ArrayOfSeqOfString_slice,
        ArrayOfSeqOfString_tag
      >
    ArrayOfSeqOfString_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfSeqOfString,
        ArrayOfSeqOfString_var,
        ArrayOfSeqOfString_slice,
        ArrayOfSeqOfString_tag
      >
    ArrayOfSeqOfString_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfSeqOfString,
        ArrayOfSeqOfString_slice,
        ArrayOfSeqOfString_tag
      >
    ArrayOfSeqOfString_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfString_slice *
  ArrayOfSeqOfString_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfString_free (
      ArrayOfSeqOfString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfString_slice *
  ArrayOfSeqOfString_dup (
      const ArrayOfSeqOfString_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfString_copy (
      ArrayOfSeqOfString_slice *_tao_to,
      const ArrayOfSeqOfString_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef SeqOfChar ArrayOfSeqOfChar[6];
  typedef SeqOfChar ArrayOfSeqOfChar_slice;
  struct ArrayOfSeqOfChar_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfSeqOfChar,
        ArrayOfSeqOfChar_slice,
        ArrayOfSeqOfChar_tag
      >
    ArrayOfSeqOfChar_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfSeqOfChar,
        ArrayOfSeqOfChar_var,
        ArrayOfSeqOfChar_slice,
        ArrayOfSeqOfChar_tag
      >
    ArrayOfSeqOfChar_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfSeqOfChar,
        ArrayOfSeqOfChar_slice,
        ArrayOfSeqOfChar_tag
      >
    ArrayOfSeqOfChar_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfChar_slice *
  ArrayOfSeqOfChar_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfChar_free (
      ArrayOfSeqOfChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfChar_slice *
  ArrayOfSeqOfChar_dup (
      const ArrayOfSeqOfChar_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfChar_copy (
      ArrayOfSeqOfChar_slice *_tao_to,
      const ArrayOfSeqOfChar_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef SeqOfOctet ArrayOfSeqOfOctet[6];
  typedef SeqOfOctet ArrayOfSeqOfOctet_slice;
  struct ArrayOfSeqOfOctet_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfSeqOfOctet,
        ArrayOfSeqOfOctet_slice,
        ArrayOfSeqOfOctet_tag
      >
    ArrayOfSeqOfOctet_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfSeqOfOctet,
        ArrayOfSeqOfOctet_var,
        ArrayOfSeqOfOctet_slice,
        ArrayOfSeqOfOctet_tag
      >
    ArrayOfSeqOfOctet_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfSeqOfOctet,
        ArrayOfSeqOfOctet_slice,
        ArrayOfSeqOfOctet_tag
      >
    ArrayOfSeqOfOctet_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfOctet_slice *
  ArrayOfSeqOfOctet_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfOctet_free (
      ArrayOfSeqOfOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfOctet_slice *
  ArrayOfSeqOfOctet_dup (
      const ArrayOfSeqOfOctet_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfOctet_copy (
      ArrayOfSeqOfOctet_slice *_tao_to,
      const ArrayOfSeqOfOctet_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef SeqOfLong ArrayOfSeqOfLong[6];
  typedef SeqOfLong ArrayOfSeqOfLong_slice;
  struct ArrayOfSeqOfLong_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfSeqOfLong,
        ArrayOfSeqOfLong_slice,
        ArrayOfSeqOfLong_tag
      >
    ArrayOfSeqOfLong_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfSeqOfLong,
        ArrayOfSeqOfLong_var,
        ArrayOfSeqOfLong_slice,
        ArrayOfSeqOfLong_tag
      >
    ArrayOfSeqOfLong_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfSeqOfLong,
        ArrayOfSeqOfLong_slice,
        ArrayOfSeqOfLong_tag
      >
    ArrayOfSeqOfLong_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfLong_slice *
  ArrayOfSeqOfLong_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfLong_free (
      ArrayOfSeqOfLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfLong_slice *
  ArrayOfSeqOfLong_dup (
      const ArrayOfSeqOfLong_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfLong_copy (
      ArrayOfSeqOfLong_slice *_tao_to,
      const ArrayOfSeqOfLong_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef SeqOfAnEnum ArrayOfSeqOfAnEnum[6];
  typedef SeqOfAnEnum ArrayOfSeqOfAnEnum_slice;
  struct ArrayOfSeqOfAnEnum_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ArrayOfSeqOfAnEnum,
        ArrayOfSeqOfAnEnum_slice,
        ArrayOfSeqOfAnEnum_tag
      >
    ArrayOfSeqOfAnEnum_var;

  typedef
    TAO_Array_Out_T<
        ArrayOfSeqOfAnEnum,
        ArrayOfSeqOfAnEnum_var,
        ArrayOfSeqOfAnEnum_slice,
        ArrayOfSeqOfAnEnum_tag
      >
    ArrayOfSeqOfAnEnum_out;

  typedef
    TAO_Array_Forany_T<
        ArrayOfSeqOfAnEnum,
        ArrayOfSeqOfAnEnum_slice,
        ArrayOfSeqOfAnEnum_tag
      >
    ArrayOfSeqOfAnEnum_forany;

  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfAnEnum_slice *
  ArrayOfSeqOfAnEnum_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfAnEnum_free (
      ArrayOfSeqOfAnEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ArrayOfSeqOfAnEnum_slice *
  ArrayOfSeqOfAnEnum_dup (
      const ArrayOfSeqOfAnEnum_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ArrayOfSeqOfAnEnum_copy (
      ArrayOfSeqOfAnEnum_slice *_tao_to,
      const ArrayOfSeqOfAnEnum_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Xyz

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:904

  template<>
  class Arg_Traits< ::Xyz::AnEnum>
    : public
        Basic_Arg_Traits_T<
            ::Xyz::AnEnum,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Xyz::SeqOfBoolean>
    : public
        Var_Size_Arg_Traits_T<
            ::Xyz::SeqOfBoolean,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Xyz::SeqOfString>
    : public
        Var_Size_Arg_Traits_T<
            ::Xyz::SeqOfString,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Xyz::SeqOfChar>
    : public
        Var_Size_Arg_Traits_T<
            ::Xyz::SeqOfChar,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Xyz::SeqOfOctet>
    : public
        Var_Size_Arg_Traits_T<
            ::Xyz::SeqOfOctet,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Xyz::SeqOfLong>
    : public
        Var_Size_Arg_Traits_T<
            ::Xyz::SeqOfLong,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Xyz::SeqOfAnEnum>
    : public
        Var_Size_Arg_Traits_T<
            ::Xyz::SeqOfAnEnum,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfBoolean_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Xyz::ArrayOfBoolean_var,
            ::Xyz::ArrayOfBoolean_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfString_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfString_out,
            ::Xyz::ArrayOfString_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfChar_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Xyz::ArrayOfChar_var,
            ::Xyz::ArrayOfChar_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfOctet_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Xyz::ArrayOfOctet_var,
            ::Xyz::ArrayOfOctet_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfLong_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Xyz::ArrayOfLong_var,
            ::Xyz::ArrayOfLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfAnEnum_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Xyz::ArrayOfAnEnum_var,
            ::Xyz::ArrayOfAnEnum_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfSeqOfBoolean_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfSeqOfBoolean_out,
            ::Xyz::ArrayOfSeqOfBoolean_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfSeqOfString_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfSeqOfString_out,
            ::Xyz::ArrayOfSeqOfString_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfSeqOfChar_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfSeqOfChar_out,
            ::Xyz::ArrayOfSeqOfChar_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfSeqOfOctet_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfSeqOfOctet_out,
            ::Xyz::ArrayOfSeqOfOctet_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfSeqOfLong_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfSeqOfLong_out,
            ::Xyz::ArrayOfSeqOfLong_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Xyz::ArrayOfSeqOfAnEnum_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Xyz::ArrayOfSeqOfAnEnum_out,
            ::Xyz::ArrayOfSeqOfAnEnum_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfBoolean_forany
    >
  {
    static void free (
        Xyz::ArrayOfBoolean_slice * _tao_slice);
    static Xyz::ArrayOfBoolean_slice * dup (
        const Xyz::ArrayOfBoolean_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfBoolean_slice * _tao_to,
        const Xyz::ArrayOfBoolean_slice * _tao_from);
    static Xyz::ArrayOfBoolean_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfBoolean_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfString_forany
    >
  {
    static void free (
        Xyz::ArrayOfString_slice * _tao_slice);
    static Xyz::ArrayOfString_slice * dup (
        const Xyz::ArrayOfString_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfString_slice * _tao_to,
        const Xyz::ArrayOfString_slice * _tao_from);
    static Xyz::ArrayOfString_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfString_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfChar_forany
    >
  {
    static void free (
        Xyz::ArrayOfChar_slice * _tao_slice);
    static Xyz::ArrayOfChar_slice * dup (
        const Xyz::ArrayOfChar_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfChar_slice * _tao_to,
        const Xyz::ArrayOfChar_slice * _tao_from);
    static Xyz::ArrayOfChar_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfChar_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfOctet_forany
    >
  {
    static void free (
        Xyz::ArrayOfOctet_slice * _tao_slice);
    static Xyz::ArrayOfOctet_slice * dup (
        const Xyz::ArrayOfOctet_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfOctet_slice * _tao_to,
        const Xyz::ArrayOfOctet_slice * _tao_from);
    static Xyz::ArrayOfOctet_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfOctet_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfLong_forany
    >
  {
    static void free (
        Xyz::ArrayOfLong_slice * _tao_slice);
    static Xyz::ArrayOfLong_slice * dup (
        const Xyz::ArrayOfLong_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfLong_slice * _tao_to,
        const Xyz::ArrayOfLong_slice * _tao_from);
    static Xyz::ArrayOfLong_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfLong_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfAnEnum_forany
    >
  {
    static void free (
        Xyz::ArrayOfAnEnum_slice * _tao_slice);
    static Xyz::ArrayOfAnEnum_slice * dup (
        const Xyz::ArrayOfAnEnum_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfAnEnum_slice * _tao_to,
        const Xyz::ArrayOfAnEnum_slice * _tao_from);
    static Xyz::ArrayOfAnEnum_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfAnEnum_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfSeqOfBoolean_forany
    >
  {
    static void free (
        Xyz::ArrayOfSeqOfBoolean_slice * _tao_slice);
    static Xyz::ArrayOfSeqOfBoolean_slice * dup (
        const Xyz::ArrayOfSeqOfBoolean_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfSeqOfBoolean_slice * _tao_to,
        const Xyz::ArrayOfSeqOfBoolean_slice * _tao_from);
    static Xyz::ArrayOfSeqOfBoolean_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfSeqOfBoolean_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfSeqOfString_forany
    >
  {
    static void free (
        Xyz::ArrayOfSeqOfString_slice * _tao_slice);
    static Xyz::ArrayOfSeqOfString_slice * dup (
        const Xyz::ArrayOfSeqOfString_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfSeqOfString_slice * _tao_to,
        const Xyz::ArrayOfSeqOfString_slice * _tao_from);
    static Xyz::ArrayOfSeqOfString_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfSeqOfString_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfSeqOfChar_forany
    >
  {
    static void free (
        Xyz::ArrayOfSeqOfChar_slice * _tao_slice);
    static Xyz::ArrayOfSeqOfChar_slice * dup (
        const Xyz::ArrayOfSeqOfChar_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfSeqOfChar_slice * _tao_to,
        const Xyz::ArrayOfSeqOfChar_slice * _tao_from);
    static Xyz::ArrayOfSeqOfChar_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfSeqOfChar_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfSeqOfOctet_forany
    >
  {
    static void free (
        Xyz::ArrayOfSeqOfOctet_slice * _tao_slice);
    static Xyz::ArrayOfSeqOfOctet_slice * dup (
        const Xyz::ArrayOfSeqOfOctet_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfSeqOfOctet_slice * _tao_to,
        const Xyz::ArrayOfSeqOfOctet_slice * _tao_from);
    static Xyz::ArrayOfSeqOfOctet_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfSeqOfOctet_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfSeqOfLong_forany
    >
  {
    static void free (
        Xyz::ArrayOfSeqOfLong_slice * _tao_slice);
    static Xyz::ArrayOfSeqOfLong_slice * dup (
        const Xyz::ArrayOfSeqOfLong_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfSeqOfLong_slice * _tao_to,
        const Xyz::ArrayOfSeqOfLong_slice * _tao_from);
    static Xyz::ArrayOfSeqOfLong_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfSeqOfLong_slice * _tao_slice);
  };
  template<>
  struct FooLib_Export Array_Traits<
      Xyz::ArrayOfSeqOfAnEnum_forany
    >
  {
    static void free (
        Xyz::ArrayOfSeqOfAnEnum_slice * _tao_slice);
    static Xyz::ArrayOfSeqOfAnEnum_slice * dup (
        const Xyz::ArrayOfSeqOfAnEnum_slice * _tao_slice);
    static void copy (
        Xyz::ArrayOfSeqOfAnEnum_slice * _tao_to,
        const Xyz::ArrayOfSeqOfAnEnum_slice * _tao_from);
    static Xyz::ArrayOfSeqOfAnEnum_slice * alloc (void);
    static void zero (
        Xyz::ArrayOfSeqOfAnEnum_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Xyz::AnEnum _tao_enumerator);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Xyz::AnEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Xyz_SeqOfBoolean_H_
#define _TAO_CDR_OP_Xyz_SeqOfBoolean_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


FooLib_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfBoolean &_tao_sequence);
FooLib_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfBoolean &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Xyz_SeqOfBoolean_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Xyz_SeqOfString_H_
#define _TAO_CDR_OP_Xyz_SeqOfString_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


FooLib_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfString &_tao_sequence);
FooLib_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfString &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Xyz_SeqOfString_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Xyz_SeqOfChar_H_
#define _TAO_CDR_OP_Xyz_SeqOfChar_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


FooLib_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfChar &_tao_sequence);
FooLib_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfChar &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Xyz_SeqOfChar_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Xyz_SeqOfOctet_H_
#define _TAO_CDR_OP_Xyz_SeqOfOctet_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


FooLib_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfOctet &_tao_sequence);
FooLib_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfOctet &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Xyz_SeqOfOctet_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Xyz_SeqOfLong_H_
#define _TAO_CDR_OP_Xyz_SeqOfLong_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


FooLib_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfLong &_tao_sequence);
FooLib_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfLong &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Xyz_SeqOfLong_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Xyz_SeqOfAnEnum_H_
#define _TAO_CDR_OP_Xyz_SeqOfAnEnum_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


FooLib_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfAnEnum &_tao_sequence);
FooLib_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfAnEnum &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Xyz_SeqOfAnEnum_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfBoolean_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfBoolean_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfString_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfString_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfChar_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfChar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfOctet_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfOctet_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfLong_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfAnEnum_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfAnEnum_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfSeqOfBoolean_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfSeqOfBoolean_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfSeqOfString_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfSeqOfString_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfSeqOfChar_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfSeqOfChar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfSeqOfOctet_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfSeqOfOctet_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfSeqOfLong_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfSeqOfLong_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

FooLib_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Xyz::ArrayOfSeqOfAnEnum_forany &_tao_array);
FooLib_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Xyz::ArrayOfSeqOfAnEnum_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "SharedTypesC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

