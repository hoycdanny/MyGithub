// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "FooDef2C.h"
#include "tao/CDR.h"

#if !defined (__ACE_INLINE__)
#include "FooDef2C.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfBoolean2_slice *
Xyz::ArrayOfBoolean2_dup (const Xyz::ArrayOfBoolean2_slice *_tao_src_array)
{
  Xyz::ArrayOfBoolean2_slice *_tao_dup_array =
    Xyz::ArrayOfBoolean2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfBoolean2_slice *> (0);
    }
  
  Xyz::ArrayOfBoolean2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfBoolean2_slice *
Xyz::ArrayOfBoolean2_alloc (void)
{
  Xyz::ArrayOfBoolean2_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Boolean[5], 0);
  return retval;
}

void
Xyz::ArrayOfBoolean2_free (
    Xyz::ArrayOfBoolean2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfBoolean2_copy (
    Xyz::ArrayOfBoolean2_slice * _tao_to,
    const Xyz::ArrayOfBoolean2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfString2_slice *
Xyz::ArrayOfString2_dup (const Xyz::ArrayOfString2_slice *_tao_src_array)
{
  Xyz::ArrayOfString2_slice *_tao_dup_array =
    Xyz::ArrayOfString2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfString2_slice *> (0);
    }
  
  Xyz::ArrayOfString2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfString2_slice *
Xyz::ArrayOfString2_alloc (void)
{
  Xyz::ArrayOfString2_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[5], 0);
  return retval;
}

void
Xyz::ArrayOfString2_free (
    Xyz::ArrayOfString2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfString2_copy (
    Xyz::ArrayOfString2_slice * _tao_to,
    const Xyz::ArrayOfString2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfChar2_slice *
Xyz::ArrayOfChar2_dup (const Xyz::ArrayOfChar2_slice *_tao_src_array)
{
  Xyz::ArrayOfChar2_slice *_tao_dup_array =
    Xyz::ArrayOfChar2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfChar2_slice *> (0);
    }
  
  Xyz::ArrayOfChar2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfChar2_slice *
Xyz::ArrayOfChar2_alloc (void)
{
  Xyz::ArrayOfChar2_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[5], 0);
  return retval;
}

void
Xyz::ArrayOfChar2_free (
    Xyz::ArrayOfChar2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfChar2_copy (
    Xyz::ArrayOfChar2_slice * _tao_to,
    const Xyz::ArrayOfChar2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfOctet2_slice *
Xyz::ArrayOfOctet2_dup (const Xyz::ArrayOfOctet2_slice *_tao_src_array)
{
  Xyz::ArrayOfOctet2_slice *_tao_dup_array =
    Xyz::ArrayOfOctet2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfOctet2_slice *> (0);
    }
  
  Xyz::ArrayOfOctet2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfOctet2_slice *
Xyz::ArrayOfOctet2_alloc (void)
{
  Xyz::ArrayOfOctet2_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Octet[5], 0);
  return retval;
}

void
Xyz::ArrayOfOctet2_free (
    Xyz::ArrayOfOctet2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfOctet2_copy (
    Xyz::ArrayOfOctet2_slice * _tao_to,
    const Xyz::ArrayOfOctet2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfLong2_slice *
Xyz::ArrayOfLong2_dup (const Xyz::ArrayOfLong2_slice *_tao_src_array)
{
  Xyz::ArrayOfLong2_slice *_tao_dup_array =
    Xyz::ArrayOfLong2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfLong2_slice *> (0);
    }
  
  Xyz::ArrayOfLong2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfLong2_slice *
Xyz::ArrayOfLong2_alloc (void)
{
  Xyz::ArrayOfLong2_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[5], 0);
  return retval;
}

void
Xyz::ArrayOfLong2_free (
    Xyz::ArrayOfLong2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfLong2_copy (
    Xyz::ArrayOfLong2_slice * _tao_to,
    const Xyz::ArrayOfLong2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfAnEnum2_slice *
Xyz::ArrayOfAnEnum2_dup (const Xyz::ArrayOfAnEnum2_slice *_tao_src_array)
{
  Xyz::ArrayOfAnEnum2_slice *_tao_dup_array =
    Xyz::ArrayOfAnEnum2_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfAnEnum2_slice *> (0);
    }
  
  Xyz::ArrayOfAnEnum2_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfAnEnum2_slice *
Xyz::ArrayOfAnEnum2_alloc (void)
{
  Xyz::ArrayOfAnEnum2_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::AnEnum[5], 0);
  return retval;
}

void
Xyz::ArrayOfAnEnum2_free (
    Xyz::ArrayOfAnEnum2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfAnEnum2_copy (
    Xyz::ArrayOfAnEnum2_slice * _tao_to,
    const Xyz::ArrayOfAnEnum2_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfBoolean &_tao_aggregate)
{
  Xyz::ArrayOfBoolean_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfBoolean &_tao_aggregate)
{
  Xyz::ArrayOfBoolean_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfString &_tao_aggregate)
{
  Xyz::ArrayOfString_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfString_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfString &_tao_aggregate)
{
  Xyz::ArrayOfString_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfString_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfChar &_tao_aggregate)
{
  Xyz::ArrayOfChar_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfChar &_tao_aggregate)
{
  Xyz::ArrayOfChar_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfOctet &_tao_aggregate)
{
  Xyz::ArrayOfOctet_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfOctet &_tao_aggregate)
{
  Xyz::ArrayOfOctet_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfLong &_tao_aggregate)
{
  Xyz::ArrayOfLong_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfLong &_tao_aggregate)
{
  Xyz::ArrayOfLong_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfAnEnum &_tao_aggregate)
{
  Xyz::ArrayOfAnEnum_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfAnEnum &_tao_aggregate)
{
  Xyz::ArrayOfAnEnum_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfBoolean2_forany &_tao_array)
{
  return
    strm.write_boolean_array (
        reinterpret_cast <const ACE_CDR::Boolean *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfBoolean2_forany &_tao_array)
{
  return
    strm.read_boolean_array (
        reinterpret_cast <ACE_CDR::Boolean *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfString2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 5 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << ACE_OutputCDR::from_string (_tao_array [i0].in (), 7));
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfString2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 5 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> ACE_InputCDR::to_string (_tao_array [i0].out (), 7));
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfChar2_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfChar2_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfOctet2_forany &_tao_array)
{
  return
    strm.write_octet_array (
        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfOctet2_forany &_tao_array)
{
  return
    strm.read_octet_array (
        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfLong2_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfLong2_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfAnEnum2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 5 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfAnEnum2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 5 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfBoolean &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfBoolean &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfString &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfString &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfChar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfChar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfOctet &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfOctet &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfLong &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfLong &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfAnEnum &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfAnEnum &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



