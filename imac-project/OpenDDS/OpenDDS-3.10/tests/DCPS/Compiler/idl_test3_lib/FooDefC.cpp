// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "FooDefC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FooDefC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFARRAYOFBOOLEAN_CS_)
#define _XYZ_SEQOFARRAYOFBOOLEAN_CS_

Xyz::SeqOfArrayOfBoolean::SeqOfArrayOfBoolean (void)
{}

Xyz::SeqOfArrayOfBoolean::SeqOfArrayOfBoolean (
    ::CORBA::ULong length,
    Xyz::ArrayOfBoolean * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_array_sequence<
        ArrayOfBoolean,
        ArrayOfBoolean_slice,
        ArrayOfBoolean_tag,
        8
      >
    (length, buffer, release)
{}

Xyz::SeqOfArrayOfBoolean::SeqOfArrayOfBoolean (
    const SeqOfArrayOfBoolean &seq)
  : ::TAO::bounded_array_sequence<
        ArrayOfBoolean,
        ArrayOfBoolean_slice,
        ArrayOfBoolean_tag,
        8
      > (seq)
{}

Xyz::SeqOfArrayOfBoolean::~SeqOfArrayOfBoolean (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFARRAYOFSTRING_CS_)
#define _XYZ_SEQOFARRAYOFSTRING_CS_

Xyz::SeqOfArrayOfString::SeqOfArrayOfString (void)
{}

Xyz::SeqOfArrayOfString::SeqOfArrayOfString (
    ::CORBA::ULong length,
    Xyz::ArrayOfString * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_array_sequence<
        ArrayOfString,
        ArrayOfString_slice,
        ArrayOfString_tag,
        8
      >
    (length, buffer, release)
{}

Xyz::SeqOfArrayOfString::SeqOfArrayOfString (
    const SeqOfArrayOfString &seq)
  : ::TAO::bounded_array_sequence<
        ArrayOfString,
        ArrayOfString_slice,
        ArrayOfString_tag,
        8
      > (seq)
{}

Xyz::SeqOfArrayOfString::~SeqOfArrayOfString (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFARRAYOFCHAR_CS_)
#define _XYZ_SEQOFARRAYOFCHAR_CS_

Xyz::SeqOfArrayOfChar::SeqOfArrayOfChar (void)
{}

Xyz::SeqOfArrayOfChar::SeqOfArrayOfChar (
    ::CORBA::ULong length,
    Xyz::ArrayOfChar * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_array_sequence<
        ArrayOfChar,
        ArrayOfChar_slice,
        ArrayOfChar_tag,
        8
      >
    (length, buffer, release)
{}

Xyz::SeqOfArrayOfChar::SeqOfArrayOfChar (
    const SeqOfArrayOfChar &seq)
  : ::TAO::bounded_array_sequence<
        ArrayOfChar,
        ArrayOfChar_slice,
        ArrayOfChar_tag,
        8
      > (seq)
{}

Xyz::SeqOfArrayOfChar::~SeqOfArrayOfChar (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFARRAYOFOCTET_CS_)
#define _XYZ_SEQOFARRAYOFOCTET_CS_

Xyz::SeqOfArrayOfOctet::SeqOfArrayOfOctet (void)
{}

Xyz::SeqOfArrayOfOctet::SeqOfArrayOfOctet (
    ::CORBA::ULong length,
    Xyz::ArrayOfOctet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_array_sequence<
        ArrayOfOctet,
        ArrayOfOctet_slice,
        ArrayOfOctet_tag,
        8
      >
    (length, buffer, release)
{}

Xyz::SeqOfArrayOfOctet::SeqOfArrayOfOctet (
    const SeqOfArrayOfOctet &seq)
  : ::TAO::bounded_array_sequence<
        ArrayOfOctet,
        ArrayOfOctet_slice,
        ArrayOfOctet_tag,
        8
      > (seq)
{}

Xyz::SeqOfArrayOfOctet::~SeqOfArrayOfOctet (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFARRAYOFLONG_CS_)
#define _XYZ_SEQOFARRAYOFLONG_CS_

Xyz::SeqOfArrayOfLong::SeqOfArrayOfLong (void)
{}

Xyz::SeqOfArrayOfLong::SeqOfArrayOfLong (
    ::CORBA::ULong length,
    Xyz::ArrayOfLong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_array_sequence<
        ArrayOfLong,
        ArrayOfLong_slice,
        ArrayOfLong_tag,
        8
      >
    (length, buffer, release)
{}

Xyz::SeqOfArrayOfLong::SeqOfArrayOfLong (
    const SeqOfArrayOfLong &seq)
  : ::TAO::bounded_array_sequence<
        ArrayOfLong,
        ArrayOfLong_slice,
        ArrayOfLong_tag,
        8
      > (seq)
{}

Xyz::SeqOfArrayOfLong::~SeqOfArrayOfLong (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFARRAYOFANENUM_CS_)
#define _XYZ_SEQOFARRAYOFANENUM_CS_

Xyz::SeqOfArrayOfAnEnum::SeqOfArrayOfAnEnum (void)
{}

Xyz::SeqOfArrayOfAnEnum::SeqOfArrayOfAnEnum (
    ::CORBA::ULong length,
    Xyz::ArrayOfAnEnum * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_array_sequence<
        ArrayOfAnEnum,
        ArrayOfAnEnum_slice,
        ArrayOfAnEnum_tag,
        8
      >
    (length, buffer, release)
{}

Xyz::SeqOfArrayOfAnEnum::SeqOfArrayOfAnEnum (
    const SeqOfArrayOfAnEnum &seq)
  : ::TAO::bounded_array_sequence<
        ArrayOfAnEnum,
        ArrayOfAnEnum_slice,
        ArrayOfAnEnum_tag,
        8
      > (seq)
{}

Xyz::SeqOfArrayOfAnEnum::~SeqOfArrayOfAnEnum (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfBoolean_slice *
Xyz::ArrayOfArrayOfBoolean_dup (const Xyz::ArrayOfArrayOfBoolean_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfBoolean_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfBoolean_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfBoolean_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfBoolean_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfBoolean_slice *
Xyz::ArrayOfArrayOfBoolean_alloc (void)
{
  Xyz::ArrayOfArrayOfBoolean_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfBoolean[7], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfBoolean_free (
    Xyz::ArrayOfArrayOfBoolean_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfBoolean_copy (
    Xyz::ArrayOfArrayOfBoolean_slice * _tao_to,
    const Xyz::ArrayOfArrayOfBoolean_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 7; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfBoolean_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfString_slice *
Xyz::ArrayOfArrayOfString_dup (const Xyz::ArrayOfArrayOfString_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfString_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfString_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfString_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfString_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfString_slice *
Xyz::ArrayOfArrayOfString_alloc (void)
{
  Xyz::ArrayOfArrayOfString_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfString[7], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfString_free (
    Xyz::ArrayOfArrayOfString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfString_copy (
    Xyz::ArrayOfArrayOfString_slice * _tao_to,
    const Xyz::ArrayOfArrayOfString_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 7; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfString_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfChar_slice *
Xyz::ArrayOfArrayOfChar_dup (const Xyz::ArrayOfArrayOfChar_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfChar_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfChar_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfChar_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfChar_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfChar_slice *
Xyz::ArrayOfArrayOfChar_alloc (void)
{
  Xyz::ArrayOfArrayOfChar_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfChar[7], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfChar_free (
    Xyz::ArrayOfArrayOfChar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfChar_copy (
    Xyz::ArrayOfArrayOfChar_slice * _tao_to,
    const Xyz::ArrayOfArrayOfChar_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 7; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfChar_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfOctet_slice *
Xyz::ArrayOfArrayOfOctet_dup (const Xyz::ArrayOfArrayOfOctet_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfOctet_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfOctet_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfOctet_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfOctet_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfOctet_slice *
Xyz::ArrayOfArrayOfOctet_alloc (void)
{
  Xyz::ArrayOfArrayOfOctet_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfOctet[7], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfOctet_free (
    Xyz::ArrayOfArrayOfOctet_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfOctet_copy (
    Xyz::ArrayOfArrayOfOctet_slice * _tao_to,
    const Xyz::ArrayOfArrayOfOctet_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 7; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfOctet_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfLong_slice *
Xyz::ArrayOfArrayOfLong_dup (const Xyz::ArrayOfArrayOfLong_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfLong_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfLong_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfLong_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfLong_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfLong_slice *
Xyz::ArrayOfArrayOfLong_alloc (void)
{
  Xyz::ArrayOfArrayOfLong_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfLong[7], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfLong_free (
    Xyz::ArrayOfArrayOfLong_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfLong_copy (
    Xyz::ArrayOfArrayOfLong_slice * _tao_to,
    const Xyz::ArrayOfArrayOfLong_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 7; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfLong_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfArrayOfAnEnum_slice *
Xyz::ArrayOfArrayOfAnEnum_dup (const Xyz::ArrayOfArrayOfAnEnum_slice *_tao_src_array)
{
  Xyz::ArrayOfArrayOfAnEnum_slice *_tao_dup_array =
    Xyz::ArrayOfArrayOfAnEnum_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfArrayOfAnEnum_slice *> (0);
    }
  
  Xyz::ArrayOfArrayOfAnEnum_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfArrayOfAnEnum_slice *
Xyz::ArrayOfArrayOfAnEnum_alloc (void)
{
  Xyz::ArrayOfArrayOfAnEnum_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::ArrayOfAnEnum[7], 0);
  return retval;
}

void
Xyz::ArrayOfArrayOfAnEnum_free (
    Xyz::ArrayOfArrayOfAnEnum_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfArrayOfAnEnum_copy (
    Xyz::ArrayOfArrayOfAnEnum_slice * _tao_to,
    const Xyz::ArrayOfArrayOfAnEnum_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 7; ++i0)
    {
      // call the underlying _copy
      Xyz::ArrayOfAnEnum_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFSEQOFBOOLEAN_CS_)
#define _XYZ_SEQOFSEQOFBOOLEAN_CS_

Xyz::SeqOfSeqOfBoolean::SeqOfSeqOfBoolean (void)
{}

Xyz::SeqOfSeqOfBoolean::SeqOfSeqOfBoolean (
    ::CORBA::ULong length,
    Xyz::SeqOfBoolean * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        SeqOfBoolean,
        4
      >
    (length, buffer, release)
{}

Xyz::SeqOfSeqOfBoolean::SeqOfSeqOfBoolean (
    const SeqOfSeqOfBoolean &seq)
  : ::TAO::bounded_value_sequence<
        SeqOfBoolean,
        4
      > (seq)
{}

Xyz::SeqOfSeqOfBoolean::~SeqOfSeqOfBoolean (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFSEQOFSTRING_CS_)
#define _XYZ_SEQOFSEQOFSTRING_CS_

Xyz::SeqOfSeqOfString::SeqOfSeqOfString (void)
{}

Xyz::SeqOfSeqOfString::SeqOfSeqOfString (
    ::CORBA::ULong length,
    Xyz::SeqOfString * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        SeqOfString,
        4
      >
    (length, buffer, release)
{}

Xyz::SeqOfSeqOfString::SeqOfSeqOfString (
    const SeqOfSeqOfString &seq)
  : ::TAO::bounded_value_sequence<
        SeqOfString,
        4
      > (seq)
{}

Xyz::SeqOfSeqOfString::~SeqOfSeqOfString (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFSEQOFCHAR_CS_)
#define _XYZ_SEQOFSEQOFCHAR_CS_

Xyz::SeqOfSeqOfChar::SeqOfSeqOfChar (void)
{}

Xyz::SeqOfSeqOfChar::SeqOfSeqOfChar (
    ::CORBA::ULong length,
    Xyz::SeqOfChar * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        SeqOfChar,
        4
      >
    (length, buffer, release)
{}

Xyz::SeqOfSeqOfChar::SeqOfSeqOfChar (
    const SeqOfSeqOfChar &seq)
  : ::TAO::bounded_value_sequence<
        SeqOfChar,
        4
      > (seq)
{}

Xyz::SeqOfSeqOfChar::~SeqOfSeqOfChar (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFSEQOFOCTET_CS_)
#define _XYZ_SEQOFSEQOFOCTET_CS_

Xyz::SeqOfSeqOfOctet::SeqOfSeqOfOctet (void)
{}

Xyz::SeqOfSeqOfOctet::SeqOfSeqOfOctet (
    ::CORBA::ULong length,
    Xyz::SeqOfOctet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        SeqOfOctet,
        4
      >
    (length, buffer, release)
{}

Xyz::SeqOfSeqOfOctet::SeqOfSeqOfOctet (
    const SeqOfSeqOfOctet &seq)
  : ::TAO::bounded_value_sequence<
        SeqOfOctet,
        4
      > (seq)
{}

Xyz::SeqOfSeqOfOctet::~SeqOfSeqOfOctet (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFSEQOFLONG_CS_)
#define _XYZ_SEQOFSEQOFLONG_CS_

Xyz::SeqOfSeqOfLong::SeqOfSeqOfLong (void)
{}

Xyz::SeqOfSeqOfLong::SeqOfSeqOfLong (
    ::CORBA::ULong length,
    Xyz::SeqOfLong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        SeqOfLong,
        4
      >
    (length, buffer, release)
{}

Xyz::SeqOfSeqOfLong::SeqOfSeqOfLong (
    const SeqOfSeqOfLong &seq)
  : ::TAO::bounded_value_sequence<
        SeqOfLong,
        4
      > (seq)
{}

Xyz::SeqOfSeqOfLong::~SeqOfSeqOfLong (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFSEQOFANENUM_CS_)
#define _XYZ_SEQOFSEQOFANENUM_CS_

Xyz::SeqOfSeqOfAnEnum::SeqOfSeqOfAnEnum (void)
{}

Xyz::SeqOfSeqOfAnEnum::SeqOfSeqOfAnEnum (
    ::CORBA::ULong length,
    Xyz::SeqOfAnEnum * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        SeqOfAnEnum,
        4
      >
    (length, buffer, release)
{}

Xyz::SeqOfSeqOfAnEnum::SeqOfSeqOfAnEnum (
    const SeqOfSeqOfAnEnum &seq)
  : ::TAO::bounded_value_sequence<
        SeqOfAnEnum,
        4
      > (seq)
{}

Xyz::SeqOfSeqOfAnEnum::~SeqOfSeqOfAnEnum (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFASTRUCT_CS_)
#define _XYZ_SEQOFASTRUCT_CS_

Xyz::SeqOfAStruct::SeqOfAStruct (void)
{}

Xyz::SeqOfAStruct::SeqOfAStruct (
    ::CORBA::ULong length,
    Xyz::AStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        AStruct,
        2
      >
    (length, buffer, release)
{}

Xyz::SeqOfAStruct::SeqOfAStruct (
    const SeqOfAStruct &seq)
  : ::TAO::bounded_value_sequence<
        AStruct,
        2
      > (seq)
{}

Xyz::SeqOfAStruct::~SeqOfAStruct (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfAStruct_slice *
Xyz::ArrayOfAStruct_dup (const Xyz::ArrayOfAStruct_slice *_tao_src_array)
{
  Xyz::ArrayOfAStruct_slice *_tao_dup_array =
    Xyz::ArrayOfAStruct_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfAStruct_slice *> (0);
    }
  
  Xyz::ArrayOfAStruct_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfAStruct_slice *
Xyz::ArrayOfAStruct_alloc (void)
{
  Xyz::ArrayOfAStruct_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::AStruct[3], 0);
  return retval;
}

void
Xyz::ArrayOfAStruct_free (
    Xyz::ArrayOfAStruct_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfAStruct_copy (
    Xyz::ArrayOfAStruct_slice * _tao_to,
    const Xyz::ArrayOfAStruct_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

Xyz::AUnion::AUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = Xyz::bluex;
}

Xyz::AUnion::AUnion (const ::Xyz::AUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Xyz::redx:
    {
      this->u_.rv_ = ::CORBA::string_dup (u.u_.rv_);
    }
    break;
    case Xyz::greenx:
    {
      if (u.u_.gv_ == 0)
        {
          this->u_.gv_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.gv_,
              Xyz::AStruct (*u.u_.gv_)
            );
        }
    }
    break;
    default:
    {
      if (u.u_.bv_ == 0)
        {
          this->u_.bv_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.bv_,
              Xyz::SeqOfLong (*u.u_.bv_)
            );
        }
    }
    break;
  }
}

Xyz::AUnion::~AUnion (void)
{
  // Finalize.
  this->_reset ();
}

Xyz::AUnion &
Xyz::AUnion::operator= (const ::Xyz::AUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Xyz::redx:
    {
      this->u_.rv_ = ::CORBA::string_dup (u.u_.rv_);
    }
    break;
    case Xyz::greenx:
    {
      if (u.u_.gv_ == 0)
        {
          this->u_.gv_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.gv_,
              Xyz::AStruct (*u.u_.gv_),
              *this
            );
        }
    }
    break;
    default:
    {
      if (u.u_.bv_ == 0)
        {
          this->u_.bv_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.bv_,
              Xyz::SeqOfLong (*u.u_.bv_),
              *this
            );
        }
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Xyz::AUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case Xyz::redx:
      ::CORBA::string_free (this->u_.rv_);
      this->u_.rv_ = 0;
      
    break;
    
    case Xyz::greenx:
      delete this->u_.gv_;
      this->u_.gv_ = 0;
      
    break;
    
    default:
      delete this->u_.bv_;
      this->u_.bv_ = 0;
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

Xyz::BigUnion::BigUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

Xyz::BigUnion::BigUnion (const ::Xyz::BigUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.f1_ = u.u_.f1_;
    }
    break;
    case 2:
    {
      this->u_.f2_ = u.u_.f2_;
    }
    break;
    case 3:
    {
      this->u_.f3_ = u.u_.f3_;
    }
    break;
    case 4:
    {
      this->u_.f4_ = ::CORBA::string_dup (u.u_.f4_);
    }
    break;
    case 5:
    {
      this->u_.f5_ = u.u_.f5_;
    }
    break;
    case 6:
    {
      this->u_.f6_ = u.u_.f6_;
    }
    break;
    case 7:
    {
      this->u_.f7_ = u.u_.f7_;
    }
    break;
    case 8:
    {
      this->u_.f8_ = 
        u.u_.f8_;
    }
    break;
    case 10:
    {
      // Make a deep copy.
      this->u_.f10_ = 
        Xyz::ArrayOfBoolean_dup (u.u_.f10_);
    }
    break;
    case 11:
    {
      // Make a deep copy.
      this->u_.f11_ = 
        Xyz::ArrayOfString_dup (u.u_.f11_);
    }
    break;
    case 12:
    {
      // Make a deep copy.
      this->u_.f12_ = 
        Xyz::ArrayOfChar_dup (u.u_.f12_);
    }
    break;
    case 13:
    {
      // Make a deep copy.
      this->u_.f13_ = 
        Xyz::ArrayOfOctet_dup (u.u_.f13_);
    }
    break;
    case 14:
    {
      // Make a deep copy.
      this->u_.f14_ = 
        Xyz::ArrayOfLong_dup (u.u_.f14_);
    }
    break;
    case 15:
    {
      // Make a deep copy.
      this->u_.f15_ = 
        Xyz::ArrayOfAnEnum_dup (u.u_.f15_);
    }
    break;
    case 20:
    {
      if (u.u_.f20_ == 0)
        {
          this->u_.f20_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f20_,
              Xyz::SeqOfBoolean (*u.u_.f20_)
            );
        }
    }
    break;
    case 21:
    {
      if (u.u_.f21_ == 0)
        {
          this->u_.f21_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f21_,
              Xyz::SeqOfString (*u.u_.f21_)
            );
        }
    }
    break;
    case 22:
    {
      if (u.u_.f22_ == 0)
        {
          this->u_.f22_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f22_,
              Xyz::SeqOfChar (*u.u_.f22_)
            );
        }
    }
    break;
    case 23:
    {
      if (u.u_.f23_ == 0)
        {
          this->u_.f23_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f23_,
              Xyz::SeqOfOctet (*u.u_.f23_)
            );
        }
    }
    break;
    case 24:
    {
      if (u.u_.f24_ == 0)
        {
          this->u_.f24_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f24_,
              Xyz::SeqOfLong (*u.u_.f24_)
            );
        }
    }
    break;
    case 25:
    {
      if (u.u_.f25_ == 0)
        {
          this->u_.f25_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f25_,
              Xyz::SeqOfAnEnum (*u.u_.f25_)
            );
        }
    }
    break;
    case 30:
    {
      // Make a deep copy.
      this->u_.f30_ = 
        Xyz::ArrayOfSeqOfBoolean_dup (u.u_.f30_);
    }
    break;
    case 31:
    {
      // Make a deep copy.
      this->u_.f31_ = 
        Xyz::ArrayOfSeqOfString_dup (u.u_.f31_);
    }
    break;
    case 32:
    {
      // Make a deep copy.
      this->u_.f32_ = 
        Xyz::ArrayOfSeqOfChar_dup (u.u_.f32_);
    }
    break;
    case 33:
    {
      // Make a deep copy.
      this->u_.f33_ = 
        Xyz::ArrayOfSeqOfOctet_dup (u.u_.f33_);
    }
    break;
    case 34:
    {
      // Make a deep copy.
      this->u_.f34_ = 
        Xyz::ArrayOfSeqOfLong_dup (u.u_.f34_);
    }
    break;
    case 35:
    {
      // Make a deep copy.
      this->u_.f35_ = 
        Xyz::ArrayOfSeqOfAnEnum_dup (u.u_.f35_);
    }
    break;
    case 40:
    {
      if (u.u_.f40_ == 0)
        {
          this->u_.f40_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f40_,
              Xyz::SeqOfArrayOfBoolean (*u.u_.f40_)
            );
        }
    }
    break;
    case 41:
    {
      if (u.u_.f41_ == 0)
        {
          this->u_.f41_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f41_,
              Xyz::SeqOfArrayOfString (*u.u_.f41_)
            );
        }
    }
    break;
    case 42:
    {
      if (u.u_.f42_ == 0)
        {
          this->u_.f42_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f42_,
              Xyz::SeqOfArrayOfChar (*u.u_.f42_)
            );
        }
    }
    break;
    case 43:
    {
      if (u.u_.f43_ == 0)
        {
          this->u_.f43_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f43_,
              Xyz::SeqOfArrayOfOctet (*u.u_.f43_)
            );
        }
    }
    break;
    case 44:
    {
      if (u.u_.f44_ == 0)
        {
          this->u_.f44_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f44_,
              Xyz::SeqOfArrayOfLong (*u.u_.f44_)
            );
        }
    }
    break;
    case 45:
    {
      if (u.u_.f45_ == 0)
        {
          this->u_.f45_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f45_,
              Xyz::SeqOfArrayOfAnEnum (*u.u_.f45_)
            );
        }
    }
    break;
    case 50:
    {
      // Make a deep copy.
      this->u_.f50_ = 
        Xyz::ArrayOfArrayOfBoolean_dup (u.u_.f50_);
    }
    break;
    case 51:
    {
      // Make a deep copy.
      this->u_.f51_ = 
        Xyz::ArrayOfArrayOfString_dup (u.u_.f51_);
    }
    break;
    case 52:
    {
      // Make a deep copy.
      this->u_.f52_ = 
        Xyz::ArrayOfArrayOfChar_dup (u.u_.f52_);
    }
    break;
    case 53:
    {
      // Make a deep copy.
      this->u_.f53_ = 
        Xyz::ArrayOfArrayOfOctet_dup (u.u_.f53_);
    }
    break;
    case 54:
    {
      // Make a deep copy.
      this->u_.f54_ = 
        Xyz::ArrayOfArrayOfLong_dup (u.u_.f54_);
    }
    break;
    case 55:
    {
      // Make a deep copy.
      this->u_.f55_ = 
        Xyz::ArrayOfArrayOfAnEnum_dup (u.u_.f55_);
    }
    break;
    case 60:
    {
      if (u.u_.f60_ == 0)
        {
          this->u_.f60_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f60_,
              Xyz::SeqOfSeqOfBoolean (*u.u_.f60_)
            );
        }
    }
    break;
    case 61:
    {
      if (u.u_.f61_ == 0)
        {
          this->u_.f61_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f61_,
              Xyz::SeqOfSeqOfString (*u.u_.f61_)
            );
        }
    }
    break;
    case 62:
    {
      if (u.u_.f62_ == 0)
        {
          this->u_.f62_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f62_,
              Xyz::SeqOfSeqOfChar (*u.u_.f62_)
            );
        }
    }
    break;
    case 63:
    {
      if (u.u_.f63_ == 0)
        {
          this->u_.f63_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f63_,
              Xyz::SeqOfSeqOfOctet (*u.u_.f63_)
            );
        }
    }
    break;
    case 64:
    {
      if (u.u_.f64_ == 0)
        {
          this->u_.f64_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f64_,
              Xyz::SeqOfSeqOfLong (*u.u_.f64_)
            );
        }
    }
    break;
    case 65:
    {
      if (u.u_.f65_ == 0)
        {
          this->u_.f65_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f65_,
              Xyz::SeqOfSeqOfAnEnum (*u.u_.f65_)
            );
        }
    }
    break;
    case 66:
    {
      this->u_.f6a_ = u.u_.f6a_;
    }
    break;
    case 90:
    {
      if (u.u_.f90_ == 0)
        {
          this->u_.f90_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f90_,
              Xyz::AStruct (*u.u_.f90_)
            );
        }
    }
    break;
    case 91:
    {
      if (u.u_.f91_ == 0)
        {
          this->u_.f91_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.f91_,
              Xyz::SeqOfAStruct (*u.u_.f91_)
            );
        }
    }
    break;
    case 92:
    {
      // Make a deep copy.
      this->u_.v92_ = 
        Xyz::ArrayOfAStruct_dup (u.u_.v92_);
    }
    break;
    case 93:
    {
      this->u_.ld_ = u.u_.ld_;
    }
    break;
    default:
    break;
  }
}

Xyz::BigUnion::~BigUnion (void)
{
  // Finalize.
  this->_reset ();
}

Xyz::BigUnion &
Xyz::BigUnion::operator= (const ::Xyz::BigUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.f1_ = u.u_.f1_;
    }
    break;
    case 2:
    {
      this->u_.f2_ = u.u_.f2_;
    }
    break;
    case 3:
    {
      this->u_.f3_ = u.u_.f3_;
    }
    break;
    case 4:
    {
      this->u_.f4_ = ::CORBA::string_dup (u.u_.f4_);
    }
    break;
    case 5:
    {
      this->u_.f5_ = u.u_.f5_;
    }
    break;
    case 6:
    {
      this->u_.f6_ = u.u_.f6_;
    }
    break;
    case 7:
    {
      this->u_.f7_ = u.u_.f7_;
    }
    break;
    case 8:
    {
      this->u_.f8_ = 
        u.u_.f8_;
    }
    break;
    case 10:
    {
      // Make a deep copy.
      this->u_.f10_ = 
        Xyz::ArrayOfBoolean_dup (u.u_.f10_);
    }
    break;
    case 11:
    {
      // Make a deep copy.
      this->u_.f11_ = 
        Xyz::ArrayOfString_dup (u.u_.f11_);
    }
    break;
    case 12:
    {
      // Make a deep copy.
      this->u_.f12_ = 
        Xyz::ArrayOfChar_dup (u.u_.f12_);
    }
    break;
    case 13:
    {
      // Make a deep copy.
      this->u_.f13_ = 
        Xyz::ArrayOfOctet_dup (u.u_.f13_);
    }
    break;
    case 14:
    {
      // Make a deep copy.
      this->u_.f14_ = 
        Xyz::ArrayOfLong_dup (u.u_.f14_);
    }
    break;
    case 15:
    {
      // Make a deep copy.
      this->u_.f15_ = 
        Xyz::ArrayOfAnEnum_dup (u.u_.f15_);
    }
    break;
    case 20:
    {
      if (u.u_.f20_ == 0)
        {
          this->u_.f20_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f20_,
              Xyz::SeqOfBoolean (*u.u_.f20_),
              *this
            );
        }
    }
    break;
    case 21:
    {
      if (u.u_.f21_ == 0)
        {
          this->u_.f21_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f21_,
              Xyz::SeqOfString (*u.u_.f21_),
              *this
            );
        }
    }
    break;
    case 22:
    {
      if (u.u_.f22_ == 0)
        {
          this->u_.f22_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f22_,
              Xyz::SeqOfChar (*u.u_.f22_),
              *this
            );
        }
    }
    break;
    case 23:
    {
      if (u.u_.f23_ == 0)
        {
          this->u_.f23_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f23_,
              Xyz::SeqOfOctet (*u.u_.f23_),
              *this
            );
        }
    }
    break;
    case 24:
    {
      if (u.u_.f24_ == 0)
        {
          this->u_.f24_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f24_,
              Xyz::SeqOfLong (*u.u_.f24_),
              *this
            );
        }
    }
    break;
    case 25:
    {
      if (u.u_.f25_ == 0)
        {
          this->u_.f25_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f25_,
              Xyz::SeqOfAnEnum (*u.u_.f25_),
              *this
            );
        }
    }
    break;
    case 30:
    {
      // Make a deep copy.
      this->u_.f30_ = 
        Xyz::ArrayOfSeqOfBoolean_dup (u.u_.f30_);
    }
    break;
    case 31:
    {
      // Make a deep copy.
      this->u_.f31_ = 
        Xyz::ArrayOfSeqOfString_dup (u.u_.f31_);
    }
    break;
    case 32:
    {
      // Make a deep copy.
      this->u_.f32_ = 
        Xyz::ArrayOfSeqOfChar_dup (u.u_.f32_);
    }
    break;
    case 33:
    {
      // Make a deep copy.
      this->u_.f33_ = 
        Xyz::ArrayOfSeqOfOctet_dup (u.u_.f33_);
    }
    break;
    case 34:
    {
      // Make a deep copy.
      this->u_.f34_ = 
        Xyz::ArrayOfSeqOfLong_dup (u.u_.f34_);
    }
    break;
    case 35:
    {
      // Make a deep copy.
      this->u_.f35_ = 
        Xyz::ArrayOfSeqOfAnEnum_dup (u.u_.f35_);
    }
    break;
    case 40:
    {
      if (u.u_.f40_ == 0)
        {
          this->u_.f40_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f40_,
              Xyz::SeqOfArrayOfBoolean (*u.u_.f40_),
              *this
            );
        }
    }
    break;
    case 41:
    {
      if (u.u_.f41_ == 0)
        {
          this->u_.f41_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f41_,
              Xyz::SeqOfArrayOfString (*u.u_.f41_),
              *this
            );
        }
    }
    break;
    case 42:
    {
      if (u.u_.f42_ == 0)
        {
          this->u_.f42_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f42_,
              Xyz::SeqOfArrayOfChar (*u.u_.f42_),
              *this
            );
        }
    }
    break;
    case 43:
    {
      if (u.u_.f43_ == 0)
        {
          this->u_.f43_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f43_,
              Xyz::SeqOfArrayOfOctet (*u.u_.f43_),
              *this
            );
        }
    }
    break;
    case 44:
    {
      if (u.u_.f44_ == 0)
        {
          this->u_.f44_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f44_,
              Xyz::SeqOfArrayOfLong (*u.u_.f44_),
              *this
            );
        }
    }
    break;
    case 45:
    {
      if (u.u_.f45_ == 0)
        {
          this->u_.f45_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f45_,
              Xyz::SeqOfArrayOfAnEnum (*u.u_.f45_),
              *this
            );
        }
    }
    break;
    case 50:
    {
      // Make a deep copy.
      this->u_.f50_ = 
        Xyz::ArrayOfArrayOfBoolean_dup (u.u_.f50_);
    }
    break;
    case 51:
    {
      // Make a deep copy.
      this->u_.f51_ = 
        Xyz::ArrayOfArrayOfString_dup (u.u_.f51_);
    }
    break;
    case 52:
    {
      // Make a deep copy.
      this->u_.f52_ = 
        Xyz::ArrayOfArrayOfChar_dup (u.u_.f52_);
    }
    break;
    case 53:
    {
      // Make a deep copy.
      this->u_.f53_ = 
        Xyz::ArrayOfArrayOfOctet_dup (u.u_.f53_);
    }
    break;
    case 54:
    {
      // Make a deep copy.
      this->u_.f54_ = 
        Xyz::ArrayOfArrayOfLong_dup (u.u_.f54_);
    }
    break;
    case 55:
    {
      // Make a deep copy.
      this->u_.f55_ = 
        Xyz::ArrayOfArrayOfAnEnum_dup (u.u_.f55_);
    }
    break;
    case 60:
    {
      if (u.u_.f60_ == 0)
        {
          this->u_.f60_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f60_,
              Xyz::SeqOfSeqOfBoolean (*u.u_.f60_),
              *this
            );
        }
    }
    break;
    case 61:
    {
      if (u.u_.f61_ == 0)
        {
          this->u_.f61_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f61_,
              Xyz::SeqOfSeqOfString (*u.u_.f61_),
              *this
            );
        }
    }
    break;
    case 62:
    {
      if (u.u_.f62_ == 0)
        {
          this->u_.f62_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f62_,
              Xyz::SeqOfSeqOfChar (*u.u_.f62_),
              *this
            );
        }
    }
    break;
    case 63:
    {
      if (u.u_.f63_ == 0)
        {
          this->u_.f63_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f63_,
              Xyz::SeqOfSeqOfOctet (*u.u_.f63_),
              *this
            );
        }
    }
    break;
    case 64:
    {
      if (u.u_.f64_ == 0)
        {
          this->u_.f64_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f64_,
              Xyz::SeqOfSeqOfLong (*u.u_.f64_),
              *this
            );
        }
    }
    break;
    case 65:
    {
      if (u.u_.f65_ == 0)
        {
          this->u_.f65_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f65_,
              Xyz::SeqOfSeqOfAnEnum (*u.u_.f65_),
              *this
            );
        }
    }
    break;
    case 66:
    {
      this->u_.f6a_ = u.u_.f6a_;
    }
    break;
    case 90:
    {
      if (u.u_.f90_ == 0)
        {
          this->u_.f90_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f90_,
              Xyz::AStruct (*u.u_.f90_),
              *this
            );
        }
    }
    break;
    case 91:
    {
      if (u.u_.f91_ == 0)
        {
          this->u_.f91_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.f91_,
              Xyz::SeqOfAStruct (*u.u_.f91_),
              *this
            );
        }
    }
    break;
    case 92:
    {
      // Make a deep copy.
      this->u_.v92_ = 
        Xyz::ArrayOfAStruct_dup (u.u_.v92_);
    }
    break;
    case 93:
    {
      this->u_.ld_ = u.u_.ld_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Xyz::BigUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    case 3:
      
    break;
    
    case 4:
      ::CORBA::string_free (this->u_.f4_);
      this->u_.f4_ = 0;
      
    break;
    
    case 5:
      
    break;
    
    case 6:
      
    break;
    
    case 7:
      
    break;
    
    case 8:
      
    break;
    
    case 10:
      Xyz::ArrayOfBoolean_free (this->u_.f10_);
      this->u_.f10_ = 0;
      
    break;
    
    case 11:
      Xyz::ArrayOfString_free (this->u_.f11_);
      this->u_.f11_ = 0;
      
    break;
    
    case 12:
      Xyz::ArrayOfChar_free (this->u_.f12_);
      this->u_.f12_ = 0;
      
    break;
    
    case 13:
      Xyz::ArrayOfOctet_free (this->u_.f13_);
      this->u_.f13_ = 0;
      
    break;
    
    case 14:
      Xyz::ArrayOfLong_free (this->u_.f14_);
      this->u_.f14_ = 0;
      
    break;
    
    case 15:
      Xyz::ArrayOfAnEnum_free (this->u_.f15_);
      this->u_.f15_ = 0;
      
    break;
    
    case 20:
      delete this->u_.f20_;
      this->u_.f20_ = 0;
      
    break;
    
    case 21:
      delete this->u_.f21_;
      this->u_.f21_ = 0;
      
    break;
    
    case 22:
      delete this->u_.f22_;
      this->u_.f22_ = 0;
      
    break;
    
    case 23:
      delete this->u_.f23_;
      this->u_.f23_ = 0;
      
    break;
    
    case 24:
      delete this->u_.f24_;
      this->u_.f24_ = 0;
      
    break;
    
    case 25:
      delete this->u_.f25_;
      this->u_.f25_ = 0;
      
    break;
    
    case 30:
      Xyz::ArrayOfSeqOfBoolean_free (this->u_.f30_);
      this->u_.f30_ = 0;
      
    break;
    
    case 31:
      Xyz::ArrayOfSeqOfString_free (this->u_.f31_);
      this->u_.f31_ = 0;
      
    break;
    
    case 32:
      Xyz::ArrayOfSeqOfChar_free (this->u_.f32_);
      this->u_.f32_ = 0;
      
    break;
    
    case 33:
      Xyz::ArrayOfSeqOfOctet_free (this->u_.f33_);
      this->u_.f33_ = 0;
      
    break;
    
    case 34:
      Xyz::ArrayOfSeqOfLong_free (this->u_.f34_);
      this->u_.f34_ = 0;
      
    break;
    
    case 35:
      Xyz::ArrayOfSeqOfAnEnum_free (this->u_.f35_);
      this->u_.f35_ = 0;
      
    break;
    
    case 40:
      delete this->u_.f40_;
      this->u_.f40_ = 0;
      
    break;
    
    case 41:
      delete this->u_.f41_;
      this->u_.f41_ = 0;
      
    break;
    
    case 42:
      delete this->u_.f42_;
      this->u_.f42_ = 0;
      
    break;
    
    case 43:
      delete this->u_.f43_;
      this->u_.f43_ = 0;
      
    break;
    
    case 44:
      delete this->u_.f44_;
      this->u_.f44_ = 0;
      
    break;
    
    case 45:
      delete this->u_.f45_;
      this->u_.f45_ = 0;
      
    break;
    
    case 50:
      Xyz::ArrayOfArrayOfBoolean_free (this->u_.f50_);
      this->u_.f50_ = 0;
      
    break;
    
    case 51:
      Xyz::ArrayOfArrayOfString_free (this->u_.f51_);
      this->u_.f51_ = 0;
      
    break;
    
    case 52:
      Xyz::ArrayOfArrayOfChar_free (this->u_.f52_);
      this->u_.f52_ = 0;
      
    break;
    
    case 53:
      Xyz::ArrayOfArrayOfOctet_free (this->u_.f53_);
      this->u_.f53_ = 0;
      
    break;
    
    case 54:
      Xyz::ArrayOfArrayOfLong_free (this->u_.f54_);
      this->u_.f54_ = 0;
      
    break;
    
    case 55:
      Xyz::ArrayOfArrayOfAnEnum_free (this->u_.f55_);
      this->u_.f55_ = 0;
      
    break;
    
    case 60:
      delete this->u_.f60_;
      this->u_.f60_ = 0;
      
    break;
    
    case 61:
      delete this->u_.f61_;
      this->u_.f61_ = 0;
      
    break;
    
    case 62:
      delete this->u_.f62_;
      this->u_.f62_ = 0;
      
    break;
    
    case 63:
      delete this->u_.f63_;
      this->u_.f63_ = 0;
      
    break;
    
    case 64:
      delete this->u_.f64_;
      this->u_.f64_ = 0;
      
    break;
    
    case 65:
      delete this->u_.f65_;
      this->u_.f65_ = 0;
      
    break;
    
    case 66:
      
    break;
    
    case 90:
      delete this->u_.f90_;
      this->u_.f90_ = 0;
      
    break;
    
    case 91:
      delete this->u_.f91_;
      this->u_.f91_ = 0;
      
    break;
    
    case 92:
      Xyz::ArrayOfAStruct_free (this->u_.v92_);
      this->u_.v92_ = 0;
      
    break;
    
    case 93:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_SEQOFAUNION_CS_)
#define _XYZ_SEQOFAUNION_CS_

Xyz::SeqOfAUnion::SeqOfAUnion (void)
{}

Xyz::SeqOfAUnion::SeqOfAUnion (
    ::CORBA::ULong length,
    Xyz::AUnion * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        AUnion,
        3
      >
    (length, buffer, release)
{}

Xyz::SeqOfAUnion::SeqOfAUnion (
    const SeqOfAUnion &seq)
  : ::TAO::bounded_value_sequence<
        AUnion,
        3
      > (seq)
{}

Xyz::SeqOfAUnion::~SeqOfAUnion (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_ASTRUCTSEQ_CS_)
#define _XYZ_ASTRUCTSEQ_CS_

Xyz::AStructSeq::AStructSeq (void)
{}

Xyz::AStructSeq::AStructSeq (
    ::CORBA::ULong length,
    Xyz::AStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::bounded_value_sequence<
        AStruct,
        3
      >
    (length, buffer, release)
{}

Xyz::AStructSeq::AStructSeq (
    const AStructSeq &seq)
  : ::TAO::bounded_value_sequence<
        AStruct,
        3
      > (seq)
{}

Xyz::AStructSeq::~AStructSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::ArrayOfAStructSeq_slice *
Xyz::ArrayOfAStructSeq_dup (const Xyz::ArrayOfAStructSeq_slice *_tao_src_array)
{
  Xyz::ArrayOfAStructSeq_slice *_tao_dup_array =
    Xyz::ArrayOfAStructSeq_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::ArrayOfAStructSeq_slice *> (0);
    }
  
  Xyz::ArrayOfAStructSeq_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::ArrayOfAStructSeq_slice *
Xyz::ArrayOfAStructSeq_alloc (void)
{
  Xyz::ArrayOfAStructSeq_slice *retval = 0;
  ACE_NEW_RETURN (retval, Xyz::AStructSeq[3], 0);
  return retval;
}

void
Xyz::ArrayOfAStructSeq_free (
    Xyz::ArrayOfAStructSeq_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::ArrayOfAStructSeq_copy (
    Xyz::ArrayOfAStructSeq_slice * _tao_to,
    const Xyz::ArrayOfAStructSeq_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_XYZ_BIGUNIONSEQ_CS_)
#define _XYZ_BIGUNIONSEQ_CS_

Xyz::BigUnionSeq::BigUnionSeq (void)
{}

Xyz::BigUnionSeq::BigUnionSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        BigUnion
      > (max)
{}

Xyz::BigUnionSeq::BigUnionSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Xyz::BigUnion * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        BigUnion
      >
    (max, length, buffer, release)
{}

Xyz::BigUnionSeq::BigUnionSeq (
    const BigUnionSeq &seq)
  : ::TAO::unbounded_value_sequence<
        BigUnion
      > (seq)
{}

Xyz::BigUnionSeq::~BigUnionSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Xyz::OctetArray_slice *
Xyz::OctetArray_dup (const Xyz::OctetArray_slice *_tao_src_array)
{
  Xyz::OctetArray_slice *_tao_dup_array =
    Xyz::OctetArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Xyz::OctetArray_slice *> (0);
    }
  
  Xyz::OctetArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Xyz::OctetArray_slice *
Xyz::OctetArray_alloc (void)
{
  Xyz::OctetArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Octet[3], 0);
  return retval;
}

void
Xyz::OctetArray_free (
    Xyz::OctetArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Xyz::OctetArray_copy (
    Xyz::OctetArray_slice * _tao_to,
    const Xyz::OctetArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfArrayOfBoolean_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfArrayOfBoolean_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfArrayOfBoolean &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfArrayOfBoolean &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfArrayOfBoolean_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfArrayOfString_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfArrayOfString_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfArrayOfString &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfArrayOfString &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfArrayOfString_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfArrayOfChar_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfArrayOfChar_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfArrayOfChar &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfArrayOfChar &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfArrayOfChar_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfArrayOfOctet_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfArrayOfOctet_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfArrayOfOctet &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfArrayOfOctet &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfArrayOfOctet_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfArrayOfLong_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfArrayOfLong_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfArrayOfLong &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfArrayOfLong &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfArrayOfLong_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfArrayOfAnEnum_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfArrayOfAnEnum_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfArrayOfAnEnum &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfArrayOfAnEnum &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfArrayOfAnEnum_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfBoolean_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfBoolean_var tmp_var (Xyz::ArrayOfBoolean_dup (_tao_array[i0]));
      Xyz::ArrayOfBoolean_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfBoolean_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfBoolean_forany tmp (Xyz::ArrayOfBoolean_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfBoolean_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfBoolean_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfString_var tmp_var (Xyz::ArrayOfString_dup (_tao_array[i0]));
      Xyz::ArrayOfString_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfString_forany tmp (Xyz::ArrayOfString_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfString_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfString_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfChar_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfChar_var tmp_var (Xyz::ArrayOfChar_dup (_tao_array[i0]));
      Xyz::ArrayOfChar_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfChar_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfChar_forany tmp (Xyz::ArrayOfChar_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfChar_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfChar_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfOctet_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfOctet_var tmp_var (Xyz::ArrayOfOctet_dup (_tao_array[i0]));
      Xyz::ArrayOfOctet_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfOctet_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfOctet_forany tmp (Xyz::ArrayOfOctet_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfOctet_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfOctet_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfLong_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfLong_var tmp_var (Xyz::ArrayOfLong_dup (_tao_array[i0]));
      Xyz::ArrayOfLong_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfLong_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfLong_forany tmp (Xyz::ArrayOfLong_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfLong_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfLong_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfArrayOfAnEnum_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfAnEnum_var tmp_var (Xyz::ArrayOfAnEnum_dup (_tao_array[i0]));
      Xyz::ArrayOfAnEnum_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfArrayOfAnEnum_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 7 && _tao_marshal_flag; ++i0)
    {
      Xyz::ArrayOfAnEnum_forany tmp (Xyz::ArrayOfAnEnum_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      Xyz::ArrayOfAnEnum_copy (_tao_array[i0], tmp.in ());
      Xyz::ArrayOfAnEnum_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfBoolean &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfBoolean_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfBoolean &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfBoolean_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfString &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfString_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfString_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfString &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfString_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfString_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfChar &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfChar_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfChar &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfChar_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfOctet &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfOctet_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfOctet &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfOctet_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfLong &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfLong_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfLong &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfLong_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfArrayOfArrayOfAnEnum &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfAnEnum_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm << _tao_aggregate_f);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfArrayOfArrayOfAnEnum &_tao_aggregate)
{
  Xyz::ArrayOfArrayOfAnEnum_forany _tao_aggregate_f
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f
        )
    );
  return
    (strm >> _tao_aggregate_f);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfSeqOfBoolean_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfSeqOfBoolean_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfSeqOfBoolean &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfSeqOfBoolean &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfSeqOfBoolean_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfSeqOfString_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfSeqOfString_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfSeqOfString &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfSeqOfString &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfSeqOfString_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfSeqOfChar_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfSeqOfChar_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfSeqOfChar &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfSeqOfChar &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfSeqOfChar_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfSeqOfOctet_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfSeqOfOctet_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfSeqOfOctet &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfSeqOfOctet &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfSeqOfOctet_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfSeqOfLong_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfSeqOfLong_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfSeqOfLong &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfSeqOfLong &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfSeqOfLong_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfSeqOfAnEnum_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfSeqOfAnEnum_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfSeqOfAnEnum &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfSeqOfAnEnum &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfSeqOfAnEnum_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructOfSeqOfSeqOfLong &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.field);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructOfSeqOfSeqOfLong &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.field);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AStruct &_tao_aggregate)
{
  Xyz::ArrayOfBoolean_forany _tao_aggregate_f10
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f10
        )
    );
  Xyz::ArrayOfString_forany _tao_aggregate_f11
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfString_slice*> (
      #endif
          _tao_aggregate.f11
        )
    );
  Xyz::ArrayOfChar_forany _tao_aggregate_f12
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f12
        )
    );
  Xyz::ArrayOfOctet_forany _tao_aggregate_f13
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f13
        )
    );
  Xyz::ArrayOfLong_forany _tao_aggregate_f14
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f14
        )
    );
  Xyz::ArrayOfAnEnum_forany _tao_aggregate_f15
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f15
        )
    );
  Xyz::ArrayOfSeqOfBoolean_forany _tao_aggregate_f30
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfBoolean_slice*> (
      #endif
          _tao_aggregate.f30
        )
    );
  Xyz::ArrayOfSeqOfString_forany _tao_aggregate_f31
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfString_slice*> (
      #endif
          _tao_aggregate.f31
        )
    );
  Xyz::ArrayOfSeqOfChar_forany _tao_aggregate_f32
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfChar_slice*> (
      #endif
          _tao_aggregate.f32
        )
    );
  Xyz::ArrayOfSeqOfOctet_forany _tao_aggregate_f33
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfOctet_slice*> (
      #endif
          _tao_aggregate.f33
        )
    );
  Xyz::ArrayOfSeqOfLong_forany _tao_aggregate_f34
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfLong_slice*> (
      #endif
          _tao_aggregate.f34
        )
    );
  Xyz::ArrayOfSeqOfAnEnum_forany _tao_aggregate_f35
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f35
        )
    );
  Xyz::ArrayOfArrayOfBoolean_forany _tao_aggregate_f50
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f50
        )
    );
  Xyz::ArrayOfArrayOfString_forany _tao_aggregate_f51
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfString_slice*> (
      #endif
          _tao_aggregate.f51
        )
    );
  Xyz::ArrayOfArrayOfChar_forany _tao_aggregate_f52
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f52
        )
    );
  Xyz::ArrayOfArrayOfOctet_forany _tao_aggregate_f53
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f53
        )
    );
  Xyz::ArrayOfArrayOfLong_forany _tao_aggregate_f54
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f54
        )
    );
  Xyz::ArrayOfArrayOfAnEnum_forany _tao_aggregate_f55
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f55
        )
    );
  return
    (strm << _tao_aggregate.f1) &&
    (strm << _tao_aggregate.f2) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.f3)) &&
    (strm << ACE_OutputCDR::from_string (_tao_aggregate.f4.in (), 7)) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.f5)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.f6)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.f6a)) &&
    (strm << _tao_aggregate.f7) &&
    (strm << _tao_aggregate.f8) &&
    (strm << _tao_aggregate_f10) &&
    (strm << _tao_aggregate_f11) &&
    (strm << _tao_aggregate_f12) &&
    (strm << _tao_aggregate_f13) &&
    (strm << _tao_aggregate_f14) &&
    (strm << _tao_aggregate_f15) &&
    (strm << _tao_aggregate.f20) &&
    (strm << _tao_aggregate.f21) &&
    (strm << _tao_aggregate.f22) &&
    (strm << _tao_aggregate.f23) &&
    (strm << _tao_aggregate.f24) &&
    (strm << _tao_aggregate.f25) &&
    (strm << _tao_aggregate_f30) &&
    (strm << _tao_aggregate_f31) &&
    (strm << _tao_aggregate_f32) &&
    (strm << _tao_aggregate_f33) &&
    (strm << _tao_aggregate_f34) &&
    (strm << _tao_aggregate_f35) &&
    (strm << _tao_aggregate.f40) &&
    (strm << _tao_aggregate.f41) &&
    (strm << _tao_aggregate.f42) &&
    (strm << _tao_aggregate.f43) &&
    (strm << _tao_aggregate.f44) &&
    (strm << _tao_aggregate.f45) &&
    (strm << _tao_aggregate_f50) &&
    (strm << _tao_aggregate_f51) &&
    (strm << _tao_aggregate_f52) &&
    (strm << _tao_aggregate_f53) &&
    (strm << _tao_aggregate_f54) &&
    (strm << _tao_aggregate_f55) &&
    (strm << _tao_aggregate.f60) &&
    (strm << _tao_aggregate.f61) &&
    (strm << _tao_aggregate.f62) &&
    (strm << _tao_aggregate.f63) &&
    (strm << _tao_aggregate.f64) &&
    (strm << _tao_aggregate.f65);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AStruct &_tao_aggregate)
{
  Xyz::ArrayOfBoolean_forany _tao_aggregate_f10
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f10
        )
    );
  Xyz::ArrayOfString_forany _tao_aggregate_f11
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfString_slice*> (
      #endif
          _tao_aggregate.f11
        )
    );
  Xyz::ArrayOfChar_forany _tao_aggregate_f12
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f12
        )
    );
  Xyz::ArrayOfOctet_forany _tao_aggregate_f13
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f13
        )
    );
  Xyz::ArrayOfLong_forany _tao_aggregate_f14
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f14
        )
    );
  Xyz::ArrayOfAnEnum_forany _tao_aggregate_f15
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f15
        )
    );
  Xyz::ArrayOfSeqOfBoolean_forany _tao_aggregate_f30
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfBoolean_slice*> (
      #endif
          _tao_aggregate.f30
        )
    );
  Xyz::ArrayOfSeqOfString_forany _tao_aggregate_f31
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfString_slice*> (
      #endif
          _tao_aggregate.f31
        )
    );
  Xyz::ArrayOfSeqOfChar_forany _tao_aggregate_f32
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfChar_slice*> (
      #endif
          _tao_aggregate.f32
        )
    );
  Xyz::ArrayOfSeqOfOctet_forany _tao_aggregate_f33
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfOctet_slice*> (
      #endif
          _tao_aggregate.f33
        )
    );
  Xyz::ArrayOfSeqOfLong_forany _tao_aggregate_f34
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfLong_slice*> (
      #endif
          _tao_aggregate.f34
        )
    );
  Xyz::ArrayOfSeqOfAnEnum_forany _tao_aggregate_f35
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfSeqOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfSeqOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f35
        )
    );
  Xyz::ArrayOfArrayOfBoolean_forany _tao_aggregate_f50
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfBoolean_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfBoolean_slice*> (
      #endif
          _tao_aggregate.f50
        )
    );
  Xyz::ArrayOfArrayOfString_forany _tao_aggregate_f51
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfString_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfString_slice*> (
      #endif
          _tao_aggregate.f51
        )
    );
  Xyz::ArrayOfArrayOfChar_forany _tao_aggregate_f52
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfChar_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfChar_slice*> (
      #endif
          _tao_aggregate.f52
        )
    );
  Xyz::ArrayOfArrayOfOctet_forany _tao_aggregate_f53
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfOctet_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfOctet_slice*> (
      #endif
          _tao_aggregate.f53
        )
    );
  Xyz::ArrayOfArrayOfLong_forany _tao_aggregate_f54
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfLong_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfLong_slice*> (
      #endif
          _tao_aggregate.f54
        )
    );
  Xyz::ArrayOfArrayOfAnEnum_forany _tao_aggregate_f55
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfArrayOfAnEnum_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfArrayOfAnEnum_slice*> (
      #endif
          _tao_aggregate.f55
        )
    );
  return
    (strm >> _tao_aggregate.f1) &&
    (strm >> _tao_aggregate.f2) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.f3)) &&
    (strm >> ACE_InputCDR::to_string (_tao_aggregate.f4.out (), 7)) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.f5)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.f6)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.f6a)) &&
    (strm >> _tao_aggregate.f7) &&
    (strm >> _tao_aggregate.f8) &&
    (strm >> _tao_aggregate_f10) &&
    (strm >> _tao_aggregate_f11) &&
    (strm >> _tao_aggregate_f12) &&
    (strm >> _tao_aggregate_f13) &&
    (strm >> _tao_aggregate_f14) &&
    (strm >> _tao_aggregate_f15) &&
    (strm >> _tao_aggregate.f20) &&
    (strm >> _tao_aggregate.f21) &&
    (strm >> _tao_aggregate.f22) &&
    (strm >> _tao_aggregate.f23) &&
    (strm >> _tao_aggregate.f24) &&
    (strm >> _tao_aggregate.f25) &&
    (strm >> _tao_aggregate_f30) &&
    (strm >> _tao_aggregate_f31) &&
    (strm >> _tao_aggregate_f32) &&
    (strm >> _tao_aggregate_f33) &&
    (strm >> _tao_aggregate_f34) &&
    (strm >> _tao_aggregate_f35) &&
    (strm >> _tao_aggregate.f40) &&
    (strm >> _tao_aggregate.f41) &&
    (strm >> _tao_aggregate.f42) &&
    (strm >> _tao_aggregate.f43) &&
    (strm >> _tao_aggregate.f44) &&
    (strm >> _tao_aggregate.f45) &&
    (strm >> _tao_aggregate_f50) &&
    (strm >> _tao_aggregate_f51) &&
    (strm >> _tao_aggregate_f52) &&
    (strm >> _tao_aggregate_f53) &&
    (strm >> _tao_aggregate_f54) &&
    (strm >> _tao_aggregate_f55) &&
    (strm >> _tao_aggregate.f60) &&
    (strm >> _tao_aggregate.f61) &&
    (strm >> _tao_aggregate.f62) &&
    (strm >> _tao_aggregate.f63) &&
    (strm >> _tao_aggregate.f64) &&
    (strm >> _tao_aggregate.f65);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfAStruct_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfAStruct_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfAStruct &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfAStruct &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfAStruct_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfAStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfAStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructContainingArrayOfAStruct &_tao_aggregate)
{
  Xyz::ArrayOfAStruct_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm << _tao_aggregate_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructContainingArrayOfAStruct &_tao_aggregate)
{
  Xyz::ArrayOfAStruct_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm >> _tao_aggregate_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Xyz::redx:
      {
        result = strm << _tao_union.rv ();
      }
      break;
    case Xyz::greenx:
      {
        result = strm << _tao_union.gv ();
      }
      break;
    default:
      {
        result = strm << _tao_union.bv ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AUnion &_tao_union
  )
{
  Xyz::AnEnum _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Xyz::redx:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.rv (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Xyz::greenx:
      {
        Xyz::AStruct _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.gv (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        Xyz::SeqOfLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.bv (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::BigUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.f1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.f2 ();
      }
      break;
    case 3:
      {
        result = strm << ::ACE_OutputCDR::from_boolean (_tao_union.f3 ());
      }
      break;
    case 4:
      {
        result = strm << ACE_OutputCDR::from_string (_tao_union.f4 (), 7);
      }
      break;
    case 5:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.f5 ());
      }
      break;
    case 6:
      {
        result = strm << ::ACE_OutputCDR::from_octet (_tao_union.f6 ());
      }
      break;
    case 7:
      {
        result = strm << _tao_union.f7 ();
      }
      break;
    case 8:
      {
        result = strm << _tao_union.f8 ();
      }
      break;
    case 10:
      {
        Xyz::ArrayOfBoolean_forany _tao_union_tmp (
            _tao_union.f10 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 11:
      {
        Xyz::ArrayOfString_forany _tao_union_tmp (
            _tao_union.f11 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 12:
      {
        Xyz::ArrayOfChar_forany _tao_union_tmp (
            _tao_union.f12 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 13:
      {
        Xyz::ArrayOfOctet_forany _tao_union_tmp (
            _tao_union.f13 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 14:
      {
        Xyz::ArrayOfLong_forany _tao_union_tmp (
            _tao_union.f14 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 15:
      {
        Xyz::ArrayOfAnEnum_forany _tao_union_tmp (
            _tao_union.f15 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 20:
      {
        result = strm << _tao_union.f20 ();
      }
      break;
    case 21:
      {
        result = strm << _tao_union.f21 ();
      }
      break;
    case 22:
      {
        result = strm << _tao_union.f22 ();
      }
      break;
    case 23:
      {
        result = strm << _tao_union.f23 ();
      }
      break;
    case 24:
      {
        result = strm << _tao_union.f24 ();
      }
      break;
    case 25:
      {
        result = strm << _tao_union.f25 ();
      }
      break;
    case 30:
      {
        Xyz::ArrayOfSeqOfBoolean_forany _tao_union_tmp (
            _tao_union.f30 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 31:
      {
        Xyz::ArrayOfSeqOfString_forany _tao_union_tmp (
            _tao_union.f31 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 32:
      {
        Xyz::ArrayOfSeqOfChar_forany _tao_union_tmp (
            _tao_union.f32 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 33:
      {
        Xyz::ArrayOfSeqOfOctet_forany _tao_union_tmp (
            _tao_union.f33 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 34:
      {
        Xyz::ArrayOfSeqOfLong_forany _tao_union_tmp (
            _tao_union.f34 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 35:
      {
        Xyz::ArrayOfSeqOfAnEnum_forany _tao_union_tmp (
            _tao_union.f35 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 40:
      {
        result = strm << _tao_union.f40 ();
      }
      break;
    case 41:
      {
        result = strm << _tao_union.f41 ();
      }
      break;
    case 42:
      {
        result = strm << _tao_union.f42 ();
      }
      break;
    case 43:
      {
        result = strm << _tao_union.f43 ();
      }
      break;
    case 44:
      {
        result = strm << _tao_union.f44 ();
      }
      break;
    case 45:
      {
        result = strm << _tao_union.f45 ();
      }
      break;
    case 50:
      {
        Xyz::ArrayOfArrayOfBoolean_forany _tao_union_tmp (
            _tao_union.f50 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 51:
      {
        Xyz::ArrayOfArrayOfString_forany _tao_union_tmp (
            _tao_union.f51 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 52:
      {
        Xyz::ArrayOfArrayOfChar_forany _tao_union_tmp (
            _tao_union.f52 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 53:
      {
        Xyz::ArrayOfArrayOfOctet_forany _tao_union_tmp (
            _tao_union.f53 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 54:
      {
        Xyz::ArrayOfArrayOfLong_forany _tao_union_tmp (
            _tao_union.f54 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 55:
      {
        Xyz::ArrayOfArrayOfAnEnum_forany _tao_union_tmp (
            _tao_union.f55 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 60:
      {
        result = strm << _tao_union.f60 ();
      }
      break;
    case 61:
      {
        result = strm << _tao_union.f61 ();
      }
      break;
    case 62:
      {
        result = strm << _tao_union.f62 ();
      }
      break;
    case 63:
      {
        result = strm << _tao_union.f63 ();
      }
      break;
    case 64:
      {
        result = strm << _tao_union.f64 ();
      }
      break;
    case 65:
      {
        result = strm << _tao_union.f65 ();
      }
      break;
    case 66:
      {
        result = strm << ::ACE_OutputCDR::from_octet (_tao_union.f6a ());
      }
      break;
    case 90:
      {
        result = strm << _tao_union.f90 ();
      }
      break;
    case 91:
      {
        result = strm << _tao_union.f91 ();
      }
      break;
    case 92:
      {
        Xyz::ArrayOfAStruct_forany _tao_union_tmp (
            _tao_union.v92 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 93:
      {
        result = strm << _tao_union.ld ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::BigUnion &_tao_union
  )
{
  CORBA::Long _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Float _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        ::CORBA::Boolean _tao_union_tmp;
        ::ACE_InputCDR::to_boolean _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 4:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> ACE_InputCDR::to_string (_tao_union_tmp.out (), 7);

        if (result)
          {
            _tao_union.f4 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 5:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f5 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 6:
      {
        ::CORBA::Octet _tao_union_tmp;
        ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f6 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 7:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f7 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 8:
      {
        Xyz::AnEnum _tao_union_tmp =
          static_cast<Xyz::AnEnum> (0UL);
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f8 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 10:
      {
        Xyz::ArrayOfBoolean _tao_union_tmp;
        Xyz::ArrayOfBoolean_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f10 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 11:
      {
        Xyz::ArrayOfString _tao_union_tmp;
        Xyz::ArrayOfString_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f11 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 12:
      {
        Xyz::ArrayOfChar _tao_union_tmp;
        Xyz::ArrayOfChar_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f12 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 13:
      {
        Xyz::ArrayOfOctet _tao_union_tmp;
        Xyz::ArrayOfOctet_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f13 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 14:
      {
        Xyz::ArrayOfLong _tao_union_tmp;
        Xyz::ArrayOfLong_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f14 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 15:
      {
        Xyz::ArrayOfAnEnum _tao_union_tmp;
        Xyz::ArrayOfAnEnum_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f15 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 20:
      {
        Xyz::SeqOfBoolean _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f20 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 21:
      {
        Xyz::SeqOfString _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f21 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 22:
      {
        Xyz::SeqOfChar _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f22 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 23:
      {
        Xyz::SeqOfOctet _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f23 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 24:
      {
        Xyz::SeqOfLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f24 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 25:
      {
        Xyz::SeqOfAnEnum _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f25 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 30:
      {
        Xyz::ArrayOfSeqOfBoolean _tao_union_tmp;
        Xyz::ArrayOfSeqOfBoolean_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f30 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 31:
      {
        Xyz::ArrayOfSeqOfString _tao_union_tmp;
        Xyz::ArrayOfSeqOfString_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f31 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 32:
      {
        Xyz::ArrayOfSeqOfChar _tao_union_tmp;
        Xyz::ArrayOfSeqOfChar_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f32 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 33:
      {
        Xyz::ArrayOfSeqOfOctet _tao_union_tmp;
        Xyz::ArrayOfSeqOfOctet_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f33 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 34:
      {
        Xyz::ArrayOfSeqOfLong _tao_union_tmp;
        Xyz::ArrayOfSeqOfLong_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f34 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 35:
      {
        Xyz::ArrayOfSeqOfAnEnum _tao_union_tmp;
        Xyz::ArrayOfSeqOfAnEnum_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f35 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 40:
      {
        Xyz::SeqOfArrayOfBoolean _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f40 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 41:
      {
        Xyz::SeqOfArrayOfString _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f41 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 42:
      {
        Xyz::SeqOfArrayOfChar _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f42 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 43:
      {
        Xyz::SeqOfArrayOfOctet _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f43 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 44:
      {
        Xyz::SeqOfArrayOfLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f44 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 45:
      {
        Xyz::SeqOfArrayOfAnEnum _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f45 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 50:
      {
        Xyz::ArrayOfArrayOfBoolean _tao_union_tmp;
        Xyz::ArrayOfArrayOfBoolean_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f50 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 51:
      {
        Xyz::ArrayOfArrayOfString _tao_union_tmp;
        Xyz::ArrayOfArrayOfString_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f51 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 52:
      {
        Xyz::ArrayOfArrayOfChar _tao_union_tmp;
        Xyz::ArrayOfArrayOfChar_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f52 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 53:
      {
        Xyz::ArrayOfArrayOfOctet _tao_union_tmp;
        Xyz::ArrayOfArrayOfOctet_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f53 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 54:
      {
        Xyz::ArrayOfArrayOfLong _tao_union_tmp;
        Xyz::ArrayOfArrayOfLong_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f54 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 55:
      {
        Xyz::ArrayOfArrayOfAnEnum _tao_union_tmp;
        Xyz::ArrayOfArrayOfAnEnum_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f55 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 60:
      {
        Xyz::SeqOfSeqOfBoolean _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f60 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 61:
      {
        Xyz::SeqOfSeqOfString _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f61 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 62:
      {
        Xyz::SeqOfSeqOfChar _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f62 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 63:
      {
        Xyz::SeqOfSeqOfOctet _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f63 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 64:
      {
        Xyz::SeqOfSeqOfLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f64 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 65:
      {
        Xyz::SeqOfSeqOfAnEnum _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f65 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 66:
      {
        ::CORBA::Octet _tao_union_tmp;
        ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.f6a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 90:
      {
        Xyz::AStruct _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f90 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 91:
      {
        Xyz::SeqOfAStruct _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.f91 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 92:
      {
        Xyz::ArrayOfAStruct _tao_union_tmp;
        Xyz::ArrayOfAStruct_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.v92 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 93:
      {
        CORBA::LongDouble _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.ld (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructAUnion &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.sau_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructAUnion &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.sau_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_SeqOfAUnion_CPP_
#define _TAO_CDR_OP_Xyz_SeqOfAUnion_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::SeqOfAUnion &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::SeqOfAUnion &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_SeqOfAUnion_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_AStructSeq_CPP_
#define _TAO_CDR_OP_Xyz_AStructSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::AStructSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::AStructSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_AStructSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::ArrayOfAStructSeq_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::ArrayOfAStructSeq_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::StructContainingArrayOfAStructSeq &_tao_aggregate)
{
  Xyz::ArrayOfAStructSeq_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStructSeq_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStructSeq_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm << _tao_aggregate_f1);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::StructContainingArrayOfAStructSeq &_tao_aggregate)
{
  Xyz::ArrayOfAStructSeq_forany _tao_aggregate_f1
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStructSeq_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStructSeq_slice*> (
      #endif
          _tao_aggregate.f1
        )
    );
  return
    (strm >> _tao_aggregate_f1);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Xyz_BigUnionSeq_CPP_
#define _TAO_CDR_OP_Xyz_BigUnionSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::BigUnionSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::BigUnionSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Xyz_BigUnionSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::OctetArray_forany &_tao_array)
{
  return
    strm.write_octet_array (
        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::OctetArray_forany &_tao_array)
{
  return
    strm.read_octet_array (
        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Xyz::Foo &_tao_aggregate)
{
  Xyz::OctetArray_forany _tao_aggregate_ooo
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::OctetArray_slice*) (
      #else
      (const_cast<
          Xyz::OctetArray_slice*> (
      #endif
          _tao_aggregate.ooo
        )
    );
  Xyz::ArrayOfAStruct_forany _tao_aggregate_structArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.structArray
        )
    );
  return
    (strm << _tao_aggregate.key) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.octer)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.theOctetTypedef)) &&
    (strm << _tao_aggregate.xcolor) &&
    (strm << _tao_aggregate_ooo) &&
    (strm << _tao_aggregate.theString.in ()) &&
    (strm << _tao_aggregate.thestruct) &&
    (strm << _tao_aggregate.theStructSeq) &&
    (strm << _tao_aggregate_structArray) &&
    (strm << _tao_aggregate.theUnion) &&
    (strm << _tao_aggregate.theSeqOfUnion) &&
    (strm << _tao_aggregate.theBigUnion) &&
    (strm << _tao_aggregate.theSeqOfBitUnion) &&
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y) &&
    (strm << ::ACE_OutputCDR::from_wchar (_tao_aggregate.theWChar)) &&
    (strm << _tao_aggregate.theWString.in ()) &&
    (strm << _tao_aggregate.theLongDouble);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Xyz::Foo &_tao_aggregate)
{
  Xyz::OctetArray_forany _tao_aggregate_ooo
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::OctetArray_slice*) (
      #else
      (const_cast<
          Xyz::OctetArray_slice*> (
      #endif
          _tao_aggregate.ooo
        )
    );
  Xyz::ArrayOfAStruct_forany _tao_aggregate_structArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Xyz::ArrayOfAStruct_slice*) (
      #else
      (const_cast<
          Xyz::ArrayOfAStruct_slice*> (
      #endif
          _tao_aggregate.structArray
        )
    );
  return
    (strm >> _tao_aggregate.key) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.octer)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.theOctetTypedef)) &&
    (strm >> _tao_aggregate.xcolor) &&
    (strm >> _tao_aggregate_ooo) &&
    (strm >> _tao_aggregate.theString.out ()) &&
    (strm >> _tao_aggregate.thestruct) &&
    (strm >> _tao_aggregate.theStructSeq) &&
    (strm >> _tao_aggregate_structArray) &&
    (strm >> _tao_aggregate.theUnion) &&
    (strm >> _tao_aggregate.theSeqOfUnion) &&
    (strm >> _tao_aggregate.theBigUnion) &&
    (strm >> _tao_aggregate.theSeqOfBitUnion) &&
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y) &&
    (strm >> ::ACE_InputCDR::to_wchar (_tao_aggregate.theWChar)) &&
    (strm >> _tao_aggregate.theWString.out ()) &&
    (strm >> _tao_aggregate.theLongDouble);
}

TAO_END_VERSIONED_NAMESPACE_DECL



