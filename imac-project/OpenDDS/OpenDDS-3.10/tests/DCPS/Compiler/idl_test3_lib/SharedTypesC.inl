// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfBoolean_forany>::free (
    Xyz::ArrayOfBoolean_slice * _tao_slice
  )
{
  Xyz::ArrayOfBoolean_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfBoolean_slice *
TAO::Array_Traits<Xyz::ArrayOfBoolean_forany>::dup (
    const Xyz::ArrayOfBoolean_slice * _tao_slice
  )
{
  return Xyz::ArrayOfBoolean_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfBoolean_forany>::copy (
    Xyz::ArrayOfBoolean_slice * _tao_to,
    const Xyz::ArrayOfBoolean_slice * _tao_from
  )
{
  Xyz::ArrayOfBoolean_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfBoolean_forany>::zero (
    Xyz::ArrayOfBoolean_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Boolean ();
    }
}

ACE_INLINE
Xyz::ArrayOfBoolean_slice *
TAO::Array_Traits<Xyz::ArrayOfBoolean_forany>::alloc (void)
{
  return Xyz::ArrayOfBoolean_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfString_forany>::free (
    Xyz::ArrayOfString_slice * _tao_slice
  )
{
  Xyz::ArrayOfString_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfString_slice *
TAO::Array_Traits<Xyz::ArrayOfString_forany>::dup (
    const Xyz::ArrayOfString_slice * _tao_slice
  )
{
  return Xyz::ArrayOfString_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfString_forany>::copy (
    Xyz::ArrayOfString_slice * _tao_to,
    const Xyz::ArrayOfString_slice * _tao_from
  )
{
  Xyz::ArrayOfString_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfString_forany>::zero (
    Xyz::ArrayOfString_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
Xyz::ArrayOfString_slice *
TAO::Array_Traits<Xyz::ArrayOfString_forany>::alloc (void)
{
  return Xyz::ArrayOfString_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfChar_forany>::free (
    Xyz::ArrayOfChar_slice * _tao_slice
  )
{
  Xyz::ArrayOfChar_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfChar_slice *
TAO::Array_Traits<Xyz::ArrayOfChar_forany>::dup (
    const Xyz::ArrayOfChar_slice * _tao_slice
  )
{
  return Xyz::ArrayOfChar_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfChar_forany>::copy (
    Xyz::ArrayOfChar_slice * _tao_to,
    const Xyz::ArrayOfChar_slice * _tao_from
  )
{
  Xyz::ArrayOfChar_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfChar_forany>::zero (
    Xyz::ArrayOfChar_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
Xyz::ArrayOfChar_slice *
TAO::Array_Traits<Xyz::ArrayOfChar_forany>::alloc (void)
{
  return Xyz::ArrayOfChar_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfOctet_forany>::free (
    Xyz::ArrayOfOctet_slice * _tao_slice
  )
{
  Xyz::ArrayOfOctet_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfOctet_slice *
TAO::Array_Traits<Xyz::ArrayOfOctet_forany>::dup (
    const Xyz::ArrayOfOctet_slice * _tao_slice
  )
{
  return Xyz::ArrayOfOctet_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfOctet_forany>::copy (
    Xyz::ArrayOfOctet_slice * _tao_to,
    const Xyz::ArrayOfOctet_slice * _tao_from
  )
{
  Xyz::ArrayOfOctet_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfOctet_forany>::zero (
    Xyz::ArrayOfOctet_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Octet ();
    }
}

ACE_INLINE
Xyz::ArrayOfOctet_slice *
TAO::Array_Traits<Xyz::ArrayOfOctet_forany>::alloc (void)
{
  return Xyz::ArrayOfOctet_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfLong_forany>::free (
    Xyz::ArrayOfLong_slice * _tao_slice
  )
{
  Xyz::ArrayOfLong_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfLong_slice *
TAO::Array_Traits<Xyz::ArrayOfLong_forany>::dup (
    const Xyz::ArrayOfLong_slice * _tao_slice
  )
{
  return Xyz::ArrayOfLong_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfLong_forany>::copy (
    Xyz::ArrayOfLong_slice * _tao_to,
    const Xyz::ArrayOfLong_slice * _tao_from
  )
{
  Xyz::ArrayOfLong_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfLong_forany>::zero (
    Xyz::ArrayOfLong_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
Xyz::ArrayOfLong_slice *
TAO::Array_Traits<Xyz::ArrayOfLong_forany>::alloc (void)
{
  return Xyz::ArrayOfLong_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAnEnum_forany>::free (
    Xyz::ArrayOfAnEnum_slice * _tao_slice
  )
{
  Xyz::ArrayOfAnEnum_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfAnEnum_slice *
TAO::Array_Traits<Xyz::ArrayOfAnEnum_forany>::dup (
    const Xyz::ArrayOfAnEnum_slice * _tao_slice
  )
{
  return Xyz::ArrayOfAnEnum_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAnEnum_forany>::copy (
    Xyz::ArrayOfAnEnum_slice * _tao_to,
    const Xyz::ArrayOfAnEnum_slice * _tao_from
  )
{
  Xyz::ArrayOfAnEnum_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfAnEnum_forany>::zero (
    Xyz::ArrayOfAnEnum_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = Xyz::AnEnum ();
    }
}

ACE_INLINE
Xyz::ArrayOfAnEnum_slice *
TAO::Array_Traits<Xyz::ArrayOfAnEnum_forany>::alloc (void)
{
  return Xyz::ArrayOfAnEnum_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfBoolean_forany>::free (
    Xyz::ArrayOfSeqOfBoolean_slice * _tao_slice
  )
{
  Xyz::ArrayOfSeqOfBoolean_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfSeqOfBoolean_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfBoolean_forany>::dup (
    const Xyz::ArrayOfSeqOfBoolean_slice * _tao_slice
  )
{
  return Xyz::ArrayOfSeqOfBoolean_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfBoolean_forany>::copy (
    Xyz::ArrayOfSeqOfBoolean_slice * _tao_to,
    const Xyz::ArrayOfSeqOfBoolean_slice * _tao_from
  )
{
  Xyz::ArrayOfSeqOfBoolean_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfBoolean_forany>::zero (
    Xyz::ArrayOfSeqOfBoolean_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = Xyz::SeqOfBoolean ();
    }
}

ACE_INLINE
Xyz::ArrayOfSeqOfBoolean_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfBoolean_forany>::alloc (void)
{
  return Xyz::ArrayOfSeqOfBoolean_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfString_forany>::free (
    Xyz::ArrayOfSeqOfString_slice * _tao_slice
  )
{
  Xyz::ArrayOfSeqOfString_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfSeqOfString_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfString_forany>::dup (
    const Xyz::ArrayOfSeqOfString_slice * _tao_slice
  )
{
  return Xyz::ArrayOfSeqOfString_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfString_forany>::copy (
    Xyz::ArrayOfSeqOfString_slice * _tao_to,
    const Xyz::ArrayOfSeqOfString_slice * _tao_from
  )
{
  Xyz::ArrayOfSeqOfString_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfString_forany>::zero (
    Xyz::ArrayOfSeqOfString_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = Xyz::SeqOfString ();
    }
}

ACE_INLINE
Xyz::ArrayOfSeqOfString_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfString_forany>::alloc (void)
{
  return Xyz::ArrayOfSeqOfString_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfChar_forany>::free (
    Xyz::ArrayOfSeqOfChar_slice * _tao_slice
  )
{
  Xyz::ArrayOfSeqOfChar_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfSeqOfChar_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfChar_forany>::dup (
    const Xyz::ArrayOfSeqOfChar_slice * _tao_slice
  )
{
  return Xyz::ArrayOfSeqOfChar_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfChar_forany>::copy (
    Xyz::ArrayOfSeqOfChar_slice * _tao_to,
    const Xyz::ArrayOfSeqOfChar_slice * _tao_from
  )
{
  Xyz::ArrayOfSeqOfChar_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfChar_forany>::zero (
    Xyz::ArrayOfSeqOfChar_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = Xyz::SeqOfChar ();
    }
}

ACE_INLINE
Xyz::ArrayOfSeqOfChar_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfChar_forany>::alloc (void)
{
  return Xyz::ArrayOfSeqOfChar_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfOctet_forany>::free (
    Xyz::ArrayOfSeqOfOctet_slice * _tao_slice
  )
{
  Xyz::ArrayOfSeqOfOctet_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfSeqOfOctet_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfOctet_forany>::dup (
    const Xyz::ArrayOfSeqOfOctet_slice * _tao_slice
  )
{
  return Xyz::ArrayOfSeqOfOctet_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfOctet_forany>::copy (
    Xyz::ArrayOfSeqOfOctet_slice * _tao_to,
    const Xyz::ArrayOfSeqOfOctet_slice * _tao_from
  )
{
  Xyz::ArrayOfSeqOfOctet_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfOctet_forany>::zero (
    Xyz::ArrayOfSeqOfOctet_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = Xyz::SeqOfOctet ();
    }
}

ACE_INLINE
Xyz::ArrayOfSeqOfOctet_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfOctet_forany>::alloc (void)
{
  return Xyz::ArrayOfSeqOfOctet_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfLong_forany>::free (
    Xyz::ArrayOfSeqOfLong_slice * _tao_slice
  )
{
  Xyz::ArrayOfSeqOfLong_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfSeqOfLong_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfLong_forany>::dup (
    const Xyz::ArrayOfSeqOfLong_slice * _tao_slice
  )
{
  return Xyz::ArrayOfSeqOfLong_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfLong_forany>::copy (
    Xyz::ArrayOfSeqOfLong_slice * _tao_to,
    const Xyz::ArrayOfSeqOfLong_slice * _tao_from
  )
{
  Xyz::ArrayOfSeqOfLong_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfLong_forany>::zero (
    Xyz::ArrayOfSeqOfLong_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = Xyz::SeqOfLong ();
    }
}

ACE_INLINE
Xyz::ArrayOfSeqOfLong_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfLong_forany>::alloc (void)
{
  return Xyz::ArrayOfSeqOfLong_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfAnEnum_forany>::free (
    Xyz::ArrayOfSeqOfAnEnum_slice * _tao_slice
  )
{
  Xyz::ArrayOfSeqOfAnEnum_free (_tao_slice);
}

ACE_INLINE
Xyz::ArrayOfSeqOfAnEnum_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfAnEnum_forany>::dup (
    const Xyz::ArrayOfSeqOfAnEnum_slice * _tao_slice
  )
{
  return Xyz::ArrayOfSeqOfAnEnum_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfAnEnum_forany>::copy (
    Xyz::ArrayOfSeqOfAnEnum_slice * _tao_to,
    const Xyz::ArrayOfSeqOfAnEnum_slice * _tao_from
  )
{
  Xyz::ArrayOfSeqOfAnEnum_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Xyz::ArrayOfSeqOfAnEnum_forany>::zero (
    Xyz::ArrayOfSeqOfAnEnum_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = Xyz::SeqOfAnEnum ();
    }
}

ACE_INLINE
Xyz::ArrayOfSeqOfAnEnum_slice *
TAO::Array_Traits<Xyz::ArrayOfSeqOfAnEnum_forany>::alloc (void)
{
  return Xyz::ArrayOfSeqOfAnEnum_alloc ();
}


