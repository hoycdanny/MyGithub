/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file SharedTypes.idl */
#ifndef OPENDDS_IDL_GENERATED_SHAREDTYPESTYPESUPPORTIMPL_H_ZZQ9K9
#define OPENDDS_IDL_GENERATED_SHAREDTYPESTYPESUPPORTIMPL_H_ZZQ9K9
#include "SharedTypesC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DCPS/Serializer.h"
#include "foolib_export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Xyz */



/* Begin ENUM: AnEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::AnEnum& enumval);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::AnEnum& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_Xyz_AnEnum_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: AnEnum */


/* Begin TYPEDEF: SeqOfBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::SeqOfBoolean& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::SeqOfBoolean& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::SeqOfBoolean& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::SeqOfBoolean*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SeqOfBoolean */


/* Begin TYPEDEF: SeqOfString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::SeqOfString& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::SeqOfString& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::SeqOfString& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::SeqOfString*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SeqOfString */


/* Begin TYPEDEF: SeqOfChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::SeqOfChar& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::SeqOfChar& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::SeqOfChar& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::SeqOfChar*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SeqOfChar */


/* Begin TYPEDEF: SeqOfOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::SeqOfOctet& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::SeqOfOctet& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::SeqOfOctet& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::SeqOfOctet*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SeqOfOctet */


/* Begin TYPEDEF: SeqOfLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::SeqOfLong& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::SeqOfLong& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::SeqOfLong& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::SeqOfLong*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SeqOfLong */


/* Begin TYPEDEF: SeqOfAnEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::SeqOfAnEnum& seq, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::SeqOfAnEnum& seq);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::SeqOfAnEnum& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::SeqOfAnEnum*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SeqOfAnEnum */


/* Begin TYPEDEF: ArrayOfBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfBoolean_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfBoolean_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfBoolean_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfBoolean_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfBoolean */


/* Begin TYPEDEF: ArrayOfString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfString_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfString_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfString_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfString_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfString */


/* Begin TYPEDEF: ArrayOfChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfChar_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfChar_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfChar_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfChar_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfChar */


/* Begin TYPEDEF: ArrayOfOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfOctet_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfOctet_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfOctet_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfOctet_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfOctet */


/* Begin TYPEDEF: ArrayOfLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfLong_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfLong_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfLong */


/* Begin TYPEDEF: ArrayOfAnEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfAnEnum_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfAnEnum_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfAnEnum_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfAnEnum_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfAnEnum */


/* Begin TYPEDEF: ArrayOfSeqOfBoolean */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfSeqOfBoolean_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfSeqOfBoolean_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfSeqOfBoolean_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfSeqOfBoolean_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfSeqOfBoolean */


/* Begin TYPEDEF: ArrayOfSeqOfString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfSeqOfString_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfSeqOfString_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfSeqOfString_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfSeqOfString_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfSeqOfString */


/* Begin TYPEDEF: ArrayOfSeqOfChar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfSeqOfChar_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfSeqOfChar_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfSeqOfChar_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfSeqOfChar_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfSeqOfChar */


/* Begin TYPEDEF: ArrayOfSeqOfOctet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfSeqOfOctet_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfSeqOfOctet_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfSeqOfOctet_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfSeqOfOctet_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfSeqOfOctet */


/* Begin TYPEDEF: ArrayOfSeqOfLong */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfSeqOfLong_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfSeqOfLong_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfSeqOfLong_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfSeqOfLong_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfSeqOfLong */


/* Begin TYPEDEF: ArrayOfSeqOfAnEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::ArrayOfSeqOfAnEnum_forany& arr, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::ArrayOfSeqOfAnEnum_forany& arr);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::ArrayOfSeqOfAnEnum_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::ArrayOfSeqOfAnEnum_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfSeqOfAnEnum */

/* End MODULE: Xyz */
#endif /* OPENDDS_IDL_GENERATED_SHAREDTYPESTYPESUPPORTIMPL_H_ZZQ9K9 */
