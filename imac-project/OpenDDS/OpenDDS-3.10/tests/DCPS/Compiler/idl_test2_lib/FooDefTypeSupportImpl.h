/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file FooDef.idl */
#ifndef OPENDDS_IDL_GENERATED_FOODEFTYPESUPPORTIMPL_H_O0M0PU
#define OPENDDS_IDL_GENERATED_FOODEFTYPESUPPORTIMPL_H_O0M0PU
#include "FooDefC.h"
#include "dds/DCPS/Definitions.h"
#include "FooDefTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Xyz */



/* Begin STRUCT: Foo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Xyz::Foo& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Xyz::Foo& stru);

FooLib_Export
bool operator>>(Serializer& strm, Xyz::Foo& stru);

FooLib_Export
size_t gen_max_marshaled_size(const Xyz::Foo& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::Foo> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const Xyz::Foo> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::Foo> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::Foo> stru);

template <>
struct MarshalTraits<Xyz::Foo> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export Foo_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::Foo& v1, const Xyz::Foo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.a_long_value < v2.a_long_value) return true;
    if (v2.a_long_value < v1.a_long_value) return false;
    return false;
  }
};
}


namespace Xyz {
class FooTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::Foo> {
  typedef Xyz::Foo MessageType;
  typedef Xyz::FooSeq MessageSequenceType;
  typedef Xyz::FooTypeSupport TypeSupportType;
  typedef Xyz::FooTypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::FooDataWriter DataWriterType;
  typedef Xyz::FooDataReader DataReaderType;
  typedef Xyz::Foo_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::Foo"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class FooLib_Export FooTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<FooTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Foo> TraitsType;
  typedef FooTypeSupport TypeSupportType;
  typedef FooTypeSupport::_var_type _var_type;
  typedef FooTypeSupport::_ptr_type _ptr_type;

  FooTypeSupportImpl() {}
  virtual ~FooTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static FooTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Xyz::Foo>();
FooLib_Export
void gen_skip_over(Serializer& ser, Xyz::Foo*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Foo */

/* End MODULE: Xyz */


/* Begin STRUCT: Bar */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const Bar& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const Bar& stru);

FooLib_Export
bool operator>>(Serializer& strm, Bar& stru);

FooLib_Export
size_t gen_max_marshaled_size(const Bar& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Bar> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const Bar> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Bar> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<Bar> stru);

template <>
struct MarshalTraits<Bar> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export Bar_OpenDDS_KeyLessThan {
  bool operator()(const Bar&, const Bar&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};


class BarTypeSupportImpl;

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Bar> {
  typedef Bar MessageType;
  typedef BarSeq MessageSequenceType;
  typedef BarTypeSupport TypeSupportType;
  typedef BarTypeSupportImpl TypeSupportTypeImpl;
  typedef BarDataWriter DataWriterType;
  typedef BarDataReader DataReaderType;
  typedef Bar_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Bar"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


class FooLib_Export BarTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<BarTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Bar> TraitsType;
  typedef BarTypeSupport TypeSupportType;
  typedef BarTypeSupport::_var_type _var_type;
  typedef BarTypeSupport::_ptr_type _ptr_type;

  BarTypeSupportImpl() {}
  virtual ~BarTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static BarTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
FooLib_Export
const MetaStruct& getMetaStruct<Bar>();
FooLib_Export
void gen_skip_over(Serializer& ser, Bar*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Bar */
#endif /* OPENDDS_IDL_GENERATED_FOODEFTYPESUPPORTIMPL_H_O0M0PU */
