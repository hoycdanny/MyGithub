// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_NSCTYPESUPPORTC_CB2NOU_H_
#define _TAO_IDL_NSCTYPESUPPORTC_CB2NOU_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "NscC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace N
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace DDS
  {

    // TAO_IDL - Generated from
    // be/be_visitor_module/module_ch.cpp:38

    namespace G
    {

      // TAO_IDL - Generated from
      // be/be_visitor_sequence/sequence_ch.cpp:102

      typedef ::TAO::DCPS::ZeroCopyDataSeq< N::DDS::G::S, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> SSeq;
      

      // TAO_IDL - Generated from
      // be/be_interface.cpp:751

#if !defined (_N_DDS_G_STYPESUPPORT__VAR_OUT_CH_)
#define _N_DDS_G_STYPESUPPORT__VAR_OUT_CH_

      class STypeSupport;
      typedef STypeSupport *STypeSupport_ptr;

      typedef
        TAO_Objref_Var_T<
            STypeSupport
          >
        STypeSupport_var;
      
      typedef
        TAO_Objref_Out_T<
            STypeSupport
          >
        STypeSupport_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_ch.cpp:43

      class  STypeSupport
        : public virtual ::OpenDDS::DCPS::TypeSupport
      
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:307

        typedef STypeSupport_ptr _ptr_type;
        typedef STypeSupport_var _var_type;
        typedef STypeSupport_out _out_type;

        // The static operations.
        static STypeSupport_ptr _duplicate (STypeSupport_ptr obj);

        static void _tao_release (STypeSupport_ptr obj);

        static STypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
        static STypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static STypeSupport_ptr _nil (void);

        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_ch.cpp:140

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id (void) const;
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
      
      protected:
        // Abstract or local interface only.
        STypeSupport (void);

        

        virtual ~STypeSupport (void);
      
      private:
        // Private and unimplemented for concrete interfaces.
        STypeSupport (const STypeSupport &);

        void operator= (const STypeSupport &);
      };

      // TAO_IDL - Generated from
      // be/be_interface.cpp:751

#if !defined (_N_DDS_G_SDATAWRITER__VAR_OUT_CH_)
#define _N_DDS_G_SDATAWRITER__VAR_OUT_CH_

      class SDataWriter;
      typedef SDataWriter *SDataWriter_ptr;

      typedef
        TAO_Objref_Var_T<
            SDataWriter
          >
        SDataWriter_var;
      
      typedef
        TAO_Objref_Out_T<
            SDataWriter
          >
        SDataWriter_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_ch.cpp:43

      class  SDataWriter
        : public virtual ::DDS::DataWriter
      
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:307

        typedef SDataWriter_ptr _ptr_type;
        typedef SDataWriter_var _var_type;
        typedef SDataWriter_out _out_type;

        // The static operations.
        static SDataWriter_ptr _duplicate (SDataWriter_ptr obj);

        static void _tao_release (SDataWriter_ptr obj);

        static SDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
        static SDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static SDataWriter_ptr _nil (void);

        virtual ::DDS::InstanceHandle_t register_instance (
          const ::N::DDS::G::S & instance) = 0;

        virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
          const ::N::DDS::G::S & instance,
          const ::DDS::Time_t & timestamp) = 0;

        virtual ::DDS::ReturnCode_t unregister_instance (
          const ::N::DDS::G::S & instance,
          ::DDS::InstanceHandle_t handle) = 0;

        virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
          const ::N::DDS::G::S & instance,
          ::DDS::InstanceHandle_t handle,
          const ::DDS::Time_t & timestamp) = 0;

        virtual ::DDS::ReturnCode_t write (
          const ::N::DDS::G::S & instance_data,
          ::DDS::InstanceHandle_t handle) = 0;

        virtual ::DDS::ReturnCode_t write_w_timestamp (
          const ::N::DDS::G::S & instance_data,
          ::DDS::InstanceHandle_t handle,
          const ::DDS::Time_t & source_timestamp) = 0;

        virtual ::DDS::ReturnCode_t dispose (
          const ::N::DDS::G::S & instance_data,
          ::DDS::InstanceHandle_t instance_handle) = 0;

        virtual ::DDS::ReturnCode_t dispose_w_timestamp (
          const ::N::DDS::G::S & instance_data,
          ::DDS::InstanceHandle_t instance_handle,
          const ::DDS::Time_t & source_timestamp) = 0;

        virtual ::DDS::ReturnCode_t get_key_value (
          ::N::DDS::G::S & key_holder,
          ::DDS::InstanceHandle_t handle) = 0;

        virtual ::DDS::InstanceHandle_t lookup_instance (
          const ::N::DDS::G::S & instance_data) = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_ch.cpp:140

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id (void) const;
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
      
      protected:
        // Abstract or local interface only.
        SDataWriter (void);

        

        virtual ~SDataWriter (void);
      
      private:
        // Private and unimplemented for concrete interfaces.
        SDataWriter (const SDataWriter &);

        void operator= (const SDataWriter &);
      };

      // TAO_IDL - Generated from
      // be/be_interface.cpp:751

#if !defined (_N_DDS_G_SDATAREADER__VAR_OUT_CH_)
#define _N_DDS_G_SDATAREADER__VAR_OUT_CH_

      class SDataReader;
      typedef SDataReader *SDataReader_ptr;

      typedef
        TAO_Objref_Var_T<
            SDataReader
          >
        SDataReader_var;
      
      typedef
        TAO_Objref_Out_T<
            SDataReader
          >
        SDataReader_out;

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // be/be_visitor_interface/interface_ch.cpp:43

      class  SDataReader
        : public virtual ::OpenDDS::DCPS::DataReaderEx
      
      {
      public:

        // TAO_IDL - Generated from
        // be/be_type.cpp:307

        typedef SDataReader_ptr _ptr_type;
        typedef SDataReader_var _var_type;
        typedef SDataReader_out _out_type;

        // The static operations.
        static SDataReader_ptr _duplicate (SDataReader_ptr obj);

        static void _tao_release (SDataReader_ptr obj);

        static SDataReader_ptr _narrow (::CORBA::Object_ptr obj);
        static SDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static SDataReader_ptr _nil (void);

        virtual ::DDS::ReturnCode_t read (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq,
          ::CORBA::Long max_samples,
          ::DDS::SampleStateMask sample_states,
          ::DDS::ViewStateMask view_states,
          ::DDS::InstanceStateMask instance_states) = 0;

        virtual ::DDS::ReturnCode_t take (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq,
          ::CORBA::Long max_samples,
          ::DDS::SampleStateMask sample_states,
          ::DDS::ViewStateMask view_states,
          ::DDS::InstanceStateMask instance_states) = 0;

        virtual ::DDS::ReturnCode_t read_w_condition (
          ::N::DDS::G::SSeq & data_values,
          ::DDS::SampleInfoSeq & sample_infos,
          ::CORBA::Long max_samples,
          ::DDS::ReadCondition_ptr a_condition) = 0;

        virtual ::DDS::ReturnCode_t take_w_condition (
          ::N::DDS::G::SSeq & data_values,
          ::DDS::SampleInfoSeq & sample_infos,
          ::CORBA::Long max_samples,
          ::DDS::ReadCondition_ptr a_condition) = 0;

        virtual ::DDS::ReturnCode_t read_next_sample (
          ::N::DDS::G::S & received_data,
          ::DDS::SampleInfo & sample_info) = 0;

        virtual ::DDS::ReturnCode_t take_next_sample (
          ::N::DDS::G::S & received_data,
          ::DDS::SampleInfo & sample_info) = 0;

        virtual ::DDS::ReturnCode_t read_instance (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t a_handle,
          ::DDS::SampleStateMask sample_states,
          ::DDS::ViewStateMask view_states,
          ::DDS::InstanceStateMask instance_states) = 0;

        virtual ::DDS::ReturnCode_t take_instance (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t a_handle,
          ::DDS::SampleStateMask sample_states,
          ::DDS::ViewStateMask view_states,
          ::DDS::InstanceStateMask instance_states) = 0;

        virtual ::DDS::ReturnCode_t read_instance_w_condition (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & sample_infos,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t a_handle,
          ::DDS::ReadCondition_ptr a_condition) = 0;

        virtual ::DDS::ReturnCode_t take_instance_w_condition (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & sample_infos,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t a_handle,
          ::DDS::ReadCondition_ptr a_condition) = 0;

        virtual ::DDS::ReturnCode_t read_next_instance (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t a_handle,
          ::DDS::SampleStateMask sample_states,
          ::DDS::ViewStateMask view_states,
          ::DDS::InstanceStateMask instance_states) = 0;

        virtual ::DDS::ReturnCode_t take_next_instance (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t a_handle,
          ::DDS::SampleStateMask sample_states,
          ::DDS::ViewStateMask view_states,
          ::DDS::InstanceStateMask instance_states) = 0;

        virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
          ::N::DDS::G::SSeq & data_values,
          ::DDS::SampleInfoSeq & sample_infos,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t previous_handle,
          ::DDS::ReadCondition_ptr a_condition) = 0;

        virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
          ::N::DDS::G::SSeq & data_values,
          ::DDS::SampleInfoSeq & sample_infos,
          ::CORBA::Long max_samples,
          ::DDS::InstanceHandle_t previous_handle,
          ::DDS::ReadCondition_ptr a_condition) = 0;

        virtual ::DDS::ReturnCode_t return_loan (
          ::N::DDS::G::SSeq & received_data,
          ::DDS::SampleInfoSeq & info_seq) = 0;

        virtual ::DDS::ReturnCode_t get_key_value (
          ::N::DDS::G::S & key_holder,
          ::DDS::InstanceHandle_t handle) = 0;

        virtual ::DDS::InstanceHandle_t lookup_instance (
          const ::N::DDS::G::S & instance_data) = 0;

        // TAO_IDL - Generated from
        // be/be_visitor_interface/interface_ch.cpp:140

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id (void) const;
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
      
      protected:
        // Abstract or local interface only.
        SDataReader (void);

        

        virtual ~SDataReader (void);
      
      private:
        // Private and unimplemented for concrete interfaces.
        SDataReader (const SDataReader &);

        void operator= (const SDataReader &);
      };
    
    // TAO_IDL - Generated from
    // be/be_visitor_module/module_ch.cpp:67
    
    } // module N::DDS::G
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module N::DDS

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module N

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_N_DDS_G_STYPESUPPORT__TRAITS_)
#define _N_DDS_G_STYPESUPPORT__TRAITS_

  template<>
  struct  Objref_Traits< ::N::DDS::G::STypeSupport>
  {
    static ::N::DDS::G::STypeSupport_ptr duplicate (
        ::N::DDS::G::STypeSupport_ptr p);
    static void release (
        ::N::DDS::G::STypeSupport_ptr p);
    static ::N::DDS::G::STypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::N::DDS::G::STypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_N_DDS_G_SDATAWRITER__TRAITS_)
#define _N_DDS_G_SDATAWRITER__TRAITS_

  template<>
  struct  Objref_Traits< ::N::DDS::G::SDataWriter>
  {
    static ::N::DDS::G::SDataWriter_ptr duplicate (
        ::N::DDS::G::SDataWriter_ptr p);
    static void release (
        ::N::DDS::G::SDataWriter_ptr p);
    static ::N::DDS::G::SDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::N::DDS::G::SDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_N_DDS_G_SDATAREADER__TRAITS_)
#define _N_DDS_G_SDATAREADER__TRAITS_

  template<>
  struct  Objref_Traits< ::N::DDS::G::SDataReader>
  {
    static ::N::DDS::G::SDataReader_ptr duplicate (
        ::N::DDS::G::SDataReader_ptr p);
    static void release (
        ::N::DDS::G::SDataReader_ptr p);
    static ::N::DDS::G::SDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::N::DDS::G::SDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "NscTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

