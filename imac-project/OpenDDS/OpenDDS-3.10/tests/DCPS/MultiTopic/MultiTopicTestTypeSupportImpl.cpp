/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file MultiTopicTest.idl */
#include "MultiTopicTestTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin STRUCT: LocationInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const LocationInfo& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id2);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.x);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.y);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.z);
}

bool operator<<(Serializer& strm, const LocationInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.flight_id1)
    && (strm << stru.flight_id2)
    && (strm << stru.x)
    && (strm << stru.y)
    && (strm << stru.z);
}

bool operator>>(Serializer& strm, LocationInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.flight_id1)
    && (strm >> stru.flight_id2)
    && (strm >> stru.x)
    && (strm >> stru.y)
    && (strm >> stru.z);
}

size_t gen_max_marshaled_size(const LocationInfo& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 20;
}

size_t gen_max_marshaled_size(KeyOnly<const LocationInfo> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 8;
}

void gen_find_size(KeyOnly<const LocationInfo> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id2);
}

bool operator<<(Serializer& strm, KeyOnly<const LocationInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.flight_id1)
    && (strm << stru.t.flight_id2);
}

bool operator>>(Serializer& strm, KeyOnly<LocationInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.flight_id1)
    && (strm >> stru.t.flight_id2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


::DDS::DataWriter_ptr LocationInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<LocationInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr LocationInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<LocationInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr LocationInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<LocationInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<LocationInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& LocationInfoTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<LocationInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool LocationInfoTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* LocationInfoTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
LocationInfoTypeSupport::_ptr_type LocationInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<LocationInfo> : MetaStruct {
  typedef LocationInfo T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

  Value getValue(const void* stru, const char* field) const
  {
    const LocationInfo& typed = *static_cast<const LocationInfo*>(stru);
    if (std::strcmp(field, "flight_id1") == 0) {
      return typed.flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return typed.flight_id2;
    }
    if (std::strcmp(field, "x") == 0) {
      return typed.x;
    }
    if (std::strcmp(field, "y") == 0) {
      return typed.y;
    }
    if (std::strcmp(field, "z") == 0) {
      return typed.z;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LocationInfo)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id1' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id2' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "x") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'x' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "y") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'y' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "z") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'z' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct LocationInfo");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_id1") == 0) {
      return make_field_cmp(&T::flight_id1, next);
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return make_field_cmp(&T::flight_id2, next);
    }
    if (std::strcmp(field, "x") == 0) {
      return make_field_cmp(&T::x, next);
    }
    if (std::strcmp(field, "y") == 0) {
      return make_field_cmp(&T::y, next);
    }
    if (std::strcmp(field, "z") == 0) {
      return make_field_cmp(&T::z, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LocationInfo)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_id1", "flight_id2", "x", "y", "z", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      return &static_cast<const T*>(stru)->flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return &static_cast<const T*>(stru)->flight_id2;
    }
    if (std::strcmp(field, "x") == 0) {
      return &static_cast<const T*>(stru)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return &static_cast<const T*>(stru)->y;
    }
    if (std::strcmp(field, "z") == 0) {
      return &static_cast<const T*>(stru)->z;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LocationInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_id1") == 0) {
      static_cast<T*>(lhs)->flight_id1 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      static_cast<T*>(lhs)->flight_id2 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "x") == 0) {
      static_cast<T*>(lhs)->x = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "y") == 0) {
      static_cast<T*>(lhs)->y = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "z") == 0) {
      static_cast<T*>(lhs)->z = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LocationInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_id1") == 0) {
      return static_cast<const T*>(lhs)->flight_id1 == static_cast<const T*>(rhs)->flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return static_cast<const T*>(lhs)->flight_id2 == static_cast<const T*>(rhs)->flight_id2;
    }
    if (std::strcmp(field, "x") == 0) {
      return static_cast<const T*>(lhs)->x == static_cast<const T*>(rhs)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return static_cast<const T*>(lhs)->y == static_cast<const T*>(rhs)->y;
    }
    if (std::strcmp(field, "z") == 0) {
      return static_cast<const T*>(lhs)->z == static_cast<const T*>(rhs)->z;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LocationInfo)");
  }
};

template<>
const MetaStruct& getMetaStruct<LocationInfo>()
{
  static MetaStructImpl<LocationInfo> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, LocationInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<LocationInfo>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: LocationInfo */


/* Begin STRUCT: PlanInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const PlanInfo& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id2);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.flight_name.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.tailno.in()) + 1;
}

bool operator<<(Serializer& strm, const PlanInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.flight_id1)
    && (strm << stru.flight_id2)
    && (strm << stru.flight_name.in())
    && (strm << stru.tailno.in());
}

bool operator>>(Serializer& strm, PlanInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.flight_id1)
    && (strm >> stru.flight_id2)
    && (strm >> stru.flight_name.out())
    && (strm >> stru.tailno.out());
}

size_t gen_max_marshaled_size(const PlanInfo& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const PlanInfo> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 8;
}

void gen_find_size(KeyOnly<const PlanInfo> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id2);
}

bool operator<<(Serializer& strm, KeyOnly<const PlanInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.flight_id1)
    && (strm << stru.t.flight_id2);
}

bool operator>>(Serializer& strm, KeyOnly<PlanInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.flight_id1)
    && (strm >> stru.t.flight_id2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


::DDS::DataWriter_ptr PlanInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<PlanInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr PlanInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PlanInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr PlanInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PlanInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<PlanInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& PlanInfoTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<PlanInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool PlanInfoTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* PlanInfoTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
PlanInfoTypeSupport::_ptr_type PlanInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<PlanInfo> : MetaStruct {
  typedef PlanInfo T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

  Value getValue(const void* stru, const char* field) const
  {
    const PlanInfo& typed = *static_cast<const PlanInfo*>(stru);
    if (std::strcmp(field, "flight_id1") == 0) {
      return typed.flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return typed.flight_id2;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return typed.flight_name.in();
    }
    if (std::strcmp(field, "tailno") == 0) {
      return typed.tailno.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct PlanInfo)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id1' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id2' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "flight_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'flight_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'flight_name' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "tailno") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'tailno' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'tailno' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct PlanInfo");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_id1") == 0) {
      return make_field_cmp(&T::flight_id1, next);
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return make_field_cmp(&T::flight_id2, next);
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return make_field_cmp(&T::flight_name, next);
    }
    if (std::strcmp(field, "tailno") == 0) {
      return make_field_cmp(&T::tailno, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct PlanInfo)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_id1", "flight_id2", "flight_name", "tailno", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      return &static_cast<const T*>(stru)->flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return &static_cast<const T*>(stru)->flight_id2;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return &static_cast<const T*>(stru)->flight_name;
    }
    if (std::strcmp(field, "tailno") == 0) {
      return &static_cast<const T*>(stru)->tailno;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct PlanInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_id1") == 0) {
      static_cast<T*>(lhs)->flight_id1 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      static_cast<T*>(lhs)->flight_id2 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      static_cast<T*>(lhs)->flight_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "tailno") == 0) {
      static_cast<T*>(lhs)->tailno = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct PlanInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_id1") == 0) {
      return static_cast<const T*>(lhs)->flight_id1 == static_cast<const T*>(rhs)->flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return static_cast<const T*>(lhs)->flight_id2 == static_cast<const T*>(rhs)->flight_id2;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->flight_name.in(), static_cast<const T*>(rhs)->flight_name.in());
    }
    if (std::strcmp(field, "tailno") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->tailno.in(), static_cast<const T*>(rhs)->tailno.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct PlanInfo)");
  }
};

template<>
const MetaStruct& getMetaStruct<PlanInfo>()
{
  static MetaStructImpl<PlanInfo> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, PlanInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<PlanInfo>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PlanInfo */


/* Begin STRUCT: MoreInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const MoreInfo& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id1);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.more.in()) + 1;
}

bool operator<<(Serializer& strm, const MoreInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.flight_id1)
    && (strm << stru.more.in());
}

bool operator>>(Serializer& strm, MoreInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.flight_id1)
    && (strm >> stru.more.out());
}

size_t gen_max_marshaled_size(const MoreInfo& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const MoreInfo> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const MoreInfo> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id1);
}

bool operator<<(Serializer& strm, KeyOnly<const MoreInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.flight_id1);
}

bool operator>>(Serializer& strm, KeyOnly<MoreInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.flight_id1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


::DDS::DataWriter_ptr MoreInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<MoreInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MoreInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<MoreInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MoreInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<MoreInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<MoreInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MoreInfoTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<MoreInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MoreInfoTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MoreInfoTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MoreInfoTypeSupport::_ptr_type MoreInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<MoreInfo> : MetaStruct {
  typedef MoreInfo T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const MoreInfo& typed = *static_cast<const MoreInfo*>(stru);
    if (std::strcmp(field, "flight_id1") == 0) {
      return typed.flight_id1;
    }
    if (std::strcmp(field, "more") == 0) {
      return typed.more.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct MoreInfo)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id1' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "more") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'more' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'more' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct MoreInfo");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_id1") == 0) {
      return make_field_cmp(&T::flight_id1, next);
    }
    if (std::strcmp(field, "more") == 0) {
      return make_field_cmp(&T::more, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct MoreInfo)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_id1", "more", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      return &static_cast<const T*>(stru)->flight_id1;
    }
    if (std::strcmp(field, "more") == 0) {
      return &static_cast<const T*>(stru)->more;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct MoreInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_id1") == 0) {
      static_cast<T*>(lhs)->flight_id1 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "more") == 0) {
      static_cast<T*>(lhs)->more = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct MoreInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_id1") == 0) {
      return static_cast<const T*>(lhs)->flight_id1 == static_cast<const T*>(rhs)->flight_id1;
    }
    if (std::strcmp(field, "more") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->more.in(), static_cast<const T*>(rhs)->more.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct MoreInfo)");
  }
};

template<>
const MetaStruct& getMetaStruct<MoreInfo>()
{
  static MetaStructImpl<MoreInfo> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, MoreInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<MoreInfo>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: MoreInfo */


/* Begin STRUCT: UnrelatedInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const UnrelatedInfo& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.misc.in()) + 1;
}

bool operator<<(Serializer& strm, const UnrelatedInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.misc.in());
}

bool operator>>(Serializer& strm, UnrelatedInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.misc.out());
}

size_t gen_max_marshaled_size(const UnrelatedInfo& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const UnrelatedInfo> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const UnrelatedInfo> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const UnrelatedInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<UnrelatedInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


::DDS::DataWriter_ptr UnrelatedInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<UnrelatedInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr UnrelatedInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<UnrelatedInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr UnrelatedInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<UnrelatedInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<UnrelatedInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& UnrelatedInfoTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<UnrelatedInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool UnrelatedInfoTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* UnrelatedInfoTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
UnrelatedInfoTypeSupport::_ptr_type UnrelatedInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<UnrelatedInfo> : MetaStruct {
  typedef UnrelatedInfo T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const UnrelatedInfo& typed = *static_cast<const UnrelatedInfo*>(stru);
    if (std::strcmp(field, "misc") == 0) {
      return typed.misc.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct UnrelatedInfo)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "misc") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'misc' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'misc' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct UnrelatedInfo");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "misc") == 0) {
      return make_field_cmp(&T::misc, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct UnrelatedInfo)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"misc", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "misc") == 0) {
      return &static_cast<const T*>(stru)->misc;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct UnrelatedInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "misc") == 0) {
      static_cast<T*>(lhs)->misc = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct UnrelatedInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "misc") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->misc.in(), static_cast<const T*>(rhs)->misc.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct UnrelatedInfo)");
  }
};

template<>
const MetaStruct& getMetaStruct<UnrelatedInfo>()
{
  static MetaStructImpl<UnrelatedInfo> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, UnrelatedInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<UnrelatedInfo>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: UnrelatedInfo */


/* Begin STRUCT: Resulting */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Resulting& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.flight_id2);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.flight_name.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.x);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.y);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.height);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.more.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.misc.in()) + 1;
}

bool operator<<(Serializer& strm, const Resulting& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.flight_id1)
    && (strm << stru.flight_id2)
    && (strm << stru.flight_name.in())
    && (strm << stru.x)
    && (strm << stru.y)
    && (strm << stru.height)
    && (strm << stru.more.in())
    && (strm << stru.misc.in());
}

bool operator>>(Serializer& strm, Resulting& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.flight_id1)
    && (strm >> stru.flight_id2)
    && (strm >> stru.flight_name.out())
    && (strm >> stru.x)
    && (strm >> stru.y)
    && (strm >> stru.height)
    && (strm >> stru.more.out())
    && (strm >> stru.misc.out());
}

size_t gen_max_marshaled_size(const Resulting& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Resulting> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 8;
}

void gen_find_size(KeyOnly<const Resulting> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.flight_id2);
}

bool operator<<(Serializer& strm, KeyOnly<const Resulting> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.flight_id1)
    && (strm << stru.t.flight_id2);
}

bool operator>>(Serializer& strm, KeyOnly<Resulting> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.flight_id1)
    && (strm >> stru.t.flight_id2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


::DDS::DataWriter_ptr ResultingTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Resulting> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr ResultingTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Resulting> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ResultingTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Resulting> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Resulting, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ResultingTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Resulting>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool ResultingTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* ResultingTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
ResultingTypeSupport::_ptr_type ResultingTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Resulting> : MetaStruct {
  typedef Resulting T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

  Value getValue(const void* stru, const char* field) const
  {
    const Resulting& typed = *static_cast<const Resulting*>(stru);
    if (std::strcmp(field, "flight_id1") == 0) {
      return typed.flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return typed.flight_id2;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return typed.flight_name.in();
    }
    if (std::strcmp(field, "x") == 0) {
      return typed.x;
    }
    if (std::strcmp(field, "y") == 0) {
      return typed.y;
    }
    if (std::strcmp(field, "height") == 0) {
      return typed.height;
    }
    if (std::strcmp(field, "more") == 0) {
      return typed.more.in();
    }
    if (std::strcmp(field, "misc") == 0) {
      return typed.misc.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Resulting)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id1' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'flight_id2' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "flight_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'flight_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'flight_name' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "x") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'x' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "y") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'y' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "height") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'height' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "more") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'more' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'more' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "misc") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'misc' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'misc' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Resulting");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_id1") == 0) {
      return make_field_cmp(&T::flight_id1, next);
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return make_field_cmp(&T::flight_id2, next);
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return make_field_cmp(&T::flight_name, next);
    }
    if (std::strcmp(field, "x") == 0) {
      return make_field_cmp(&T::x, next);
    }
    if (std::strcmp(field, "y") == 0) {
      return make_field_cmp(&T::y, next);
    }
    if (std::strcmp(field, "height") == 0) {
      return make_field_cmp(&T::height, next);
    }
    if (std::strcmp(field, "more") == 0) {
      return make_field_cmp(&T::more, next);
    }
    if (std::strcmp(field, "misc") == 0) {
      return make_field_cmp(&T::misc, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Resulting)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_id1", "flight_id2", "flight_name", "x", "y", "height", "more", "misc", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_id1") == 0) {
      return &static_cast<const T*>(stru)->flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return &static_cast<const T*>(stru)->flight_id2;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return &static_cast<const T*>(stru)->flight_name;
    }
    if (std::strcmp(field, "x") == 0) {
      return &static_cast<const T*>(stru)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return &static_cast<const T*>(stru)->y;
    }
    if (std::strcmp(field, "height") == 0) {
      return &static_cast<const T*>(stru)->height;
    }
    if (std::strcmp(field, "more") == 0) {
      return &static_cast<const T*>(stru)->more;
    }
    if (std::strcmp(field, "misc") == 0) {
      return &static_cast<const T*>(stru)->misc;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Resulting)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_id1") == 0) {
      static_cast<T*>(lhs)->flight_id1 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      static_cast<T*>(lhs)->flight_id2 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      static_cast<T*>(lhs)->flight_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "x") == 0) {
      static_cast<T*>(lhs)->x = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "y") == 0) {
      static_cast<T*>(lhs)->y = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "height") == 0) {
      static_cast<T*>(lhs)->height = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "more") == 0) {
      static_cast<T*>(lhs)->more = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "misc") == 0) {
      static_cast<T*>(lhs)->misc = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Resulting)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_id1") == 0) {
      return static_cast<const T*>(lhs)->flight_id1 == static_cast<const T*>(rhs)->flight_id1;
    }
    if (std::strcmp(field, "flight_id2") == 0) {
      return static_cast<const T*>(lhs)->flight_id2 == static_cast<const T*>(rhs)->flight_id2;
    }
    if (std::strcmp(field, "flight_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->flight_name.in(), static_cast<const T*>(rhs)->flight_name.in());
    }
    if (std::strcmp(field, "x") == 0) {
      return static_cast<const T*>(lhs)->x == static_cast<const T*>(rhs)->x;
    }
    if (std::strcmp(field, "y") == 0) {
      return static_cast<const T*>(lhs)->y == static_cast<const T*>(rhs)->y;
    }
    if (std::strcmp(field, "height") == 0) {
      return static_cast<const T*>(lhs)->height == static_cast<const T*>(rhs)->height;
    }
    if (std::strcmp(field, "more") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->more.in(), static_cast<const T*>(rhs)->more.in());
    }
    if (std::strcmp(field, "misc") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->misc.in(), static_cast<const T*>(rhs)->misc.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Resulting)");
  }
};

template<>
const MetaStruct& getMetaStruct<Resulting>()
{
  static MetaStructImpl<Resulting> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Resulting*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Resulting>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Resulting */
