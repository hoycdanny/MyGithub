/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Messenger.idl */
#include "MessengerTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/CorbaSeq/CharSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/WCharSeqTypeSupportImpl.h"
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/CorbaSeq/CharSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/StringSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/WCharSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/WStringSeqTypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Messenger */



/* Begin TYPEDEF: BoundedCharSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger::BoundedCharSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_char();
}

bool operator<<(Serializer& strm, const Messenger::BoundedCharSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_char_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Messenger::BoundedCharSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_char_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Messenger::BoundedCharSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  ser >> length;
  ser.skip(length, 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BoundedCharSeq */


/* Begin TYPEDEF: BoundedWCharSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger::BoundedWCharSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * max_marshaled_size_wchar();
}

bool operator<<(Serializer& strm, const Messenger::BoundedWCharSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_wchar_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Messenger::BoundedWCharSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > seq.maximum()) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_wchar_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Messenger::BoundedWCharSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  ser >> length;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    ACE_CDR::Octet o;
    ser >> ACE_InputCDR::to_octet(o);
    ser.skip(o);
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BoundedWCharSeq */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.ch));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_wchar(stru.wch));
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.str.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.wstr.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
  gen_find_size(stru.char_seq, size, padding);
  gen_find_size(stru.wchar_seq, size, padding);
  gen_find_size(stru.string_seq, size, padding);
  gen_find_size(stru.wstring_seq, size, padding);
  gen_find_size(stru.bounded_char_seq, size, padding);
  gen_find_size(stru.bounded_wchar_seq, size, padding);
}

bool operator<<(Serializer& strm, const Messenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.subject_id)
    && (strm << stru.count)
    && (strm << ACE_OutputCDR::from_char(stru.ch))
    && (strm << ACE_OutputCDR::from_wchar(stru.wch))
    && (strm << stru.str.in())
    && (strm << stru.wstr.in())
    && (strm << stru.char_seq)
    && (strm << stru.wchar_seq)
    && (strm << stru.string_seq)
    && (strm << stru.wstring_seq)
    && (strm << stru.bounded_char_seq)
    && (strm << stru.bounded_wchar_seq);
}

bool operator>>(Serializer& strm, Messenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.subject_id)
    && (strm >> stru.count)
    && (strm >> ACE_InputCDR::to_char(stru.ch))
    && (strm >> ACE_InputCDR::to_wchar(stru.wch))
    && (strm >> stru.str.out())
    && (strm >> stru.wstr.out())
    && (strm >> stru.char_seq)
    && (strm >> stru.wchar_seq)
    && (strm >> stru.string_seq)
    && (strm >> stru.wstring_seq)
    && (strm >> stru.bounded_char_seq)
    && (strm >> stru.bounded_wchar_seq);
}

size_t gen_max_marshaled_size(const Messenger::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Messenger::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.subject_id);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.subject_id);
}

bool operator>>(Serializer& strm, KeyOnly<Messenger::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger::Message> : MetaStruct {
  typedef Messenger::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger::Message& typed = *static_cast<const Messenger::Message*>(stru);
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    if (std::strcmp(field, "ch") == 0) {
      return typed.ch;
    }
    if (std::strcmp(field, "wch") == 0) {
      return typed.wch;
    }
    if (std::strcmp(field, "str") == 0) {
      return typed.str.in();
    }
    if (std::strcmp(field, "wstr") == 0) {
      return typed.wstr.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "ch") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'ch' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "wch") == 0) {
      ACE_CDR::WChar val;
      if (!(ser >> ACE_InputCDR::to_wchar(val))) {
        throw std::runtime_error("Field 'wch' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::Octet len;
      if (!(ser >> ACE_InputCDR::to_octet(len))) {
        throw std::runtime_error("WChar 'wch' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "str") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'str' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'str' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "wstr") == 0) {
      TAO::WString_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'wstr' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'wstr' length could not be deserialized");
      }
      ser.skip(len);
    }
    gen_skip_over(ser, static_cast<CORBA::CharSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::WCharSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::StringSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::WStringSeq*>(0));
    gen_skip_over(ser, static_cast<Messenger::BoundedCharSeq*>(0));
    gen_skip_over(ser, static_cast<Messenger::BoundedWCharSeq*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    if (std::strcmp(field, "ch") == 0) {
      return make_field_cmp(&T::ch, next);
    }
    if (std::strcmp(field, "wch") == 0) {
      return make_field_cmp(&T::wch, next);
    }
    if (std::strcmp(field, "str") == 0) {
      return make_field_cmp(&T::str, next);
    }
    if (std::strcmp(field, "wstr") == 0) {
      return make_field_cmp(&T::wstr, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"subject_id", "count", "ch", "wch", "str", "wstr", "char_seq", "wchar_seq", "string_seq", "wstring_seq", "bounded_char_seq", "bounded_wchar_seq", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    if (std::strcmp(field, "ch") == 0) {
      return &static_cast<const T*>(stru)->ch;
    }
    if (std::strcmp(field, "wch") == 0) {
      return &static_cast<const T*>(stru)->wch;
    }
    if (std::strcmp(field, "str") == 0) {
      return &static_cast<const T*>(stru)->str;
    }
    if (std::strcmp(field, "wstr") == 0) {
      return &static_cast<const T*>(stru)->wstr;
    }
    if (std::strcmp(field, "char_seq") == 0) {
      return &static_cast<const T*>(stru)->char_seq;
    }
    if (std::strcmp(field, "wchar_seq") == 0) {
      return &static_cast<const T*>(stru)->wchar_seq;
    }
    if (std::strcmp(field, "string_seq") == 0) {
      return &static_cast<const T*>(stru)->string_seq;
    }
    if (std::strcmp(field, "wstring_seq") == 0) {
      return &static_cast<const T*>(stru)->wstring_seq;
    }
    if (std::strcmp(field, "bounded_char_seq") == 0) {
      return &static_cast<const T*>(stru)->bounded_char_seq;
    }
    if (std::strcmp(field, "bounded_wchar_seq") == 0) {
      return &static_cast<const T*>(stru)->bounded_wchar_seq;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ch") == 0) {
      static_cast<T*>(lhs)->ch = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wch") == 0) {
      static_cast<T*>(lhs)->wch = *static_cast<const CORBA::WChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "str") == 0) {
      static_cast<T*>(lhs)->str = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wstr") == 0) {
      static_cast<T*>(lhs)->wstr = *static_cast<const TAO::WString_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "char_seq") == 0) {
      static_cast<T*>(lhs)->char_seq = *static_cast<const CORBA::CharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wchar_seq") == 0) {
      static_cast<T*>(lhs)->wchar_seq = *static_cast<const CORBA::WCharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "string_seq") == 0) {
      static_cast<T*>(lhs)->string_seq = *static_cast<const CORBA::StringSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wstring_seq") == 0) {
      static_cast<T*>(lhs)->wstring_seq = *static_cast<const CORBA::WStringSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "bounded_char_seq") == 0) {
      static_cast<T*>(lhs)->bounded_char_seq = *static_cast<const Messenger::BoundedCharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "bounded_wchar_seq") == 0) {
      static_cast<T*>(lhs)->bounded_wchar_seq = *static_cast<const Messenger::BoundedWCharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    if (std::strcmp(field, "ch") == 0) {
      return static_cast<const T*>(lhs)->ch == static_cast<const T*>(rhs)->ch;
    }
    if (std::strcmp(field, "wch") == 0) {
      return static_cast<const T*>(lhs)->wch == static_cast<const T*>(rhs)->wch;
    }
    if (std::strcmp(field, "str") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->str.in(), static_cast<const T*>(rhs)->str.in());
    }
    if (std::strcmp(field, "wstr") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->wstr.in(), static_cast<const T*>(rhs)->wstr.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger::Message>()
{
  static MetaStructImpl<Messenger::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger */
