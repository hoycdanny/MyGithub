/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Foo4Def.idl */
#ifndef OPENDDS_IDL_GENERATED_FOO4DEFTYPESUPPORTIMPL_H_S6N2CB
#define OPENDDS_IDL_GENERATED_FOO4DEFTYPESUPPORTIMPL_H_S6N2CB
#include "Foo4DefC.h"
#include "dds/DCPS/Definitions.h"
#include "Foo4DefTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "tao/FloatSeqC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: T4 */



/* Begin TYPEDEF: FloatSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

ManyFooLib_Export
void gen_find_size(const T4::FloatSeq& seq, size_t& size, size_t& padding);

ManyFooLib_Export
bool operator<<(Serializer& strm, const T4::FloatSeq& seq);

ManyFooLib_Export
bool operator>>(Serializer& strm, T4::FloatSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

ManyFooLib_Export
void gen_skip_over(Serializer& ser, T4::FloatSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FloatSeq */


/* Begin STRUCT: Foo4 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

ManyFooLib_Export
void gen_find_size(const T4::Foo4& stru, size_t& size, size_t& padding);

ManyFooLib_Export
bool operator<<(Serializer& strm, const T4::Foo4& stru);

ManyFooLib_Export
bool operator>>(Serializer& strm, T4::Foo4& stru);

ManyFooLib_Export
size_t gen_max_marshaled_size(const T4::Foo4& stru, bool align);

ManyFooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const T4::Foo4> stru, bool align);

ManyFooLib_Export
void gen_find_size(KeyOnly<const T4::Foo4> stru, size_t& size, size_t& padding);

ManyFooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const T4::Foo4> stru);

ManyFooLib_Export
bool operator>>(Serializer& strm, KeyOnly<T4::Foo4> stru);

template <>
struct MarshalTraits<T4::Foo4> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace T4 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct ManyFooLib_Export Foo4_OpenDDS_KeyLessThan {
  bool operator()(const T4::Foo4& v1, const T4::Foo4& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.key < v2.key) return true;
    if (v2.key < v1.key) return false;
    return false;
  }
};
}


namespace T4 {
class Foo4TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<T4::Foo4> {
  typedef T4::Foo4 MessageType;
  typedef T4::Foo4Seq MessageSequenceType;
  typedef T4::Foo4TypeSupport TypeSupportType;
  typedef T4::Foo4TypeSupportImpl TypeSupportTypeImpl;
  typedef T4::Foo4DataWriter DataWriterType;
  typedef T4::Foo4DataReader DataReaderType;
  typedef T4::Foo4_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "T4::Foo4"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace T4 {
class ManyFooLib_Export Foo4TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Foo4TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Foo4> TraitsType;
  typedef Foo4TypeSupport TypeSupportType;
  typedef Foo4TypeSupport::_var_type _var_type;
  typedef Foo4TypeSupport::_ptr_type _ptr_type;

  Foo4TypeSupportImpl() {}
  virtual ~Foo4TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Foo4TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
ManyFooLib_Export
const MetaStruct& getMetaStruct<T4::Foo4>();
ManyFooLib_Export
void gen_skip_over(Serializer& ser, T4::Foo4*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Foo4 */

/* End MODULE: T4 */
#endif /* OPENDDS_IDL_GENERATED_FOO4DEFTYPESUPPORTIMPL_H_S6N2CB */
