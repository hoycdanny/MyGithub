// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "MessengerC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "MessengerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

Messenger::MyUnion::MyUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = Messenger::other1;
}

Messenger::MyUnion::MyUnion (const ::Messenger::MyUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Messenger::b:
    {
      this->u_.u_b_ = u.u_.u_b_;
    }
    break;
    case Messenger::s:
    {
      this->u_.u_s_ = u.u_.u_s_;
    }
    break;
    case Messenger::d:
    {
      this->u_.u_d_ = u.u_.u_d_;
    }
    break;
    default:
    {
      this->u_.u_f_ = u.u_.u_f_;
    }
    break;
  }
}

Messenger::MyUnion::~MyUnion (void)
{
  // Finalize.
  this->_reset ();
}

Messenger::MyUnion &
Messenger::MyUnion::operator= (const ::Messenger::MyUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Messenger::b:
    {
      this->u_.u_b_ = u.u_.u_b_;
    }
    break;
    case Messenger::s:
    {
      this->u_.u_s_ = u.u_.u_s_;
    }
    break;
    case Messenger::d:
    {
      this->u_.u_d_ = u.u_.u_d_;
    }
    break;
    default:
    {
      this->u_.u_f_ = u.u_.u_f_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Messenger::MyUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case Messenger::b:
      
    break;
    
    case Messenger::s:
      
    break;
    
    case Messenger::d:
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Messenger::Enums_slice *
Messenger::Enums_dup (const Messenger::Enums_slice *_tao_src_array)
{
  Messenger::Enums_slice *_tao_dup_array =
    Messenger::Enums_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Messenger::Enums_slice *> (0);
    }
  
  Messenger::Enums_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Messenger::Enums_slice *
Messenger::Enums_alloc (void)
{
  Messenger::Enums_slice *retval = 0;
  ACE_NEW_RETURN (retval, Messenger::MyEnum[3], 0);
  return retval;
}

void
Messenger::Enums_free (
    Messenger::Enums_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Messenger::Enums_copy (
    Messenger::Enums_slice * _tao_to,
    const Messenger::Enums_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_MESSENGER_ENUMSEQ_CS_)
#define _MESSENGER_ENUMSEQ_CS_

Messenger::EnumSeq::EnumSeq (void)
{}

Messenger::EnumSeq::EnumSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        AnEnum
      > (max)
{}

Messenger::EnumSeq::EnumSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Messenger::AnEnum * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        AnEnum
      >
    (max, length, buffer, release)
{}

Messenger::EnumSeq::EnumSeq (
    const EnumSeq &seq)
  : ::TAO::unbounded_value_sequence<
        AnEnum
      > (seq)
{}

Messenger::EnumSeq::~EnumSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Messenger::MyEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Messenger::MyEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Messenger::MyEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger::MyUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Messenger::b:
      {
        result = strm << ::ACE_OutputCDR::from_boolean (_tao_union.u_b ());
      }
      break;
    case Messenger::s:
      {
        result = strm << _tao_union.u_s ();
      }
      break;
    case Messenger::d:
      {
        result = strm << _tao_union.u_d ();
      }
      break;
    default:
      {
        result = strm << _tao_union.u_f ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger::MyUnion &_tao_union
  )
{
  Messenger::MyEnum _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Messenger::b:
      {
        ::CORBA::Boolean _tao_union_tmp;
        ::ACE_InputCDR::to_boolean _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.u_b (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Messenger::s:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_s (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case Messenger::d:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_d (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Float _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_f (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger::Enums_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger::Enums_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Messenger_EnumSeq_CPP_
#define _TAO_CDR_OP_Messenger_EnumSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger::EnumSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger::EnumSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Messenger_EnumSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger::Message &_tao_aggregate)
{
  Messenger::Enums_forany _tao_aggregate_e
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger::Enums_slice*) (
      #else
      (const_cast<
          Messenger::Enums_slice*> (
      #endif
          _tao_aggregate.e
        )
    );
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id.in ()) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count) &&
    (strm << _tao_aggregate_e) &&
    (strm << _tao_aggregate.u) &&
    (strm << _tao_aggregate.seq);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger::Message &_tao_aggregate)
{
  Messenger::Enums_forany _tao_aggregate_e
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger::Enums_slice*) (
      #else
      (const_cast<
          Messenger::Enums_slice*> (
      #endif
          _tao_aggregate.e
        )
    );
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id.out ()) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count) &&
    (strm >> _tao_aggregate_e) &&
    (strm >> _tao_aggregate.u) &&
    (strm >> _tao_aggregate.seq);
}

TAO_END_VERSIONED_NAMESPACE_DECL



