/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Simple.idl */
#ifndef OPENDDS_IDL_GENERATED_SIMPLETYPESUPPORTIMPL_H_VP2TAY
#define OPENDDS_IDL_GENERATED_SIMPLETYPESUPPORTIMPL_H_VP2TAY
#include "SimpleC.h"
#include "dds/DCPS/Definitions.h"
#include "SimpleTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "tao/LongSeqC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Test */



/* Begin STRUCT: Simple */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Test::Simple& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Test::Simple& stru);

bool operator>>(Serializer& strm, Test::Simple& stru);

size_t gen_max_marshaled_size(const Test::Simple& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Test::Simple> stru, bool align);

void gen_find_size(KeyOnly<const Test::Simple> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Test::Simple> stru);

bool operator>>(Serializer& strm, KeyOnly<Test::Simple> stru);

template <>
struct MarshalTraits<Test::Simple> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Simple_OpenDDS_KeyLessThan {
  bool operator()(const Test::Simple& v1, const Test::Simple& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.key < v2.key) return true;
    if (v2.key < v1.key) return false;
    return false;
  }
};
}


namespace Test {
class SimpleTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Test::Simple> {
  typedef Test::Simple MessageType;
  typedef Test::SimpleSeq MessageSequenceType;
  typedef Test::SimpleTypeSupport TypeSupportType;
  typedef Test::SimpleTypeSupportImpl TypeSupportTypeImpl;
  typedef Test::SimpleDataWriter DataWriterType;
  typedef Test::SimpleDataReader DataReaderType;
  typedef Test::Simple_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Test::Simple"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Test {
class  SimpleTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<SimpleTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Simple> TraitsType;
  typedef SimpleTypeSupport TypeSupportType;
  typedef SimpleTypeSupport::_var_type _var_type;
  typedef SimpleTypeSupport::_ptr_type _ptr_type;

  SimpleTypeSupportImpl() {}
  virtual ~SimpleTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static SimpleTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<Test::Simple>();
void gen_skip_over(Serializer& ser, Test::Simple*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Simple */

/* End MODULE: Test */
#endif /* OPENDDS_IDL_GENERATED_SIMPLETYPESUPPORTIMPL_H_VP2TAY */
