// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "KeyTestC.h"
#include "tao/CDR.h"

#if !defined (__ACE_INLINE__)
#include "KeyTestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Messenger5::ResponseArray_slice *
Messenger5::ResponseArray_dup (const Messenger5::ResponseArray_slice *_tao_src_array)
{
  Messenger5::ResponseArray_slice *_tao_dup_array =
    Messenger5::ResponseArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Messenger5::ResponseArray_slice *> (0);
    }
  
  Messenger5::ResponseArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Messenger5::ResponseArray_slice *
Messenger5::ResponseArray_alloc (void)
{
  Messenger5::ResponseArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], 0);
  return retval;
}

void
Messenger5::ResponseArray_free (
    Messenger5::ResponseArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Messenger5::ResponseArray_copy (
    Messenger5::ResponseArray_slice * _tao_to,
    const Messenger5::ResponseArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Messenger6::ResponseArray_slice *
Messenger6::ResponseArray_dup (const Messenger6::ResponseArray_slice *_tao_src_array)
{
  Messenger6::ResponseArray_slice *_tao_dup_array =
    Messenger6::ResponseArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Messenger6::ResponseArray_slice *> (0);
    }
  
  Messenger6::ResponseArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Messenger6::ResponseArray_slice *
Messenger6::ResponseArray_alloc (void)
{
  Messenger6::ResponseArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], 0);
  return retval;
}

void
Messenger6::ResponseArray_free (
    Messenger6::ResponseArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Messenger6::ResponseArray_copy (
    Messenger6::ResponseArray_slice * _tao_to,
    const Messenger6::ResponseArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger1::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger1::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger2::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger2::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger3::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger3::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Messenger4::EnumType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Messenger4::EnumType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Messenger4::EnumType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger4::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.short_field) &&
    (strm << _tao_aggregate.unsigned_short_field) &&
    (strm << _tao_aggregate.long_field) &&
    (strm << _tao_aggregate.unsigned_long_field) &&
    (strm << _tao_aggregate.long_long_field) &&
    (strm << _tao_aggregate.unsigned_long_long_field) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.char_field)) &&
    (strm << ::ACE_OutputCDR::from_wchar (_tao_aggregate.wchar_field)) &&
    (strm << _tao_aggregate.float_field) &&
    (strm << _tao_aggregate.double_field) &&
    (strm << _tao_aggregate.long_double_field) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.boolean_field)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.octet_field)) &&
    (strm << _tao_aggregate.enum_field) &&
    (strm << _tao_aggregate.string_field.in ()) &&
    (strm << _tao_aggregate.wstring_field.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger4::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.short_field) &&
    (strm >> _tao_aggregate.unsigned_short_field) &&
    (strm >> _tao_aggregate.long_field) &&
    (strm >> _tao_aggregate.unsigned_long_field) &&
    (strm >> _tao_aggregate.long_long_field) &&
    (strm >> _tao_aggregate.unsigned_long_long_field) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.char_field)) &&
    (strm >> ::ACE_InputCDR::to_wchar (_tao_aggregate.wchar_field)) &&
    (strm >> _tao_aggregate.float_field) &&
    (strm >> _tao_aggregate.double_field) &&
    (strm >> _tao_aggregate.long_double_field) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.boolean_field)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.octet_field)) &&
    (strm >> _tao_aggregate.enum_field) &&
    (strm >> _tao_aggregate.string_field.out ()) &&
    (strm >> _tao_aggregate.wstring_field.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger4::NestedMessage &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.mess);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger4::NestedMessage &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.mess);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger5::ResponseArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger5::ResponseArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger5::HeaderType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.wsubject.in ()) &&
    (strm << _tao_aggregate.subject_id);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger5::HeaderType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.wsubject.out ()) &&
    (strm >> _tao_aggregate.subject_id);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger5::Message &_tao_aggregate)
{
  Messenger5::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger5::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger5::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm << _tao_aggregate.header) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count) &&
    (strm << _tao_aggregate_responses);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger5::Message &_tao_aggregate)
{
  Messenger5::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger5::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger5::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm >> _tao_aggregate.header) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count) &&
    (strm >> _tao_aggregate_responses);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger6::ResponseArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger6::ResponseArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger6::HeaderType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger6::HeaderType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger6::PayloadType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.header) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger6::PayloadType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.header) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger6::Message &_tao_aggregate)
{
  Messenger6::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger6::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger6::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm << _tao_aggregate.payload) &&
    (strm << _tao_aggregate_responses);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger6::Message &_tao_aggregate)
{
  Messenger6::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger6::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger6::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm >> _tao_aggregate.payload) &&
    (strm >> _tao_aggregate_responses);
}

TAO_END_VERSIONED_NAMESPACE_DECL



