// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_BOUNDTESTC_GC2QPC_H_
#define _TAO_IDL_BOUNDTESTC_GC2QPC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "KeyTest_export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/StringSeqC.h"
#include "tao/FloatSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO KeyTest_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Bound
{

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:47

  enum EnumType
  {
    FIRST,
    SECOND,
    THIRD
  };

  typedef EnumType &EnumType_out;

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct SimpleBoundedMessage;

  typedef
    ::TAO_Fixed_Var_T<
        SimpleBoundedMessage
      >
    SimpleBoundedMessage_var;

  typedef
    SimpleBoundedMessage &
    SimpleBoundedMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export SimpleBoundedMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SimpleBoundedMessage_var _var_type;
    typedef SimpleBoundedMessage_out _out_type;
    
    ::CORBA::Short short_field;
    ::CORBA::UShort unsigned_short_field;
    ::CORBA::Long long_field;
    ::CORBA::ULong unsigned_long_field;
    ::CORBA::LongLong long_long_field;
    ::CORBA::ULongLong unsigned_long_long_field;
    ::CORBA::Char char_field;
    ::CORBA::WChar wchar_field;
    ::CORBA::Float float_field;
    ::CORBA::Double double_field;
    ::CORBA::LongDouble long_double_field;
    ::CORBA::Boolean boolean_field;
    ::CORBA::Octet octet_field;
    Bound::EnumType enum_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct StringMessage;

  typedef
    ::TAO_Var_Var_T<
        StringMessage
      >
    StringMessage_var;

  typedef
    ::TAO_Out_T<
        StringMessage
      >
    StringMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export StringMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef StringMessage_var _var_type;
    typedef StringMessage_out _out_type;
    
    ::TAO::String_Manager string_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct WStringMessage;

  typedef
    ::TAO_Var_Var_T<
        WStringMessage
      >
    WStringMessage_var;

  typedef
    ::TAO_Out_T<
        WStringMessage
      >
    WStringMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export WStringMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef WStringMessage_var _var_type;
    typedef WStringMessage_out _out_type;
    
    ::TAO::WString_Manager wstring_field;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Short ShortArray[10];
  typedef ::CORBA::Short ShortArray_slice;
  struct ShortArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        ShortArray,
        ShortArray_slice,
        ShortArray_tag
      >
    ShortArray_var;

  typedef
    ShortArray
    ShortArray_out;

  typedef
    TAO_Array_Forany_T<
        ShortArray,
        ShortArray_slice,
        ShortArray_tag
      >
    ShortArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS ShortArray_slice *
  ShortArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  ShortArray_free (
      ShortArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS ShortArray_slice *
  ShortArray_dup (
      const ShortArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  ShortArray_copy (
      ShortArray_slice *_tao_to,
      const ShortArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::UShort UnsignedShortArray[10];
  typedef ::CORBA::UShort UnsignedShortArray_slice;
  struct UnsignedShortArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        UnsignedShortArray,
        UnsignedShortArray_slice,
        UnsignedShortArray_tag
      >
    UnsignedShortArray_var;

  typedef
    UnsignedShortArray
    UnsignedShortArray_out;

  typedef
    TAO_Array_Forany_T<
        UnsignedShortArray,
        UnsignedShortArray_slice,
        UnsignedShortArray_tag
      >
    UnsignedShortArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS UnsignedShortArray_slice *
  UnsignedShortArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  UnsignedShortArray_free (
      UnsignedShortArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS UnsignedShortArray_slice *
  UnsignedShortArray_dup (
      const UnsignedShortArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  UnsignedShortArray_copy (
      UnsignedShortArray_slice *_tao_to,
      const UnsignedShortArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Long LongArray[10];
  typedef ::CORBA::Long LongArray_slice;
  struct LongArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        LongArray,
        LongArray_slice,
        LongArray_tag
      >
    LongArray_var;

  typedef
    LongArray
    LongArray_out;

  typedef
    TAO_Array_Forany_T<
        LongArray,
        LongArray_slice,
        LongArray_tag
      >
    LongArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS LongArray_slice *
  LongArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  LongArray_free (
      LongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS LongArray_slice *
  LongArray_dup (
      const LongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  LongArray_copy (
      LongArray_slice *_tao_to,
      const LongArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::ULong UnsignedLongArray[10];
  typedef ::CORBA::ULong UnsignedLongArray_slice;
  struct UnsignedLongArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        UnsignedLongArray,
        UnsignedLongArray_slice,
        UnsignedLongArray_tag
      >
    UnsignedLongArray_var;

  typedef
    UnsignedLongArray
    UnsignedLongArray_out;

  typedef
    TAO_Array_Forany_T<
        UnsignedLongArray,
        UnsignedLongArray_slice,
        UnsignedLongArray_tag
      >
    UnsignedLongArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS UnsignedLongArray_slice *
  UnsignedLongArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  UnsignedLongArray_free (
      UnsignedLongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS UnsignedLongArray_slice *
  UnsignedLongArray_dup (
      const UnsignedLongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  UnsignedLongArray_copy (
      UnsignedLongArray_slice *_tao_to,
      const UnsignedLongArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::LongLong LongLongArray[10];
  typedef ::CORBA::LongLong LongLongArray_slice;
  struct LongLongArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        LongLongArray,
        LongLongArray_slice,
        LongLongArray_tag
      >
    LongLongArray_var;

  typedef
    LongLongArray
    LongLongArray_out;

  typedef
    TAO_Array_Forany_T<
        LongLongArray,
        LongLongArray_slice,
        LongLongArray_tag
      >
    LongLongArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS LongLongArray_slice *
  LongLongArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  LongLongArray_free (
      LongLongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS LongLongArray_slice *
  LongLongArray_dup (
      const LongLongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  LongLongArray_copy (
      LongLongArray_slice *_tao_to,
      const LongLongArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::ULongLong UnsignedLongLongArray[10];
  typedef ::CORBA::ULongLong UnsignedLongLongArray_slice;
  struct UnsignedLongLongArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        UnsignedLongLongArray,
        UnsignedLongLongArray_slice,
        UnsignedLongLongArray_tag
      >
    UnsignedLongLongArray_var;

  typedef
    UnsignedLongLongArray
    UnsignedLongLongArray_out;

  typedef
    TAO_Array_Forany_T<
        UnsignedLongLongArray,
        UnsignedLongLongArray_slice,
        UnsignedLongLongArray_tag
      >
    UnsignedLongLongArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS UnsignedLongLongArray_slice *
  UnsignedLongLongArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  UnsignedLongLongArray_free (
      UnsignedLongLongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS UnsignedLongLongArray_slice *
  UnsignedLongLongArray_dup (
      const UnsignedLongLongArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  UnsignedLongLongArray_copy (
      UnsignedLongLongArray_slice *_tao_to,
      const UnsignedLongLongArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Char CharArray[10];
  typedef ::CORBA::Char CharArray_slice;
  struct CharArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        CharArray,
        CharArray_slice,
        CharArray_tag
      >
    CharArray_var;

  typedef
    CharArray
    CharArray_out;

  typedef
    TAO_Array_Forany_T<
        CharArray,
        CharArray_slice,
        CharArray_tag
      >
    CharArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS CharArray_slice *
  CharArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  CharArray_free (
      CharArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS CharArray_slice *
  CharArray_dup (
      const CharArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  CharArray_copy (
      CharArray_slice *_tao_to,
      const CharArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::WChar WCharArray[10];
  typedef ::CORBA::WChar WCharArray_slice;
  struct WCharArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        WCharArray,
        WCharArray_slice,
        WCharArray_tag
      >
    WCharArray_var;

  typedef
    WCharArray
    WCharArray_out;

  typedef
    TAO_Array_Forany_T<
        WCharArray,
        WCharArray_slice,
        WCharArray_tag
      >
    WCharArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS WCharArray_slice *
  WCharArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  WCharArray_free (
      WCharArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS WCharArray_slice *
  WCharArray_dup (
      const WCharArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  WCharArray_copy (
      WCharArray_slice *_tao_to,
      const WCharArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Float FloatArray[10];
  typedef ::CORBA::Float FloatArray_slice;
  struct FloatArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        FloatArray,
        FloatArray_slice,
        FloatArray_tag
      >
    FloatArray_var;

  typedef
    FloatArray
    FloatArray_out;

  typedef
    TAO_Array_Forany_T<
        FloatArray,
        FloatArray_slice,
        FloatArray_tag
      >
    FloatArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS FloatArray_slice *
  FloatArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  FloatArray_free (
      FloatArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS FloatArray_slice *
  FloatArray_dup (
      const FloatArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  FloatArray_copy (
      FloatArray_slice *_tao_to,
      const FloatArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Double DoubleArray[10];
  typedef ::CORBA::Double DoubleArray_slice;
  struct DoubleArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        DoubleArray,
        DoubleArray_slice,
        DoubleArray_tag
      >
    DoubleArray_var;

  typedef
    DoubleArray
    DoubleArray_out;

  typedef
    TAO_Array_Forany_T<
        DoubleArray,
        DoubleArray_slice,
        DoubleArray_tag
      >
    DoubleArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS DoubleArray_slice *
  DoubleArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  DoubleArray_free (
      DoubleArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS DoubleArray_slice *
  DoubleArray_dup (
      const DoubleArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  DoubleArray_copy (
      DoubleArray_slice *_tao_to,
      const DoubleArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::LongDouble LongDoubleArray[10];
  typedef ::CORBA::LongDouble LongDoubleArray_slice;
  struct LongDoubleArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        LongDoubleArray,
        LongDoubleArray_slice,
        LongDoubleArray_tag
      >
    LongDoubleArray_var;

  typedef
    LongDoubleArray
    LongDoubleArray_out;

  typedef
    TAO_Array_Forany_T<
        LongDoubleArray,
        LongDoubleArray_slice,
        LongDoubleArray_tag
      >
    LongDoubleArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS LongDoubleArray_slice *
  LongDoubleArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  LongDoubleArray_free (
      LongDoubleArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS LongDoubleArray_slice *
  LongDoubleArray_dup (
      const LongDoubleArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  LongDoubleArray_copy (
      LongDoubleArray_slice *_tao_to,
      const LongDoubleArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Boolean BooleanArray[10];
  typedef ::CORBA::Boolean BooleanArray_slice;
  struct BooleanArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        BooleanArray,
        BooleanArray_slice,
        BooleanArray_tag
      >
    BooleanArray_var;

  typedef
    BooleanArray
    BooleanArray_out;

  typedef
    TAO_Array_Forany_T<
        BooleanArray,
        BooleanArray_slice,
        BooleanArray_tag
      >
    BooleanArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS BooleanArray_slice *
  BooleanArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  BooleanArray_free (
      BooleanArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS BooleanArray_slice *
  BooleanArray_dup (
      const BooleanArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  BooleanArray_copy (
      BooleanArray_slice *_tao_to,
      const BooleanArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Octet OctetArray[10];
  typedef ::CORBA::Octet OctetArray_slice;
  struct OctetArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        OctetArray,
        OctetArray_slice,
        OctetArray_tag
      >
    OctetArray_var;

  typedef
    OctetArray
    OctetArray_out;

  typedef
    TAO_Array_Forany_T<
        OctetArray,
        OctetArray_slice,
        OctetArray_tag
      >
    OctetArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS OctetArray_slice *
  OctetArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  OctetArray_free (
      OctetArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS OctetArray_slice *
  OctetArray_dup (
      const OctetArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  OctetArray_copy (
      OctetArray_slice *_tao_to,
      const OctetArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef EnumType EnumTypeArray[10];
  typedef EnumType EnumTypeArray_slice;
  struct EnumTypeArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        EnumTypeArray,
        EnumTypeArray_slice,
        EnumTypeArray_tag
      >
    EnumTypeArray_var;

  typedef
    EnumTypeArray
    EnumTypeArray_out;

  typedef
    TAO_Array_Forany_T<
        EnumTypeArray,
        EnumTypeArray_slice,
        EnumTypeArray_tag
      >
    EnumTypeArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS EnumTypeArray_slice *
  EnumTypeArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  EnumTypeArray_free (
      EnumTypeArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS EnumTypeArray_slice *
  EnumTypeArray_dup (
      const EnumTypeArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  EnumTypeArray_copy (
      EnumTypeArray_slice *_tao_to,
      const EnumTypeArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct SimpleBoundedArrayMessage;

  typedef
    ::TAO_Fixed_Var_T<
        SimpleBoundedArrayMessage
      >
    SimpleBoundedArrayMessage_var;

  typedef
    SimpleBoundedArrayMessage &
    SimpleBoundedArrayMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export SimpleBoundedArrayMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef SimpleBoundedArrayMessage_var _var_type;
    typedef SimpleBoundedArrayMessage_out _out_type;
    
    Bound::ShortArray short_array;
    Bound::UnsignedShortArray unsigned_short_array;
    Bound::LongArray long_array;
    Bound::UnsignedLongArray unsigned_long_array;
    Bound::LongLongArray long_long_array;
    Bound::UnsignedLongLongArray unsigned_long_long_array;
    Bound::CharArray char_array;
    Bound::WCharArray wchar_array;
    Bound::FloatArray float_array;
    Bound::DoubleArray double_array;
    Bound::LongDoubleArray long_double_array;
    Bound::BooleanArray boolean_array;
    Bound::OctetArray octet_array;
    Bound::EnumTypeArray enum_array;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::TAO::String_Manager StringArray[10];
  typedef ::TAO::String_Manager StringArray_slice;
  struct StringArray_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        StringArray,
        StringArray_slice,
        StringArray_tag
      >
    StringArray_var;

  typedef
    TAO_Array_Out_T<
        StringArray,
        StringArray_var,
        StringArray_slice,
        StringArray_tag
      >
    StringArray_out;

  typedef
    TAO_Array_Forany_T<
        StringArray,
        StringArray_slice,
        StringArray_tag
      >
    StringArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS StringArray_slice *
  StringArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  StringArray_free (
      StringArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS StringArray_slice *
  StringArray_dup (
      const StringArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  StringArray_copy (
      StringArray_slice *_tao_to,
      const StringArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct StringArrayMessage;

  typedef
    ::TAO_Var_Var_T<
        StringArrayMessage
      >
    StringArrayMessage_var;

  typedef
    ::TAO_Out_T<
        StringArrayMessage
      >
    StringArrayMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export StringArrayMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef StringArrayMessage_var _var_type;
    typedef StringArrayMessage_out _out_type;
    
    Bound::StringArray string_array;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::TAO::WString_Manager WStringArray[10];
  typedef ::TAO::WString_Manager WStringArray_slice;
  struct WStringArray_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        WStringArray,
        WStringArray_slice,
        WStringArray_tag
      >
    WStringArray_var;

  typedef
    TAO_Array_Out_T<
        WStringArray,
        WStringArray_var,
        WStringArray_slice,
        WStringArray_tag
      >
    WStringArray_out;

  typedef
    TAO_Array_Forany_T<
        WStringArray,
        WStringArray_slice,
        WStringArray_tag
      >
    WStringArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS WStringArray_slice *
  WStringArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  WStringArray_free (
      WStringArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS WStringArray_slice *
  WStringArray_dup (
      const WStringArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  WStringArray_copy (
      WStringArray_slice *_tao_to,
      const WStringArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct WStringArrayMessage;

  typedef
    ::TAO_Var_Var_T<
        WStringArrayMessage
      >
    WStringArrayMessage_var;

  typedef
    ::TAO_Out_T<
        WStringArrayMessage
      >
    WStringArrayMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export WStringArrayMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef WStringArrayMessage_var _var_type;
    typedef WStringArrayMessage_out _out_type;
    
    Bound::WStringArray wstring_array;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct Nest1;

  typedef
    ::TAO_Fixed_Var_T<
        Nest1
      >
    Nest1_var;

  typedef
    Nest1 &
    Nest1_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export Nest1
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef Nest1_var _var_type;
    typedef Nest1_out _out_type;
    
    ::CORBA::Long long_field;
    ::CORBA::Short short_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct Nest2;

  typedef
    ::TAO_Fixed_Var_T<
        Nest2
      >
    Nest2_var;

  typedef
    Nest2 &
    Nest2_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export Nest2
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef Nest2_var _var_type;
    typedef Nest2_out _out_type;
    
    Bound::Nest1 nest1_field;
    ::CORBA::Float float_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct BoundedNestedMessage;

  typedef
    ::TAO_Fixed_Var_T<
        BoundedNestedMessage
      >
    BoundedNestedMessage_var;

  typedef
    BoundedNestedMessage &
    BoundedNestedMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export BoundedNestedMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef BoundedNestedMessage_var _var_type;
    typedef BoundedNestedMessage_out _out_type;
    
    Bound::Nest2 nest2_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct Nest3;

  typedef
    ::TAO_Var_Var_T<
        Nest3
      >
    Nest3_var;

  typedef
    ::TAO_Out_T<
        Nest3
      >
    Nest3_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export Nest3
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef Nest3_var _var_type;
    typedef Nest3_out _out_type;
    
    ::CORBA::Long long_field;
    ::CORBA::Short short_field;
    ::TAO::String_Manager string_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct Nest4;

  typedef
    ::TAO_Var_Var_T<
        Nest4
      >
    Nest4_var;

  typedef
    ::TAO_Out_T<
        Nest4
      >
    Nest4_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export Nest4
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef Nest4_var _var_type;
    typedef Nest4_out _out_type;
    
    Bound::Nest3 nest3_field;
    ::CORBA::Float float_field;
  };

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct UnboundedNestedMessage;

  typedef
    ::TAO_Var_Var_T<
        UnboundedNestedMessage
      >
    UnboundedNestedMessage_var;

  typedef
    ::TAO_Out_T<
        UnboundedNestedMessage
      >
    UnboundedNestedMessage_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct KeyTest_Export UnboundedNestedMessage
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef UnboundedNestedMessage_var _var_type;
    typedef UnboundedNestedMessage_out _out_type;
    
    Bound::Nest4 nest4_field;
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Bound

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:904

  template<>
  class Arg_Traits< ::Bound::EnumType>
    : public
        Basic_Arg_Traits_T<
            ::Bound::EnumType,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::SimpleBoundedMessage>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Bound::SimpleBoundedMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::StringMessage>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::StringMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::WStringMessage>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::WStringMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::ShortArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::ShortArray_var,
            ::Bound::ShortArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::UnsignedShortArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::UnsignedShortArray_var,
            ::Bound::UnsignedShortArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::LongArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::LongArray_var,
            ::Bound::LongArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::UnsignedLongArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::UnsignedLongArray_var,
            ::Bound::UnsignedLongArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::LongLongArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::LongLongArray_var,
            ::Bound::LongLongArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::UnsignedLongLongArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::UnsignedLongLongArray_var,
            ::Bound::UnsignedLongLongArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::CharArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::CharArray_var,
            ::Bound::CharArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::WCharArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::WCharArray_var,
            ::Bound::WCharArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::FloatArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::FloatArray_var,
            ::Bound::FloatArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::DoubleArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::DoubleArray_var,
            ::Bound::DoubleArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::LongDoubleArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::LongDoubleArray_var,
            ::Bound::LongDoubleArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::BooleanArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::BooleanArray_var,
            ::Bound::BooleanArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::OctetArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::OctetArray_var,
            ::Bound::OctetArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::EnumTypeArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Bound::EnumTypeArray_var,
            ::Bound::EnumTypeArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::SimpleBoundedArrayMessage>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Bound::SimpleBoundedArrayMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::StringArray_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Bound::StringArray_out,
            ::Bound::StringArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::StringArrayMessage>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::StringArrayMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Bound::WStringArray_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Bound::WStringArray_out,
            ::Bound::WStringArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::WStringArrayMessage>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::WStringArrayMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::Nest1>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Bound::Nest1,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::Nest2>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Bound::Nest2,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::BoundedNestedMessage>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Bound::BoundedNestedMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::Nest3>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::Nest3,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::Nest4>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::Nest4,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Bound::UnboundedNestedMessage>
    : public
        Var_Size_Arg_Traits_T<
            ::Bound::UnboundedNestedMessage,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::ShortArray_forany
    >
  {
    static void free (
        Bound::ShortArray_slice * _tao_slice);
    static Bound::ShortArray_slice * dup (
        const Bound::ShortArray_slice * _tao_slice);
    static void copy (
        Bound::ShortArray_slice * _tao_to,
        const Bound::ShortArray_slice * _tao_from);
    static Bound::ShortArray_slice * alloc (void);
    static void zero (
        Bound::ShortArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::UnsignedShortArray_forany
    >
  {
    static void free (
        Bound::UnsignedShortArray_slice * _tao_slice);
    static Bound::UnsignedShortArray_slice * dup (
        const Bound::UnsignedShortArray_slice * _tao_slice);
    static void copy (
        Bound::UnsignedShortArray_slice * _tao_to,
        const Bound::UnsignedShortArray_slice * _tao_from);
    static Bound::UnsignedShortArray_slice * alloc (void);
    static void zero (
        Bound::UnsignedShortArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::LongArray_forany
    >
  {
    static void free (
        Bound::LongArray_slice * _tao_slice);
    static Bound::LongArray_slice * dup (
        const Bound::LongArray_slice * _tao_slice);
    static void copy (
        Bound::LongArray_slice * _tao_to,
        const Bound::LongArray_slice * _tao_from);
    static Bound::LongArray_slice * alloc (void);
    static void zero (
        Bound::LongArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::UnsignedLongArray_forany
    >
  {
    static void free (
        Bound::UnsignedLongArray_slice * _tao_slice);
    static Bound::UnsignedLongArray_slice * dup (
        const Bound::UnsignedLongArray_slice * _tao_slice);
    static void copy (
        Bound::UnsignedLongArray_slice * _tao_to,
        const Bound::UnsignedLongArray_slice * _tao_from);
    static Bound::UnsignedLongArray_slice * alloc (void);
    static void zero (
        Bound::UnsignedLongArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::LongLongArray_forany
    >
  {
    static void free (
        Bound::LongLongArray_slice * _tao_slice);
    static Bound::LongLongArray_slice * dup (
        const Bound::LongLongArray_slice * _tao_slice);
    static void copy (
        Bound::LongLongArray_slice * _tao_to,
        const Bound::LongLongArray_slice * _tao_from);
    static Bound::LongLongArray_slice * alloc (void);
    static void zero (
        Bound::LongLongArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::UnsignedLongLongArray_forany
    >
  {
    static void free (
        Bound::UnsignedLongLongArray_slice * _tao_slice);
    static Bound::UnsignedLongLongArray_slice * dup (
        const Bound::UnsignedLongLongArray_slice * _tao_slice);
    static void copy (
        Bound::UnsignedLongLongArray_slice * _tao_to,
        const Bound::UnsignedLongLongArray_slice * _tao_from);
    static Bound::UnsignedLongLongArray_slice * alloc (void);
    static void zero (
        Bound::UnsignedLongLongArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::CharArray_forany
    >
  {
    static void free (
        Bound::CharArray_slice * _tao_slice);
    static Bound::CharArray_slice * dup (
        const Bound::CharArray_slice * _tao_slice);
    static void copy (
        Bound::CharArray_slice * _tao_to,
        const Bound::CharArray_slice * _tao_from);
    static Bound::CharArray_slice * alloc (void);
    static void zero (
        Bound::CharArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::WCharArray_forany
    >
  {
    static void free (
        Bound::WCharArray_slice * _tao_slice);
    static Bound::WCharArray_slice * dup (
        const Bound::WCharArray_slice * _tao_slice);
    static void copy (
        Bound::WCharArray_slice * _tao_to,
        const Bound::WCharArray_slice * _tao_from);
    static Bound::WCharArray_slice * alloc (void);
    static void zero (
        Bound::WCharArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::FloatArray_forany
    >
  {
    static void free (
        Bound::FloatArray_slice * _tao_slice);
    static Bound::FloatArray_slice * dup (
        const Bound::FloatArray_slice * _tao_slice);
    static void copy (
        Bound::FloatArray_slice * _tao_to,
        const Bound::FloatArray_slice * _tao_from);
    static Bound::FloatArray_slice * alloc (void);
    static void zero (
        Bound::FloatArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::DoubleArray_forany
    >
  {
    static void free (
        Bound::DoubleArray_slice * _tao_slice);
    static Bound::DoubleArray_slice * dup (
        const Bound::DoubleArray_slice * _tao_slice);
    static void copy (
        Bound::DoubleArray_slice * _tao_to,
        const Bound::DoubleArray_slice * _tao_from);
    static Bound::DoubleArray_slice * alloc (void);
    static void zero (
        Bound::DoubleArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::LongDoubleArray_forany
    >
  {
    static void free (
        Bound::LongDoubleArray_slice * _tao_slice);
    static Bound::LongDoubleArray_slice * dup (
        const Bound::LongDoubleArray_slice * _tao_slice);
    static void copy (
        Bound::LongDoubleArray_slice * _tao_to,
        const Bound::LongDoubleArray_slice * _tao_from);
    static Bound::LongDoubleArray_slice * alloc (void);
    static void zero (
        Bound::LongDoubleArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::BooleanArray_forany
    >
  {
    static void free (
        Bound::BooleanArray_slice * _tao_slice);
    static Bound::BooleanArray_slice * dup (
        const Bound::BooleanArray_slice * _tao_slice);
    static void copy (
        Bound::BooleanArray_slice * _tao_to,
        const Bound::BooleanArray_slice * _tao_from);
    static Bound::BooleanArray_slice * alloc (void);
    static void zero (
        Bound::BooleanArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::OctetArray_forany
    >
  {
    static void free (
        Bound::OctetArray_slice * _tao_slice);
    static Bound::OctetArray_slice * dup (
        const Bound::OctetArray_slice * _tao_slice);
    static void copy (
        Bound::OctetArray_slice * _tao_to,
        const Bound::OctetArray_slice * _tao_from);
    static Bound::OctetArray_slice * alloc (void);
    static void zero (
        Bound::OctetArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::EnumTypeArray_forany
    >
  {
    static void free (
        Bound::EnumTypeArray_slice * _tao_slice);
    static Bound::EnumTypeArray_slice * dup (
        const Bound::EnumTypeArray_slice * _tao_slice);
    static void copy (
        Bound::EnumTypeArray_slice * _tao_to,
        const Bound::EnumTypeArray_slice * _tao_from);
    static Bound::EnumTypeArray_slice * alloc (void);
    static void zero (
        Bound::EnumTypeArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::StringArray_forany
    >
  {
    static void free (
        Bound::StringArray_slice * _tao_slice);
    static Bound::StringArray_slice * dup (
        const Bound::StringArray_slice * _tao_slice);
    static void copy (
        Bound::StringArray_slice * _tao_to,
        const Bound::StringArray_slice * _tao_from);
    static Bound::StringArray_slice * alloc (void);
    static void zero (
        Bound::StringArray_slice * _tao_slice);
  };
  template<>
  struct KeyTest_Export Array_Traits<
      Bound::WStringArray_forany
    >
  {
    static void free (
        Bound::WStringArray_slice * _tao_slice);
    static Bound::WStringArray_slice * dup (
        const Bound::WStringArray_slice * _tao_slice);
    static void copy (
        Bound::WStringArray_slice * _tao_to,
        const Bound::WStringArray_slice * _tao_from);
    static Bound::WStringArray_slice * alloc (void);
    static void zero (
        Bound::WStringArray_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Bound::EnumType _tao_enumerator);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Bound::EnumType &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::SimpleBoundedMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::SimpleBoundedMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::StringMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::StringMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::WStringMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::WStringMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::ShortArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::ShortArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::UnsignedShortArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::UnsignedShortArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::LongArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::LongArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::UnsignedLongArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::UnsignedLongArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::LongLongArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::LongLongArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::UnsignedLongLongArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::UnsignedLongLongArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::CharArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::CharArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::WCharArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::WCharArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::FloatArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::FloatArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::DoubleArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::DoubleArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::LongDoubleArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::LongDoubleArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::BooleanArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::BooleanArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::OctetArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::OctetArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::EnumTypeArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::EnumTypeArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::SimpleBoundedArrayMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::SimpleBoundedArrayMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::StringArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::StringArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::StringArrayMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::StringArrayMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Bound::WStringArray_forany &_tao_array);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::WStringArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::WStringArrayMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::WStringArrayMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::Nest1 &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::Nest1 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::Nest2 &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::Nest2 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::BoundedNestedMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::BoundedNestedMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::Nest3 &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::Nest3 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::Nest4 &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::Nest4 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

KeyTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bound::UnboundedNestedMessage &);
KeyTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bound::UnboundedNestedMessage &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "BoundTestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

