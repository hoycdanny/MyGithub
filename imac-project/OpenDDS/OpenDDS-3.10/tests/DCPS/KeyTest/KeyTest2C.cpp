// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "KeyTest2C.h"
#include "tao/CDR.h"

#if !defined (__ACE_INLINE__)
#include "KeyTest2C.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Messenger7::ResponseArray_slice *
Messenger7::ResponseArray_dup (const Messenger7::ResponseArray_slice *_tao_src_array)
{
  Messenger7::ResponseArray_slice *_tao_dup_array =
    Messenger7::ResponseArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Messenger7::ResponseArray_slice *> (0);
    }
  
  Messenger7::ResponseArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Messenger7::ResponseArray_slice *
Messenger7::ResponseArray_alloc (void)
{
  Messenger7::ResponseArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[3], 0);
  return retval;
}

void
Messenger7::ResponseArray_free (
    Messenger7::ResponseArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Messenger7::ResponseArray_copy (
    Messenger7::ResponseArray_slice * _tao_to,
    const Messenger7::ResponseArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Messenger8::ResponseArray_slice *
Messenger8::ResponseArray_dup (const Messenger8::ResponseArray_slice *_tao_src_array)
{
  Messenger8::ResponseArray_slice *_tao_dup_array =
    Messenger8::ResponseArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Messenger8::ResponseArray_slice *> (0);
    }
  
  Messenger8::ResponseArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Messenger8::ResponseArray_slice *
Messenger8::ResponseArray_alloc (void)
{
  Messenger8::ResponseArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], 0);
  return retval;
}

void
Messenger8::ResponseArray_free (
    Messenger8::ResponseArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Messenger8::ResponseArray_copy (
    Messenger8::ResponseArray_slice * _tao_to,
    const Messenger8::ResponseArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

Messenger9::HeaderTypeArray_slice *
Messenger9::HeaderTypeArray_dup (const Messenger9::HeaderTypeArray_slice *_tao_src_array)
{
  Messenger9::HeaderTypeArray_slice *_tao_dup_array =
    Messenger9::HeaderTypeArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Messenger9::HeaderTypeArray_slice *> (0);
    }
  
  Messenger9::HeaderTypeArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Messenger9::HeaderTypeArray_slice *
Messenger9::HeaderTypeArray_alloc (void)
{
  Messenger9::HeaderTypeArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, Messenger9::HeaderType[2], 0);
  return retval;
}

void
Messenger9::HeaderTypeArray_free (
    Messenger9::HeaderTypeArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Messenger9::HeaderTypeArray_copy (
    Messenger9::HeaderTypeArray_slice * _tao_to,
    const Messenger9::HeaderTypeArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger7::ResponseArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger7::ResponseArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger7::HeaderType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger7::HeaderType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger7::Message &_tao_aggregate)
{
  Messenger7::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger7::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger7::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm << _tao_aggregate.header) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count) &&
    (strm << _tao_aggregate_responses);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger7::Message &_tao_aggregate)
{
  Messenger7::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger7::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger7::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm >> _tao_aggregate.header) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count) &&
    (strm >> _tao_aggregate_responses);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger8::ResponseArray_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger8::ResponseArray_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger8::HeaderType &_tao_aggregate)
{
  Messenger8::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger8::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger8::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id) &&
    (strm << _tao_aggregate_responses);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger8::HeaderType &_tao_aggregate)
{
  Messenger8::ResponseArray_forany _tao_aggregate_responses
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger8::ResponseArray_slice*) (
      #else
      (const_cast<
          Messenger8::ResponseArray_slice*> (
      #endif
          _tao_aggregate.responses
        )
    );
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id) &&
    (strm >> _tao_aggregate_responses);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger8::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.header) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger8::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.header) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger9::HeaderType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.from.in ()) &&
    (strm << _tao_aggregate.subject.in ()) &&
    (strm << _tao_aggregate.subject_id);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger9::HeaderType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.from.out ()) &&
    (strm >> _tao_aggregate.subject.out ()) &&
    (strm >> _tao_aggregate.subject_id);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger9::HeaderTypeArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger9::HeaderTypeArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger9::Message &_tao_aggregate)
{
  Messenger9::HeaderTypeArray_forany _tao_aggregate_headers
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger9::HeaderTypeArray_slice*) (
      #else
      (const_cast<
          Messenger9::HeaderTypeArray_slice*> (
      #endif
          _tao_aggregate.headers
        )
    );
  return
    (strm << _tao_aggregate_headers) &&
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger9::Message &_tao_aggregate)
{
  Messenger9::HeaderTypeArray_forany _tao_aggregate_headers
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Messenger9::HeaderTypeArray_slice*) (
      #else
      (const_cast<
          Messenger9::HeaderTypeArray_slice*> (
      #endif
          _tao_aggregate.headers
        )
    );
  return
    (strm >> _tao_aggregate_headers) &&
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger10::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.text.in ()) &&
    (strm << _tao_aggregate.count);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger10::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.text.out ()) &&
    (strm >> _tao_aggregate.count);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger11::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.long_1) &&
    (strm << _tao_aggregate.long_2) &&
    (strm << _tao_aggregate.long_3) &&
    (strm << _tao_aggregate.long_4);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger11::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.long_1) &&
    (strm >> _tao_aggregate.long_2) &&
    (strm >> _tao_aggregate.long_3) &&
    (strm >> _tao_aggregate.long_4);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Messenger12::Message &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.long_1) &&
    (strm << _tao_aggregate.long_2) &&
    (strm << _tao_aggregate.long_3) &&
    (strm << _tao_aggregate.long_4) &&
    (strm << _tao_aggregate.long_5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Messenger12::Message &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.long_1) &&
    (strm >> _tao_aggregate.long_2) &&
    (strm >> _tao_aggregate.long_3) &&
    (strm >> _tao_aggregate.long_4) &&
    (strm >> _tao_aggregate.long_5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



