/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file KeyTest.idl */
#include "KeyTestTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Messenger1 */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger1::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
}

bool operator<<(Serializer& strm, const Messenger1::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.from.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.text.in())
    && (strm << stru.count);
}

bool operator>>(Serializer& strm, Messenger1::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.from.out())
    && (strm >> stru.subject.out())
    && (strm >> stru.subject_id)
    && (strm >> stru.text.out())
    && (strm >> stru.count);
}

size_t gen_max_marshaled_size(const Messenger1::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger1::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Messenger1::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger1::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Messenger1::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger1 {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger1::Message> : MetaStruct {
  typedef Messenger1::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger1::Message& typed = *static_cast<const Messenger1::Message*>(stru);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger1::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "text") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger1::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger1::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "subject", "subject_id", "text", "count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger1::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger1::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger1::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger1::Message>()
{
  static MetaStructImpl<Messenger1::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger1::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger1::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger1 */


/* Begin MODULE: Messenger2 */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger2::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
}

bool operator<<(Serializer& strm, const Messenger2::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.from.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.text.in())
    && (strm << stru.count);
}

bool operator>>(Serializer& strm, Messenger2::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.from.out())
    && (strm >> stru.subject.out())
    && (strm >> stru.subject_id)
    && (strm >> stru.text.out())
    && (strm >> stru.count);
}

size_t gen_max_marshaled_size(const Messenger2::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger2::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Messenger2::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.subject_id);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger2::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.subject_id);
}

bool operator>>(Serializer& strm, KeyOnly<Messenger2::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger2 {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger2::Message> : MetaStruct {
  typedef Messenger2::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger2::Message& typed = *static_cast<const Messenger2::Message*>(stru);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "text") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger2::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "subject", "subject_id", "text", "count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger2::Message>()
{
  static MetaStructImpl<Messenger2::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger2::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger2::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger2 */


/* Begin MODULE: Messenger3 */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger3::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
}

bool operator<<(Serializer& strm, const Messenger3::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.from.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.text.in())
    && (strm << stru.count);
}

bool operator>>(Serializer& strm, Messenger3::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.from.out())
    && (strm >> stru.subject.out())
    && (strm >> stru.subject_id)
    && (strm >> stru.text.out())
    && (strm >> stru.count);
}

size_t gen_max_marshaled_size(const Messenger3::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger3::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 8;
}

void gen_find_size(KeyOnly<const Messenger3::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.subject_id);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.count);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger3::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.subject_id)
    && (strm << stru.t.count);
}

bool operator>>(Serializer& strm, KeyOnly<Messenger3::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.subject_id)
    && (strm >> stru.t.count);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger3 {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger3::Message> : MetaStruct {
  typedef Messenger3::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger3::Message& typed = *static_cast<const Messenger3::Message*>(stru);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger3::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "text") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger3::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger3::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "subject", "subject_id", "text", "count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger3::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger3::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger3::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger3::Message>()
{
  static MetaStructImpl<Messenger3::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger3::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger3::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger3 */


/* Begin MODULE: Messenger4 */



/* Begin ENUM: EnumType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Messenger4::EnumType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, Messenger4::EnumType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<Messenger4::EnumType>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_Messenger4_EnumType_names[] = {
  "FIRST",
  "SECOND",
  "THIRD"
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: EnumType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger4::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.short_field);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.unsigned_short_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.long_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.unsigned_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.long_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.unsigned_long_long_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.char_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_wchar(stru.wchar_field));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.float_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.double_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.long_double_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_boolean(stru.boolean_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.octet_field));
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.string_field.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.wstring_field.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
}

bool operator<<(Serializer& strm, const Messenger4::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.short_field)
    && (strm << stru.unsigned_short_field)
    && (strm << stru.long_field)
    && (strm << stru.unsigned_long_field)
    && (strm << stru.long_long_field)
    && (strm << stru.unsigned_long_long_field)
    && (strm << ACE_OutputCDR::from_char(stru.char_field))
    && (strm << ACE_OutputCDR::from_wchar(stru.wchar_field))
    && (strm << stru.float_field)
    && (strm << stru.double_field)
    && (strm << stru.long_double_field)
    && (strm << ACE_OutputCDR::from_boolean(stru.boolean_field))
    && (strm << ACE_OutputCDR::from_octet(stru.octet_field))
    && (strm << stru.enum_field)
    && (strm << stru.string_field.in())
    && (strm << stru.wstring_field.in());
}

bool operator>>(Serializer& strm, Messenger4::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.short_field)
    && (strm >> stru.unsigned_short_field)
    && (strm >> stru.long_field)
    && (strm >> stru.unsigned_long_field)
    && (strm >> stru.long_long_field)
    && (strm >> stru.unsigned_long_long_field)
    && (strm >> ACE_InputCDR::to_char(stru.char_field))
    && (strm >> ACE_InputCDR::to_wchar(stru.wchar_field))
    && (strm >> stru.float_field)
    && (strm >> stru.double_field)
    && (strm >> stru.long_double_field)
    && (strm >> ACE_InputCDR::to_boolean(stru.boolean_field))
    && (strm >> ACE_InputCDR::to_octet(stru.octet_field))
    && (strm >> stru.enum_field)
    && (strm >> stru.string_field.out())
    && (strm >> stru.wstring_field.out());
}

size_t gen_max_marshaled_size(const Messenger4::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger4::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Messenger4::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.t.short_field);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.t.unsigned_short_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.long_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.unsigned_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.long_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.unsigned_long_long_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.t.char_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_wchar(stru.t.wchar_field));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.float_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.double_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.long_double_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_boolean(stru.t.boolean_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.t.octet_field));
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.string_field.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.wstring_field.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger4::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.short_field)
    && (strm << stru.t.unsigned_short_field)
    && (strm << stru.t.long_field)
    && (strm << stru.t.unsigned_long_field)
    && (strm << stru.t.long_long_field)
    && (strm << stru.t.unsigned_long_long_field)
    && (strm << ACE_OutputCDR::from_char(stru.t.char_field))
    && (strm << ACE_OutputCDR::from_wchar(stru.t.wchar_field))
    && (strm << stru.t.float_field)
    && (strm << stru.t.double_field)
    && (strm << stru.t.long_double_field)
    && (strm << ACE_OutputCDR::from_boolean(stru.t.boolean_field))
    && (strm << ACE_OutputCDR::from_octet(stru.t.octet_field))
    && (strm << stru.t.enum_field)
    && (strm << stru.t.string_field.in())
    && (strm << stru.t.wstring_field.in());
}

bool operator>>(Serializer& strm, KeyOnly<Messenger4::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.short_field)
    && (strm >> stru.t.unsigned_short_field)
    && (strm >> stru.t.long_field)
    && (strm >> stru.t.unsigned_long_field)
    && (strm >> stru.t.long_long_field)
    && (strm >> stru.t.unsigned_long_long_field)
    && (strm >> ACE_InputCDR::to_char(stru.t.char_field))
    && (strm >> ACE_InputCDR::to_wchar(stru.t.wchar_field))
    && (strm >> stru.t.float_field)
    && (strm >> stru.t.double_field)
    && (strm >> stru.t.long_double_field)
    && (strm >> ACE_InputCDR::to_boolean(stru.t.boolean_field))
    && (strm >> ACE_InputCDR::to_octet(stru.t.octet_field))
    && (strm >> stru.t.enum_field)
    && (strm >> stru.t.string_field.out())
    && (strm >> stru.t.wstring_field.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger4 {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger4::Message> : MetaStruct {
  typedef Messenger4::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 16; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger4::Message& typed = *static_cast<const Messenger4::Message*>(stru);
    if (std::strcmp(field, "short_field") == 0) {
      return typed.short_field;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return typed.unsigned_short_field;
    }
    if (std::strcmp(field, "long_field") == 0) {
      return typed.long_field;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return typed.unsigned_long_field;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return typed.long_long_field;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return typed.unsigned_long_long_field;
    }
    if (std::strcmp(field, "char_field") == 0) {
      return typed.char_field;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return typed.wchar_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return typed.float_field;
    }
    if (std::strcmp(field, "double_field") == 0) {
      return typed.double_field;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return typed.long_double_field;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return typed.boolean_field;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return typed.octet_field;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return gen_Messenger4_EnumType_names[typed.enum_field];
    }
    if (std::strcmp(field, "string_field") == 0) {
      return typed.string_field.in();
    }
    if (std::strcmp(field, "wstring_field") == 0) {
      return typed.wstring_field.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "short_field") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'short_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 2);
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      ACE_CDR::UShort val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'unsigned_short_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 2);
    }
    if (std::strcmp(field, "long_field") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'unsigned_long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      ACE_CDR::LongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'unsigned_long_long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "char_field") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'char_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      ACE_CDR::WChar val;
      if (!(ser >> ACE_InputCDR::to_wchar(val))) {
        throw std::runtime_error("Field 'wchar_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::Octet len;
      if (!(ser >> ACE_InputCDR::to_octet(len))) {
        throw std::runtime_error("WChar 'wchar_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "float_field") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'float_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "double_field") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'double_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      ACE_CDR::LongDouble val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_double_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 16);
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      ACE_CDR::Boolean val;
      if (!(ser >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'boolean_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "octet_field") == 0) {
      ACE_CDR::Octet val;
      if (!(ser >> ACE_InputCDR::to_octet(val))) {
        throw std::runtime_error("Field 'octet_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "enum_field") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'enum_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "string_field") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'string_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'string_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "wstring_field") == 0) {
      TAO::WString_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'wstring_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'wstring_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger4::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "short_field") == 0) {
      return make_field_cmp(&T::short_field, next);
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return make_field_cmp(&T::unsigned_short_field, next);
    }
    if (std::strcmp(field, "long_field") == 0) {
      return make_field_cmp(&T::long_field, next);
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return make_field_cmp(&T::unsigned_long_field, next);
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return make_field_cmp(&T::long_long_field, next);
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return make_field_cmp(&T::unsigned_long_long_field, next);
    }
    if (std::strcmp(field, "char_field") == 0) {
      return make_field_cmp(&T::char_field, next);
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return make_field_cmp(&T::wchar_field, next);
    }
    if (std::strcmp(field, "float_field") == 0) {
      return make_field_cmp(&T::float_field, next);
    }
    if (std::strcmp(field, "double_field") == 0) {
      return make_field_cmp(&T::double_field, next);
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return make_field_cmp(&T::long_double_field, next);
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return make_field_cmp(&T::boolean_field, next);
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return make_field_cmp(&T::octet_field, next);
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return make_field_cmp(&T::enum_field, next);
    }
    if (std::strcmp(field, "string_field") == 0) {
      return make_field_cmp(&T::string_field, next);
    }
    if (std::strcmp(field, "wstring_field") == 0) {
      return make_field_cmp(&T::wstring_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"short_field", "unsigned_short_field", "long_field", "unsigned_long_field", "long_long_field", "unsigned_long_long_field", "char_field", "wchar_field", "float_field", "double_field", "long_double_field", "boolean_field", "octet_field", "enum_field", "string_field", "wstring_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "short_field") == 0) {
      return &static_cast<const T*>(stru)->short_field;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return &static_cast<const T*>(stru)->unsigned_short_field;
    }
    if (std::strcmp(field, "long_field") == 0) {
      return &static_cast<const T*>(stru)->long_field;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return &static_cast<const T*>(stru)->unsigned_long_field;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return &static_cast<const T*>(stru)->long_long_field;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return &static_cast<const T*>(stru)->unsigned_long_long_field;
    }
    if (std::strcmp(field, "char_field") == 0) {
      return &static_cast<const T*>(stru)->char_field;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return &static_cast<const T*>(stru)->wchar_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return &static_cast<const T*>(stru)->float_field;
    }
    if (std::strcmp(field, "double_field") == 0) {
      return &static_cast<const T*>(stru)->double_field;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return &static_cast<const T*>(stru)->long_double_field;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return &static_cast<const T*>(stru)->boolean_field;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return &static_cast<const T*>(stru)->octet_field;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return &static_cast<const T*>(stru)->enum_field;
    }
    if (std::strcmp(field, "string_field") == 0) {
      return &static_cast<const T*>(stru)->string_field;
    }
    if (std::strcmp(field, "wstring_field") == 0) {
      return &static_cast<const T*>(stru)->wstring_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "short_field") == 0) {
      static_cast<T*>(lhs)->short_field = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      static_cast<T*>(lhs)->unsigned_short_field = *static_cast<const CORBA::UShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_field") == 0) {
      static_cast<T*>(lhs)->long_field = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      static_cast<T*>(lhs)->unsigned_long_field = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      static_cast<T*>(lhs)->long_long_field = *static_cast<const CORBA::LongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      static_cast<T*>(lhs)->unsigned_long_long_field = *static_cast<const CORBA::ULongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "char_field") == 0) {
      static_cast<T*>(lhs)->char_field = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      static_cast<T*>(lhs)->wchar_field = *static_cast<const CORBA::WChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "float_field") == 0) {
      static_cast<T*>(lhs)->float_field = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "double_field") == 0) {
      static_cast<T*>(lhs)->double_field = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      static_cast<T*>(lhs)->long_double_field = *static_cast<const CORBA::LongDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      static_cast<T*>(lhs)->boolean_field = *static_cast<const CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      static_cast<T*>(lhs)->octet_field = *static_cast<const CORBA::Octet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      static_cast<T*>(lhs)->enum_field = *static_cast<const Messenger4::EnumType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "string_field") == 0) {
      static_cast<T*>(lhs)->string_field = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wstring_field") == 0) {
      static_cast<T*>(lhs)->wstring_field = *static_cast<const TAO::WString_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "short_field") == 0) {
      return static_cast<const T*>(lhs)->short_field == static_cast<const T*>(rhs)->short_field;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return static_cast<const T*>(lhs)->unsigned_short_field == static_cast<const T*>(rhs)->unsigned_short_field;
    }
    if (std::strcmp(field, "long_field") == 0) {
      return static_cast<const T*>(lhs)->long_field == static_cast<const T*>(rhs)->long_field;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return static_cast<const T*>(lhs)->unsigned_long_field == static_cast<const T*>(rhs)->unsigned_long_field;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return static_cast<const T*>(lhs)->long_long_field == static_cast<const T*>(rhs)->long_long_field;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return static_cast<const T*>(lhs)->unsigned_long_long_field == static_cast<const T*>(rhs)->unsigned_long_long_field;
    }
    if (std::strcmp(field, "char_field") == 0) {
      return static_cast<const T*>(lhs)->char_field == static_cast<const T*>(rhs)->char_field;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return static_cast<const T*>(lhs)->wchar_field == static_cast<const T*>(rhs)->wchar_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return static_cast<const T*>(lhs)->float_field == static_cast<const T*>(rhs)->float_field;
    }
    if (std::strcmp(field, "double_field") == 0) {
      return static_cast<const T*>(lhs)->double_field == static_cast<const T*>(rhs)->double_field;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return static_cast<const T*>(lhs)->long_double_field == static_cast<const T*>(rhs)->long_double_field;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return static_cast<const T*>(lhs)->boolean_field == static_cast<const T*>(rhs)->boolean_field;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return static_cast<const T*>(lhs)->octet_field == static_cast<const T*>(rhs)->octet_field;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return static_cast<const T*>(lhs)->enum_field == static_cast<const T*>(rhs)->enum_field;
    }
    if (std::strcmp(field, "string_field") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->string_field.in(), static_cast<const T*>(rhs)->string_field.in());
    }
    if (std::strcmp(field, "wstring_field") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->wstring_field.in(), static_cast<const T*>(rhs)->wstring_field.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger4::Message>()
{
  static MetaStructImpl<Messenger4::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger4::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger4::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */


/* Begin STRUCT: NestedMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger4::NestedMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.mess, size, padding);
}

bool operator<<(Serializer& strm, const Messenger4::NestedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.mess);
}

bool operator>>(Serializer& strm, Messenger4::NestedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.mess);
}

size_t gen_max_marshaled_size(const Messenger4::NestedMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger4::NestedMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Messenger4::NestedMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.t.mess.short_field);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.t.mess.unsigned_short_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.mess.long_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.mess.unsigned_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.mess.long_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.mess.unsigned_long_long_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.t.mess.char_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_wchar(stru.t.mess.wchar_field));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.mess.float_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.mess.double_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.t.mess.long_double_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_boolean(stru.t.mess.boolean_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.t.mess.octet_field));
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.mess.string_field.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.mess.wstring_field.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger4::NestedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.mess.short_field)
    && (strm << stru.t.mess.unsigned_short_field)
    && (strm << stru.t.mess.long_field)
    && (strm << stru.t.mess.unsigned_long_field)
    && (strm << stru.t.mess.long_long_field)
    && (strm << stru.t.mess.unsigned_long_long_field)
    && (strm << ACE_OutputCDR::from_char(stru.t.mess.char_field))
    && (strm << ACE_OutputCDR::from_wchar(stru.t.mess.wchar_field))
    && (strm << stru.t.mess.float_field)
    && (strm << stru.t.mess.double_field)
    && (strm << stru.t.mess.long_double_field)
    && (strm << ACE_OutputCDR::from_boolean(stru.t.mess.boolean_field))
    && (strm << ACE_OutputCDR::from_octet(stru.t.mess.octet_field))
    && (strm << stru.t.mess.enum_field)
    && (strm << stru.t.mess.string_field.in())
    && (strm << stru.t.mess.wstring_field.in());
}

bool operator>>(Serializer& strm, KeyOnly<Messenger4::NestedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.mess.short_field)
    && (strm >> stru.t.mess.unsigned_short_field)
    && (strm >> stru.t.mess.long_field)
    && (strm >> stru.t.mess.unsigned_long_field)
    && (strm >> stru.t.mess.long_long_field)
    && (strm >> stru.t.mess.unsigned_long_long_field)
    && (strm >> ACE_InputCDR::to_char(stru.t.mess.char_field))
    && (strm >> ACE_InputCDR::to_wchar(stru.t.mess.wchar_field))
    && (strm >> stru.t.mess.float_field)
    && (strm >> stru.t.mess.double_field)
    && (strm >> stru.t.mess.long_double_field)
    && (strm >> ACE_InputCDR::to_boolean(stru.t.mess.boolean_field))
    && (strm >> ACE_InputCDR::to_octet(stru.t.mess.octet_field))
    && (strm >> stru.t.mess.enum_field)
    && (strm >> stru.t.mess.string_field.out())
    && (strm >> stru.t.mess.wstring_field.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger4 {
::DDS::DataWriter_ptr NestedMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<NestedMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr NestedMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<NestedMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr NestedMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<NestedMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<NestedMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& NestedMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<NestedMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool NestedMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* NestedMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
NestedMessageTypeSupport::_ptr_type NestedMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger4::NestedMessage> : MetaStruct {
  typedef Messenger4::NestedMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 16; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger4::NestedMessage& typed = *static_cast<const Messenger4::NestedMessage*>(stru);
    if (std::strncmp(field, "mess.", 5) == 0) {
      return getMetaStruct<Messenger4::Message>().getValue(&typed.mess, field + 5);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::NestedMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "mess.", 5) == 0) {
      return getMetaStruct<Messenger4::Message>().getValue(ser, field + 5);
    } else {
      gen_skip_over(ser, static_cast<Messenger4::Message*>(0));
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger4::NestedMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "mess.", 5) == 0) {
      return make_struct_cmp(&T::mess, getMetaStruct<Messenger4::Message>().create_qc_comparator(field + 5), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::NestedMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"mess", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "mess") == 0) {
      return &static_cast<const T*>(stru)->mess;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::NestedMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "mess") == 0) {
      static_cast<T*>(lhs)->mess = *static_cast<const Messenger4::Message*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::NestedMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger4::NestedMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger4::NestedMessage>()
{
  static MetaStructImpl<Messenger4::NestedMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger4::NestedMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger4::NestedMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: NestedMessage */

/* End MODULE: Messenger4 */


/* Begin MODULE: Messenger5 */



/* Begin TYPEDEF: ResponseArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger5::ResponseArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 10 * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Messenger5::ResponseArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_long_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Messenger5::ResponseArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_long_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Messenger5::ResponseArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ResponseArray */


/* Begin STRUCT: HeaderType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger5::HeaderType& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.wsubject.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
}

bool operator<<(Serializer& strm, const Messenger5::HeaderType& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.from.in())
    && (strm << stru.wsubject.in())
    && (strm << stru.subject_id);
}

bool operator>>(Serializer& strm, Messenger5::HeaderType& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.from.out())
    && (strm >> stru.wsubject.out())
    && (strm >> stru.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger5::HeaderType> : MetaStruct {
  typedef Messenger5::HeaderType T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger5::HeaderType& typed = *static_cast<const Messenger5::HeaderType*>(stru);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "wsubject") == 0) {
      return typed.wsubject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::HeaderType)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "wsubject") == 0) {
      TAO::WString_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'wsubject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'wsubject' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger5::HeaderType");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "wsubject") == 0) {
      return make_field_cmp(&T::wsubject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::HeaderType)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "wsubject", "subject_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "wsubject") == 0) {
      return &static_cast<const T*>(stru)->wsubject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::HeaderType)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wsubject") == 0) {
      static_cast<T*>(lhs)->wsubject = *static_cast<const TAO::WString_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::HeaderType)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "wsubject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->wsubject.in(), static_cast<const T*>(rhs)->wsubject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::HeaderType)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger5::HeaderType>()
{
  static MetaStructImpl<Messenger5::HeaderType> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger5::HeaderType*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger5::HeaderType>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeaderType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger5::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  Messenger5::ResponseArray_forany stru_responses(const_cast<Messenger5::ResponseArray_slice*>(stru.responses));
  gen_find_size(stru.header, size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
  gen_find_size(stru_responses, size, padding);
}

bool operator<<(Serializer& strm, const Messenger5::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Messenger5::ResponseArray_forany stru_responses(const_cast<Messenger5::ResponseArray_slice*>(stru.responses));
  return (strm << stru.header)
    && (strm << stru.text.in())
    && (strm << stru.count)
    && (strm << stru_responses);
}

bool operator>>(Serializer& strm, Messenger5::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Messenger5::ResponseArray_forany stru_responses(const_cast<Messenger5::ResponseArray_slice*>(stru.responses));
  return (strm >> stru.header)
    && (strm >> stru.text.out())
    && (strm >> stru.count)
    && (strm >> stru_responses);
}

size_t gen_max_marshaled_size(const Messenger5::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger5::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Messenger5::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.header.wsubject.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger5::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.header.wsubject.in());
}

bool operator>>(Serializer& strm, KeyOnly<Messenger5::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.header.wsubject.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger5 {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger5::Message> : MetaStruct {
  typedef Messenger5::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger5::Message& typed = *static_cast<const Messenger5::Message*>(stru);
    if (std::strncmp(field, "header.", 7) == 0) {
      return getMetaStruct<Messenger5::HeaderType>().getValue(&typed.header, field + 7);
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "header.", 7) == 0) {
      return getMetaStruct<Messenger5::HeaderType>().getValue(ser, field + 7);
    } else {
      gen_skip_over(ser, static_cast<Messenger5::HeaderType*>(0));
    }
    if (std::strcmp(field, "text") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    gen_skip_over(ser, static_cast<Messenger5::ResponseArray_forany*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger5::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "header.", 7) == 0) {
      return make_struct_cmp(&T::header, getMetaStruct<Messenger5::HeaderType>().create_qc_comparator(field + 7), next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"header", "text", "count", "responses", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "header") == 0) {
      return &static_cast<const T*>(stru)->header;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    if (std::strcmp(field, "responses") == 0) {
      return &static_cast<const T*>(stru)->responses;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "header") == 0) {
      static_cast<T*>(lhs)->header = *static_cast<const Messenger5::HeaderType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "responses") == 0) {
      Messenger5::ResponseArray* lhsArr = &static_cast<T*>(lhs)->responses;
      const Messenger5::ResponseArray* rhsArr = static_cast<const Messenger5::ResponseArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger5::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger5::Message>()
{
  static MetaStructImpl<Messenger5::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger5::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger5::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger5 */


/* Begin MODULE: Messenger6 */



/* Begin TYPEDEF: ResponseArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger6::ResponseArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 10 * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Messenger6::ResponseArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_long_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Messenger6::ResponseArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_long_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Messenger6::ResponseArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ResponseArray */


/* Begin STRUCT: HeaderType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger6::HeaderType& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
}

bool operator<<(Serializer& strm, const Messenger6::HeaderType& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.from.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id);
}

bool operator>>(Serializer& strm, Messenger6::HeaderType& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.from.out())
    && (strm >> stru.subject.out())
    && (strm >> stru.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger6::HeaderType> : MetaStruct {
  typedef Messenger6::HeaderType T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger6::HeaderType& typed = *static_cast<const Messenger6::HeaderType*>(stru);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::HeaderType)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger6::HeaderType");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::HeaderType)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "subject", "subject_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::HeaderType)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::HeaderType)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::HeaderType)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger6::HeaderType>()
{
  static MetaStructImpl<Messenger6::HeaderType> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger6::HeaderType*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger6::HeaderType>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeaderType */


/* Begin STRUCT: PayloadType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger6::PayloadType& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.header, size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
}

bool operator<<(Serializer& strm, const Messenger6::PayloadType& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.header)
    && (strm << stru.text.in())
    && (strm << stru.count);
}

bool operator>>(Serializer& strm, Messenger6::PayloadType& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.header)
    && (strm >> stru.text.out())
    && (strm >> stru.count);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger6::PayloadType> : MetaStruct {
  typedef Messenger6::PayloadType T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger6::PayloadType& typed = *static_cast<const Messenger6::PayloadType*>(stru);
    if (std::strncmp(field, "header.", 7) == 0) {
      return getMetaStruct<Messenger6::HeaderType>().getValue(&typed.header, field + 7);
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::PayloadType)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "header.", 7) == 0) {
      return getMetaStruct<Messenger6::HeaderType>().getValue(ser, field + 7);
    } else {
      gen_skip_over(ser, static_cast<Messenger6::HeaderType*>(0));
    }
    if (std::strcmp(field, "text") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger6::PayloadType");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "header.", 7) == 0) {
      return make_struct_cmp(&T::header, getMetaStruct<Messenger6::HeaderType>().create_qc_comparator(field + 7), next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::PayloadType)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"header", "text", "count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "header") == 0) {
      return &static_cast<const T*>(stru)->header;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::PayloadType)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "header") == 0) {
      static_cast<T*>(lhs)->header = *static_cast<const Messenger6::HeaderType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::PayloadType)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::PayloadType)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger6::PayloadType>()
{
  static MetaStructImpl<Messenger6::PayloadType> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger6::PayloadType*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger6::PayloadType>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PayloadType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger6::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  Messenger6::ResponseArray_forany stru_responses(const_cast<Messenger6::ResponseArray_slice*>(stru.responses));
  gen_find_size(stru.payload, size, padding);
  gen_find_size(stru_responses, size, padding);
}

bool operator<<(Serializer& strm, const Messenger6::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Messenger6::ResponseArray_forany stru_responses(const_cast<Messenger6::ResponseArray_slice*>(stru.responses));
  return (strm << stru.payload)
    && (strm << stru_responses);
}

bool operator>>(Serializer& strm, Messenger6::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Messenger6::ResponseArray_forany stru_responses(const_cast<Messenger6::ResponseArray_slice*>(stru.responses));
  return (strm >> stru.payload)
    && (strm >> stru_responses);
}

size_t gen_max_marshaled_size(const Messenger6::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger6::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Messenger6::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.payload.header.subject_id);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger6::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.payload.header.subject_id);
}

bool operator>>(Serializer& strm, KeyOnly<Messenger6::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.payload.header.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger6 {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger6::Message> : MetaStruct {
  typedef Messenger6::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger6::Message& typed = *static_cast<const Messenger6::Message*>(stru);
    if (std::strncmp(field, "payload.", 8) == 0) {
      return getMetaStruct<Messenger6::PayloadType>().getValue(&typed.payload, field + 8);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "payload.", 8) == 0) {
      return getMetaStruct<Messenger6::PayloadType>().getValue(ser, field + 8);
    } else {
      gen_skip_over(ser, static_cast<Messenger6::PayloadType*>(0));
    }
    gen_skip_over(ser, static_cast<Messenger6::ResponseArray_forany*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger6::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "payload.", 8) == 0) {
      return make_struct_cmp(&T::payload, getMetaStruct<Messenger6::PayloadType>().create_qc_comparator(field + 8), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"payload", "responses", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "payload") == 0) {
      return &static_cast<const T*>(stru)->payload;
    }
    if (std::strcmp(field, "responses") == 0) {
      return &static_cast<const T*>(stru)->responses;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "payload") == 0) {
      static_cast<T*>(lhs)->payload = *static_cast<const Messenger6::PayloadType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "responses") == 0) {
      Messenger6::ResponseArray* lhsArr = &static_cast<T*>(lhs)->responses;
      const Messenger6::ResponseArray* rhsArr = static_cast<const Messenger6::ResponseArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger6::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger6::Message>()
{
  static MetaStructImpl<Messenger6::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger6::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger6::Message>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger6 */
