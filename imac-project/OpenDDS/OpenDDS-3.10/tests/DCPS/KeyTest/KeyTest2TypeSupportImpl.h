/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file KeyTest2.idl */
#ifndef OPENDDS_IDL_GENERATED_KEYTEST2TYPESUPPORTIMPL_H_YBPZYI
#define OPENDDS_IDL_GENERATED_KEYTEST2TYPESUPPORTIMPL_H_YBPZYI
#include "KeyTest2C.h"
#include "dds/DCPS/Definitions.h"
#include "KeyTest2TypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Messenger7 */



/* Begin TYPEDEF: ResponseArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger7::ResponseArray_forany& arr, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger7::ResponseArray_forany& arr);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger7::ResponseArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger7::ResponseArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ResponseArray */


/* Begin STRUCT: HeaderType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger7::HeaderType& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger7::HeaderType& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger7::HeaderType& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger7::HeaderType>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger7::HeaderType*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeaderType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger7::Message& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger7::Message& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger7::Message& stru);

KeyTest_Export
size_t gen_max_marshaled_size(const Messenger7::Message& stru, bool align);

KeyTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger7::Message> stru, bool align);

KeyTest_Export
void gen_find_size(KeyOnly<const Messenger7::Message> stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger7::Message> stru);

KeyTest_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger7::Message> stru);

template <>
struct MarshalTraits<Messenger7::Message> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger7 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct KeyTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const Messenger7::Message& v1, const Messenger7::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.responses[0] < v2.responses[0]) return true;
    if (v2.responses[0] < v1.responses[0]) return false;
    return false;
  }
};
}


namespace Messenger7 {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger7::Message> {
  typedef Messenger7::Message MessageType;
  typedef Messenger7::MessageSeq MessageSequenceType;
  typedef Messenger7::MessageTypeSupport TypeSupportType;
  typedef Messenger7::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger7::MessageDataWriter DataWriterType;
  typedef Messenger7::MessageDataReader DataReaderType;
  typedef Messenger7::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger7::Message"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger7 {
class KeyTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger7::Message>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger7::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger7 */


/* Begin MODULE: Messenger8 */



/* Begin TYPEDEF: ResponseArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger8::ResponseArray_forany& arr, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger8::ResponseArray_forany& arr);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger8::ResponseArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger8::ResponseArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ResponseArray */


/* Begin STRUCT: HeaderType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger8::HeaderType& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger8::HeaderType& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger8::HeaderType& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger8::HeaderType>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger8::HeaderType*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeaderType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger8::Message& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger8::Message& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger8::Message& stru);

KeyTest_Export
size_t gen_max_marshaled_size(const Messenger8::Message& stru, bool align);

KeyTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger8::Message> stru, bool align);

KeyTest_Export
void gen_find_size(KeyOnly<const Messenger8::Message> stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger8::Message> stru);

KeyTest_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger8::Message> stru);

template <>
struct MarshalTraits<Messenger8::Message> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger8 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct KeyTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const Messenger8::Message& v1, const Messenger8::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.header.responses[0] < v2.header.responses[0]) return true;
    if (v2.header.responses[0] < v1.header.responses[0]) return false;
    return false;
  }
};
}


namespace Messenger8 {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger8::Message> {
  typedef Messenger8::Message MessageType;
  typedef Messenger8::MessageSeq MessageSequenceType;
  typedef Messenger8::MessageTypeSupport TypeSupportType;
  typedef Messenger8::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger8::MessageDataWriter DataWriterType;
  typedef Messenger8::MessageDataReader DataReaderType;
  typedef Messenger8::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger8::Message"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger8 {
class KeyTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger8::Message>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger8::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger8 */


/* Begin MODULE: Messenger9 */



/* Begin STRUCT: HeaderType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger9::HeaderType& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger9::HeaderType& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger9::HeaderType& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger9::HeaderType>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger9::HeaderType*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeaderType */


/* Begin TYPEDEF: HeaderTypeArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger9::HeaderTypeArray_forany& arr, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger9::HeaderTypeArray_forany& arr);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger9::HeaderTypeArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger9::HeaderTypeArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: HeaderTypeArray */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger9::Message& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger9::Message& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger9::Message& stru);

KeyTest_Export
size_t gen_max_marshaled_size(const Messenger9::Message& stru, bool align);

KeyTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger9::Message> stru, bool align);

KeyTest_Export
void gen_find_size(KeyOnly<const Messenger9::Message> stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger9::Message> stru);

KeyTest_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger9::Message> stru);

template <>
struct MarshalTraits<Messenger9::Message> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger9 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct KeyTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const Messenger9::Message& v1, const Messenger9::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.headers[1].subject_id < v2.headers[1].subject_id) return true;
    if (v2.headers[1].subject_id < v1.headers[1].subject_id) return false;
    return false;
  }
};
}


namespace Messenger9 {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger9::Message> {
  typedef Messenger9::Message MessageType;
  typedef Messenger9::MessageSeq MessageSequenceType;
  typedef Messenger9::MessageTypeSupport TypeSupportType;
  typedef Messenger9::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger9::MessageDataWriter DataWriterType;
  typedef Messenger9::MessageDataReader DataReaderType;
  typedef Messenger9::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger9::Message"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger9 {
class KeyTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger9::Message>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger9::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger9 */


/* Begin MODULE: Messenger10 */



/* Begin TYPEDEF: CountType */


/* End TYPEDEF: CountType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger10::Message& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger10::Message& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger10::Message& stru);

KeyTest_Export
size_t gen_max_marshaled_size(const Messenger10::Message& stru, bool align);

KeyTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger10::Message> stru, bool align);

KeyTest_Export
void gen_find_size(KeyOnly<const Messenger10::Message> stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger10::Message> stru);

KeyTest_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger10::Message> stru);

template <>
struct MarshalTraits<Messenger10::Message> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return false; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger10 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct KeyTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const Messenger10::Message& v1, const Messenger10::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.count < v2.count) return true;
    if (v2.count < v1.count) return false;
    if (v1.text < v2.text) return true;
    if (v2.text < v1.text) return false;
    return false;
  }
};
}


namespace Messenger10 {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger10::Message> {
  typedef Messenger10::Message MessageType;
  typedef Messenger10::MessageSeq MessageSequenceType;
  typedef Messenger10::MessageTypeSupport TypeSupportType;
  typedef Messenger10::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger10::MessageDataWriter DataWriterType;
  typedef Messenger10::MessageDataReader DataReaderType;
  typedef Messenger10::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger10::Message"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger10 {
class KeyTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger10::Message>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger10::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger10 */


/* Begin MODULE: Messenger11 */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger11::Message& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger11::Message& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger11::Message& stru);

KeyTest_Export
size_t gen_max_marshaled_size(const Messenger11::Message& stru, bool align);

KeyTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger11::Message> stru, bool align);

KeyTest_Export
void gen_find_size(KeyOnly<const Messenger11::Message> stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger11::Message> stru);

KeyTest_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger11::Message> stru);

template <>
struct MarshalTraits<Messenger11::Message> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger11 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct KeyTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const Messenger11::Message& v1, const Messenger11::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.long_1 < v2.long_1) return true;
    if (v2.long_1 < v1.long_1) return false;
    if (v1.long_2 < v2.long_2) return true;
    if (v2.long_2 < v1.long_2) return false;
    if (v1.long_3 < v2.long_3) return true;
    if (v2.long_3 < v1.long_3) return false;
    if (v1.long_4 < v2.long_4) return true;
    if (v2.long_4 < v1.long_4) return false;
    return false;
  }
};
}


namespace Messenger11 {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger11::Message> {
  typedef Messenger11::Message MessageType;
  typedef Messenger11::MessageSeq MessageSequenceType;
  typedef Messenger11::MessageTypeSupport TypeSupportType;
  typedef Messenger11::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger11::MessageDataWriter DataWriterType;
  typedef Messenger11::MessageDataReader DataReaderType;
  typedef Messenger11::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger11::Message"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger11 {
class KeyTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger11::Message>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger11::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger11 */


/* Begin MODULE: Messenger12 */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

KeyTest_Export
void gen_find_size(const Messenger12::Message& stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, const Messenger12::Message& stru);

KeyTest_Export
bool operator>>(Serializer& strm, Messenger12::Message& stru);

KeyTest_Export
size_t gen_max_marshaled_size(const Messenger12::Message& stru, bool align);

KeyTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger12::Message> stru, bool align);

KeyTest_Export
void gen_find_size(KeyOnly<const Messenger12::Message> stru, size_t& size, size_t& padding);

KeyTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger12::Message> stru);

KeyTest_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger12::Message> stru);

template <>
struct MarshalTraits<Messenger12::Message> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger12 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct KeyTest_Export Message_OpenDDS_KeyLessThan {
  bool operator()(const Messenger12::Message& v1, const Messenger12::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.long_1 < v2.long_1) return true;
    if (v2.long_1 < v1.long_1) return false;
    if (v1.long_2 < v2.long_2) return true;
    if (v2.long_2 < v1.long_2) return false;
    if (v1.long_3 < v2.long_3) return true;
    if (v2.long_3 < v1.long_3) return false;
    if (v1.long_4 < v2.long_4) return true;
    if (v2.long_4 < v1.long_4) return false;
    if (v1.long_5 < v2.long_5) return true;
    if (v2.long_5 < v1.long_5) return false;
    return false;
  }
};
}


namespace Messenger12 {
class MessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger12::Message> {
  typedef Messenger12::Message MessageType;
  typedef Messenger12::MessageSeq MessageSequenceType;
  typedef Messenger12::MessageTypeSupport TypeSupportType;
  typedef Messenger12::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger12::MessageDataWriter DataWriterType;
  typedef Messenger12::MessageDataReader DataReaderType;
  typedef Messenger12::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger12::Message"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger12 {
class KeyTest_Export MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
KeyTest_Export
const MetaStruct& getMetaStruct<Messenger12::Message>();
KeyTest_Export
void gen_skip_over(Serializer& ser, Messenger12::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger12 */
#endif /* OPENDDS_IDL_GENERATED_KEYTEST2TYPESUPPORTIMPL_H_YBPZYI */
