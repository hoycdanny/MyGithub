// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::ShortArray_forany>::free (
    Bound::ShortArray_slice * _tao_slice
  )
{
  Bound::ShortArray_free (_tao_slice);
}

ACE_INLINE
Bound::ShortArray_slice *
TAO::Array_Traits<Bound::ShortArray_forany>::dup (
    const Bound::ShortArray_slice * _tao_slice
  )
{
  return Bound::ShortArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::ShortArray_forany>::copy (
    Bound::ShortArray_slice * _tao_to,
    const Bound::ShortArray_slice * _tao_from
  )
{
  Bound::ShortArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::ShortArray_forany>::zero (
    Bound::ShortArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Short ();
    }
}

ACE_INLINE
Bound::ShortArray_slice *
TAO::Array_Traits<Bound::ShortArray_forany>::alloc (void)
{
  return Bound::ShortArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedShortArray_forany>::free (
    Bound::UnsignedShortArray_slice * _tao_slice
  )
{
  Bound::UnsignedShortArray_free (_tao_slice);
}

ACE_INLINE
Bound::UnsignedShortArray_slice *
TAO::Array_Traits<Bound::UnsignedShortArray_forany>::dup (
    const Bound::UnsignedShortArray_slice * _tao_slice
  )
{
  return Bound::UnsignedShortArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedShortArray_forany>::copy (
    Bound::UnsignedShortArray_slice * _tao_to,
    const Bound::UnsignedShortArray_slice * _tao_from
  )
{
  Bound::UnsignedShortArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedShortArray_forany>::zero (
    Bound::UnsignedShortArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::UShort ();
    }
}

ACE_INLINE
Bound::UnsignedShortArray_slice *
TAO::Array_Traits<Bound::UnsignedShortArray_forany>::alloc (void)
{
  return Bound::UnsignedShortArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::LongArray_forany>::free (
    Bound::LongArray_slice * _tao_slice
  )
{
  Bound::LongArray_free (_tao_slice);
}

ACE_INLINE
Bound::LongArray_slice *
TAO::Array_Traits<Bound::LongArray_forany>::dup (
    const Bound::LongArray_slice * _tao_slice
  )
{
  return Bound::LongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::LongArray_forany>::copy (
    Bound::LongArray_slice * _tao_to,
    const Bound::LongArray_slice * _tao_from
  )
{
  Bound::LongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::LongArray_forany>::zero (
    Bound::LongArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
Bound::LongArray_slice *
TAO::Array_Traits<Bound::LongArray_forany>::alloc (void)
{
  return Bound::LongArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedLongArray_forany>::free (
    Bound::UnsignedLongArray_slice * _tao_slice
  )
{
  Bound::UnsignedLongArray_free (_tao_slice);
}

ACE_INLINE
Bound::UnsignedLongArray_slice *
TAO::Array_Traits<Bound::UnsignedLongArray_forany>::dup (
    const Bound::UnsignedLongArray_slice * _tao_slice
  )
{
  return Bound::UnsignedLongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedLongArray_forany>::copy (
    Bound::UnsignedLongArray_slice * _tao_to,
    const Bound::UnsignedLongArray_slice * _tao_from
  )
{
  Bound::UnsignedLongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedLongArray_forany>::zero (
    Bound::UnsignedLongArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::ULong ();
    }
}

ACE_INLINE
Bound::UnsignedLongArray_slice *
TAO::Array_Traits<Bound::UnsignedLongArray_forany>::alloc (void)
{
  return Bound::UnsignedLongArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::LongLongArray_forany>::free (
    Bound::LongLongArray_slice * _tao_slice
  )
{
  Bound::LongLongArray_free (_tao_slice);
}

ACE_INLINE
Bound::LongLongArray_slice *
TAO::Array_Traits<Bound::LongLongArray_forany>::dup (
    const Bound::LongLongArray_slice * _tao_slice
  )
{
  return Bound::LongLongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::LongLongArray_forany>::copy (
    Bound::LongLongArray_slice * _tao_to,
    const Bound::LongLongArray_slice * _tao_from
  )
{
  Bound::LongLongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::LongLongArray_forany>::zero (
    Bound::LongLongArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::LongLong ();
    }
}

ACE_INLINE
Bound::LongLongArray_slice *
TAO::Array_Traits<Bound::LongLongArray_forany>::alloc (void)
{
  return Bound::LongLongArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedLongLongArray_forany>::free (
    Bound::UnsignedLongLongArray_slice * _tao_slice
  )
{
  Bound::UnsignedLongLongArray_free (_tao_slice);
}

ACE_INLINE
Bound::UnsignedLongLongArray_slice *
TAO::Array_Traits<Bound::UnsignedLongLongArray_forany>::dup (
    const Bound::UnsignedLongLongArray_slice * _tao_slice
  )
{
  return Bound::UnsignedLongLongArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedLongLongArray_forany>::copy (
    Bound::UnsignedLongLongArray_slice * _tao_to,
    const Bound::UnsignedLongLongArray_slice * _tao_from
  )
{
  Bound::UnsignedLongLongArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::UnsignedLongLongArray_forany>::zero (
    Bound::UnsignedLongLongArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::ULongLong ();
    }
}

ACE_INLINE
Bound::UnsignedLongLongArray_slice *
TAO::Array_Traits<Bound::UnsignedLongLongArray_forany>::alloc (void)
{
  return Bound::UnsignedLongLongArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::CharArray_forany>::free (
    Bound::CharArray_slice * _tao_slice
  )
{
  Bound::CharArray_free (_tao_slice);
}

ACE_INLINE
Bound::CharArray_slice *
TAO::Array_Traits<Bound::CharArray_forany>::dup (
    const Bound::CharArray_slice * _tao_slice
  )
{
  return Bound::CharArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::CharArray_forany>::copy (
    Bound::CharArray_slice * _tao_to,
    const Bound::CharArray_slice * _tao_from
  )
{
  Bound::CharArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::CharArray_forany>::zero (
    Bound::CharArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
Bound::CharArray_slice *
TAO::Array_Traits<Bound::CharArray_forany>::alloc (void)
{
  return Bound::CharArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::WCharArray_forany>::free (
    Bound::WCharArray_slice * _tao_slice
  )
{
  Bound::WCharArray_free (_tao_slice);
}

ACE_INLINE
Bound::WCharArray_slice *
TAO::Array_Traits<Bound::WCharArray_forany>::dup (
    const Bound::WCharArray_slice * _tao_slice
  )
{
  return Bound::WCharArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::WCharArray_forany>::copy (
    Bound::WCharArray_slice * _tao_to,
    const Bound::WCharArray_slice * _tao_from
  )
{
  Bound::WCharArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::WCharArray_forany>::zero (
    Bound::WCharArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::WChar ();
    }
}

ACE_INLINE
Bound::WCharArray_slice *
TAO::Array_Traits<Bound::WCharArray_forany>::alloc (void)
{
  return Bound::WCharArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::FloatArray_forany>::free (
    Bound::FloatArray_slice * _tao_slice
  )
{
  Bound::FloatArray_free (_tao_slice);
}

ACE_INLINE
Bound::FloatArray_slice *
TAO::Array_Traits<Bound::FloatArray_forany>::dup (
    const Bound::FloatArray_slice * _tao_slice
  )
{
  return Bound::FloatArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::FloatArray_forany>::copy (
    Bound::FloatArray_slice * _tao_to,
    const Bound::FloatArray_slice * _tao_from
  )
{
  Bound::FloatArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::FloatArray_forany>::zero (
    Bound::FloatArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Float ();
    }
}

ACE_INLINE
Bound::FloatArray_slice *
TAO::Array_Traits<Bound::FloatArray_forany>::alloc (void)
{
  return Bound::FloatArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::DoubleArray_forany>::free (
    Bound::DoubleArray_slice * _tao_slice
  )
{
  Bound::DoubleArray_free (_tao_slice);
}

ACE_INLINE
Bound::DoubleArray_slice *
TAO::Array_Traits<Bound::DoubleArray_forany>::dup (
    const Bound::DoubleArray_slice * _tao_slice
  )
{
  return Bound::DoubleArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::DoubleArray_forany>::copy (
    Bound::DoubleArray_slice * _tao_to,
    const Bound::DoubleArray_slice * _tao_from
  )
{
  Bound::DoubleArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::DoubleArray_forany>::zero (
    Bound::DoubleArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Double ();
    }
}

ACE_INLINE
Bound::DoubleArray_slice *
TAO::Array_Traits<Bound::DoubleArray_forany>::alloc (void)
{
  return Bound::DoubleArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::LongDoubleArray_forany>::free (
    Bound::LongDoubleArray_slice * _tao_slice
  )
{
  Bound::LongDoubleArray_free (_tao_slice);
}

ACE_INLINE
Bound::LongDoubleArray_slice *
TAO::Array_Traits<Bound::LongDoubleArray_forany>::dup (
    const Bound::LongDoubleArray_slice * _tao_slice
  )
{
  return Bound::LongDoubleArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::LongDoubleArray_forany>::copy (
    Bound::LongDoubleArray_slice * _tao_to,
    const Bound::LongDoubleArray_slice * _tao_from
  )
{
  Bound::LongDoubleArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::LongDoubleArray_forany>::zero (
    Bound::LongDoubleArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::LongDouble ();
    }
}

ACE_INLINE
Bound::LongDoubleArray_slice *
TAO::Array_Traits<Bound::LongDoubleArray_forany>::alloc (void)
{
  return Bound::LongDoubleArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::BooleanArray_forany>::free (
    Bound::BooleanArray_slice * _tao_slice
  )
{
  Bound::BooleanArray_free (_tao_slice);
}

ACE_INLINE
Bound::BooleanArray_slice *
TAO::Array_Traits<Bound::BooleanArray_forany>::dup (
    const Bound::BooleanArray_slice * _tao_slice
  )
{
  return Bound::BooleanArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::BooleanArray_forany>::copy (
    Bound::BooleanArray_slice * _tao_to,
    const Bound::BooleanArray_slice * _tao_from
  )
{
  Bound::BooleanArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::BooleanArray_forany>::zero (
    Bound::BooleanArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Boolean ();
    }
}

ACE_INLINE
Bound::BooleanArray_slice *
TAO::Array_Traits<Bound::BooleanArray_forany>::alloc (void)
{
  return Bound::BooleanArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::OctetArray_forany>::free (
    Bound::OctetArray_slice * _tao_slice
  )
{
  Bound::OctetArray_free (_tao_slice);
}

ACE_INLINE
Bound::OctetArray_slice *
TAO::Array_Traits<Bound::OctetArray_forany>::dup (
    const Bound::OctetArray_slice * _tao_slice
  )
{
  return Bound::OctetArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::OctetArray_forany>::copy (
    Bound::OctetArray_slice * _tao_to,
    const Bound::OctetArray_slice * _tao_from
  )
{
  Bound::OctetArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::OctetArray_forany>::zero (
    Bound::OctetArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Octet ();
    }
}

ACE_INLINE
Bound::OctetArray_slice *
TAO::Array_Traits<Bound::OctetArray_forany>::alloc (void)
{
  return Bound::OctetArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::EnumTypeArray_forany>::free (
    Bound::EnumTypeArray_slice * _tao_slice
  )
{
  Bound::EnumTypeArray_free (_tao_slice);
}

ACE_INLINE
Bound::EnumTypeArray_slice *
TAO::Array_Traits<Bound::EnumTypeArray_forany>::dup (
    const Bound::EnumTypeArray_slice * _tao_slice
  )
{
  return Bound::EnumTypeArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::EnumTypeArray_forany>::copy (
    Bound::EnumTypeArray_slice * _tao_to,
    const Bound::EnumTypeArray_slice * _tao_from
  )
{
  Bound::EnumTypeArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::EnumTypeArray_forany>::zero (
    Bound::EnumTypeArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = Bound::EnumType ();
    }
}

ACE_INLINE
Bound::EnumTypeArray_slice *
TAO::Array_Traits<Bound::EnumTypeArray_forany>::alloc (void)
{
  return Bound::EnumTypeArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::StringArray_forany>::free (
    Bound::StringArray_slice * _tao_slice
  )
{
  Bound::StringArray_free (_tao_slice);
}

ACE_INLINE
Bound::StringArray_slice *
TAO::Array_Traits<Bound::StringArray_forany>::dup (
    const Bound::StringArray_slice * _tao_slice
  )
{
  return Bound::StringArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::StringArray_forany>::copy (
    Bound::StringArray_slice * _tao_to,
    const Bound::StringArray_slice * _tao_from
  )
{
  Bound::StringArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::StringArray_forany>::zero (
    Bound::StringArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
Bound::StringArray_slice *
TAO::Array_Traits<Bound::StringArray_forany>::alloc (void)
{
  return Bound::StringArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Bound::WStringArray_forany>::free (
    Bound::WStringArray_slice * _tao_slice
  )
{
  Bound::WStringArray_free (_tao_slice);
}

ACE_INLINE
Bound::WStringArray_slice *
TAO::Array_Traits<Bound::WStringArray_forany>::dup (
    const Bound::WStringArray_slice * _tao_slice
  )
{
  return Bound::WStringArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::WStringArray_forany>::copy (
    Bound::WStringArray_slice * _tao_to,
    const Bound::WStringArray_slice * _tao_from
  )
{
  Bound::WStringArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Bound::WStringArray_forany>::zero (
    Bound::WStringArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::TAO::WString_Manager ();
    }
}

ACE_INLINE
Bound::WStringArray_slice *
TAO::Array_Traits<Bound::WStringArray_forany>::alloc (void)
{
  return Bound::WStringArray_alloc ();
}


