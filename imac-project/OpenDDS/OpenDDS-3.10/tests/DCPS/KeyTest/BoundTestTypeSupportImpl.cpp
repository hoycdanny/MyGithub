/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file BoundTest.idl */
#include "BoundTestTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Bound */



/* Begin ENUM: EnumType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Bound::EnumType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, Bound::EnumType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<Bound::EnumType>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_Bound_EnumType_names[] = {
  "FIRST",
  "SECOND",
  "THIRD"
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: EnumType */


/* Begin STRUCT: SimpleBoundedMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::SimpleBoundedMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.short_field);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.unsigned_short_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.long_field);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.unsigned_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.long_long_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.unsigned_long_long_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.char_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_wchar(stru.wchar_field));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.float_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.double_field);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.long_double_field);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_boolean(stru.boolean_field));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.octet_field));
  find_size_ulong(size, padding);
}

bool operator<<(Serializer& strm, const Bound::SimpleBoundedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.short_field)
    && (strm << stru.unsigned_short_field)
    && (strm << stru.long_field)
    && (strm << stru.unsigned_long_field)
    && (strm << stru.long_long_field)
    && (strm << stru.unsigned_long_long_field)
    && (strm << ACE_OutputCDR::from_char(stru.char_field))
    && (strm << ACE_OutputCDR::from_wchar(stru.wchar_field))
    && (strm << stru.float_field)
    && (strm << stru.double_field)
    && (strm << stru.long_double_field)
    && (strm << ACE_OutputCDR::from_boolean(stru.boolean_field))
    && (strm << ACE_OutputCDR::from_octet(stru.octet_field))
    && (strm << stru.enum_field);
}

bool operator>>(Serializer& strm, Bound::SimpleBoundedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.short_field)
    && (strm >> stru.unsigned_short_field)
    && (strm >> stru.long_field)
    && (strm >> stru.unsigned_long_field)
    && (strm >> stru.long_long_field)
    && (strm >> stru.unsigned_long_long_field)
    && (strm >> ACE_InputCDR::to_char(stru.char_field))
    && (strm >> ACE_InputCDR::to_wchar(stru.wchar_field))
    && (strm >> stru.float_field)
    && (strm >> stru.double_field)
    && (strm >> stru.long_double_field)
    && (strm >> ACE_InputCDR::to_boolean(stru.boolean_field))
    && (strm >> ACE_InputCDR::to_octet(stru.octet_field))
    && (strm >> stru.enum_field);
}

size_t gen_max_marshaled_size(const Bound::SimpleBoundedMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return align ? 72 : 66;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::SimpleBoundedMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::SimpleBoundedMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::SimpleBoundedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::SimpleBoundedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr SimpleBoundedMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<SimpleBoundedMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr SimpleBoundedMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SimpleBoundedMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr SimpleBoundedMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SimpleBoundedMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<SimpleBoundedMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& SimpleBoundedMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<SimpleBoundedMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool SimpleBoundedMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* SimpleBoundedMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
SimpleBoundedMessageTypeSupport::_ptr_type SimpleBoundedMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::SimpleBoundedMessage> : MetaStruct {
  typedef Bound::SimpleBoundedMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::SimpleBoundedMessage& typed = *static_cast<const Bound::SimpleBoundedMessage*>(stru);
    if (std::strcmp(field, "short_field") == 0) {
      return typed.short_field;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return typed.unsigned_short_field;
    }
    if (std::strcmp(field, "long_field") == 0) {
      return typed.long_field;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return typed.unsigned_long_field;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return typed.long_long_field;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return typed.unsigned_long_long_field;
    }
    if (std::strcmp(field, "char_field") == 0) {
      return typed.char_field;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return typed.wchar_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return typed.float_field;
    }
    if (std::strcmp(field, "double_field") == 0) {
      return typed.double_field;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return typed.long_double_field;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return typed.boolean_field;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return typed.octet_field;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return gen_Bound_EnumType_names[typed.enum_field];
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "short_field") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'short_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 2);
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      ACE_CDR::UShort val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'unsigned_short_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 2);
    }
    if (std::strcmp(field, "long_field") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'unsigned_long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      ACE_CDR::LongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'unsigned_long_long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "char_field") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'char_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      ACE_CDR::WChar val;
      if (!(ser >> ACE_InputCDR::to_wchar(val))) {
        throw std::runtime_error("Field 'wchar_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::Octet len;
      if (!(ser >> ACE_InputCDR::to_octet(len))) {
        throw std::runtime_error("WChar 'wchar_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "float_field") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'float_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "double_field") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'double_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      ACE_CDR::LongDouble val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_double_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 16);
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      ACE_CDR::Boolean val;
      if (!(ser >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'boolean_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "octet_field") == 0) {
      ACE_CDR::Octet val;
      if (!(ser >> ACE_InputCDR::to_octet(val))) {
        throw std::runtime_error("Field 'octet_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "enum_field") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'enum_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::SimpleBoundedMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "short_field") == 0) {
      return make_field_cmp(&T::short_field, next);
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return make_field_cmp(&T::unsigned_short_field, next);
    }
    if (std::strcmp(field, "long_field") == 0) {
      return make_field_cmp(&T::long_field, next);
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return make_field_cmp(&T::unsigned_long_field, next);
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return make_field_cmp(&T::long_long_field, next);
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return make_field_cmp(&T::unsigned_long_long_field, next);
    }
    if (std::strcmp(field, "char_field") == 0) {
      return make_field_cmp(&T::char_field, next);
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return make_field_cmp(&T::wchar_field, next);
    }
    if (std::strcmp(field, "float_field") == 0) {
      return make_field_cmp(&T::float_field, next);
    }
    if (std::strcmp(field, "double_field") == 0) {
      return make_field_cmp(&T::double_field, next);
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return make_field_cmp(&T::long_double_field, next);
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return make_field_cmp(&T::boolean_field, next);
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return make_field_cmp(&T::octet_field, next);
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return make_field_cmp(&T::enum_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"short_field", "unsigned_short_field", "long_field", "unsigned_long_field", "long_long_field", "unsigned_long_long_field", "char_field", "wchar_field", "float_field", "double_field", "long_double_field", "boolean_field", "octet_field", "enum_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "short_field") == 0) {
      return &static_cast<const T*>(stru)->short_field;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return &static_cast<const T*>(stru)->unsigned_short_field;
    }
    if (std::strcmp(field, "long_field") == 0) {
      return &static_cast<const T*>(stru)->long_field;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return &static_cast<const T*>(stru)->unsigned_long_field;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return &static_cast<const T*>(stru)->long_long_field;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return &static_cast<const T*>(stru)->unsigned_long_long_field;
    }
    if (std::strcmp(field, "char_field") == 0) {
      return &static_cast<const T*>(stru)->char_field;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return &static_cast<const T*>(stru)->wchar_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return &static_cast<const T*>(stru)->float_field;
    }
    if (std::strcmp(field, "double_field") == 0) {
      return &static_cast<const T*>(stru)->double_field;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return &static_cast<const T*>(stru)->long_double_field;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return &static_cast<const T*>(stru)->boolean_field;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return &static_cast<const T*>(stru)->octet_field;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return &static_cast<const T*>(stru)->enum_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "short_field") == 0) {
      static_cast<T*>(lhs)->short_field = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      static_cast<T*>(lhs)->unsigned_short_field = *static_cast<const CORBA::UShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_field") == 0) {
      static_cast<T*>(lhs)->long_field = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      static_cast<T*>(lhs)->unsigned_long_field = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      static_cast<T*>(lhs)->long_long_field = *static_cast<const CORBA::LongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      static_cast<T*>(lhs)->unsigned_long_long_field = *static_cast<const CORBA::ULongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "char_field") == 0) {
      static_cast<T*>(lhs)->char_field = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      static_cast<T*>(lhs)->wchar_field = *static_cast<const CORBA::WChar*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "float_field") == 0) {
      static_cast<T*>(lhs)->float_field = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "double_field") == 0) {
      static_cast<T*>(lhs)->double_field = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      static_cast<T*>(lhs)->long_double_field = *static_cast<const CORBA::LongDouble*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      static_cast<T*>(lhs)->boolean_field = *static_cast<const CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      static_cast<T*>(lhs)->octet_field = *static_cast<const CORBA::Octet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      static_cast<T*>(lhs)->enum_field = *static_cast<const Bound::EnumType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "short_field") == 0) {
      return static_cast<const T*>(lhs)->short_field == static_cast<const T*>(rhs)->short_field;
    }
    if (std::strcmp(field, "unsigned_short_field") == 0) {
      return static_cast<const T*>(lhs)->unsigned_short_field == static_cast<const T*>(rhs)->unsigned_short_field;
    }
    if (std::strcmp(field, "long_field") == 0) {
      return static_cast<const T*>(lhs)->long_field == static_cast<const T*>(rhs)->long_field;
    }
    if (std::strcmp(field, "unsigned_long_field") == 0) {
      return static_cast<const T*>(lhs)->unsigned_long_field == static_cast<const T*>(rhs)->unsigned_long_field;
    }
    if (std::strcmp(field, "long_long_field") == 0) {
      return static_cast<const T*>(lhs)->long_long_field == static_cast<const T*>(rhs)->long_long_field;
    }
    if (std::strcmp(field, "unsigned_long_long_field") == 0) {
      return static_cast<const T*>(lhs)->unsigned_long_long_field == static_cast<const T*>(rhs)->unsigned_long_long_field;
    }
    if (std::strcmp(field, "char_field") == 0) {
      return static_cast<const T*>(lhs)->char_field == static_cast<const T*>(rhs)->char_field;
    }
    if (std::strcmp(field, "wchar_field") == 0) {
      return static_cast<const T*>(lhs)->wchar_field == static_cast<const T*>(rhs)->wchar_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return static_cast<const T*>(lhs)->float_field == static_cast<const T*>(rhs)->float_field;
    }
    if (std::strcmp(field, "double_field") == 0) {
      return static_cast<const T*>(lhs)->double_field == static_cast<const T*>(rhs)->double_field;
    }
    if (std::strcmp(field, "long_double_field") == 0) {
      return static_cast<const T*>(lhs)->long_double_field == static_cast<const T*>(rhs)->long_double_field;
    }
    if (std::strcmp(field, "boolean_field") == 0) {
      return static_cast<const T*>(lhs)->boolean_field == static_cast<const T*>(rhs)->boolean_field;
    }
    if (std::strcmp(field, "octet_field") == 0) {
      return static_cast<const T*>(lhs)->octet_field == static_cast<const T*>(rhs)->octet_field;
    }
    if (std::strcmp(field, "enum_field") == 0) {
      return static_cast<const T*>(lhs)->enum_field == static_cast<const T*>(rhs)->enum_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::SimpleBoundedMessage>()
{
  static MetaStructImpl<Bound::SimpleBoundedMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::SimpleBoundedMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::SimpleBoundedMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SimpleBoundedMessage */


/* Begin STRUCT: StringMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::StringMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.string_field.in()) + 1;
}

bool operator<<(Serializer& strm, const Bound::StringMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.string_field.in());
}

bool operator>>(Serializer& strm, Bound::StringMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.string_field.out());
}

size_t gen_max_marshaled_size(const Bound::StringMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::StringMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::StringMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::StringMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::StringMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr StringMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<StringMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr StringMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<StringMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr StringMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<StringMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<StringMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& StringMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<StringMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool StringMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* StringMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
StringMessageTypeSupport::_ptr_type StringMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::StringMessage> : MetaStruct {
  typedef Bound::StringMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::StringMessage& typed = *static_cast<const Bound::StringMessage*>(stru);
    if (std::strcmp(field, "string_field") == 0) {
      return typed.string_field.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "string_field") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'string_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'string_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::StringMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "string_field") == 0) {
      return make_field_cmp(&T::string_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"string_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "string_field") == 0) {
      return &static_cast<const T*>(stru)->string_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "string_field") == 0) {
      static_cast<T*>(lhs)->string_field = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "string_field") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->string_field.in(), static_cast<const T*>(rhs)->string_field.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::StringMessage>()
{
  static MetaStructImpl<Bound::StringMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::StringMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::StringMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StringMessage */


/* Begin STRUCT: WStringMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::WStringMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.wstring_field.in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
}

bool operator<<(Serializer& strm, const Bound::WStringMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.wstring_field.in());
}

bool operator>>(Serializer& strm, Bound::WStringMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.wstring_field.out());
}

size_t gen_max_marshaled_size(const Bound::WStringMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::WStringMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::WStringMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::WStringMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::WStringMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr WStringMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<WStringMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr WStringMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<WStringMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr WStringMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<WStringMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<WStringMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& WStringMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<WStringMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool WStringMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* WStringMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
WStringMessageTypeSupport::_ptr_type WStringMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::WStringMessage> : MetaStruct {
  typedef Bound::WStringMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::WStringMessage& typed = *static_cast<const Bound::WStringMessage*>(stru);
    if (std::strcmp(field, "wstring_field") == 0) {
      return typed.wstring_field.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "wstring_field") == 0) {
      TAO::WString_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'wstring_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'wstring_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::WStringMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "wstring_field") == 0) {
      return make_field_cmp(&T::wstring_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"wstring_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "wstring_field") == 0) {
      return &static_cast<const T*>(stru)->wstring_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "wstring_field") == 0) {
      static_cast<T*>(lhs)->wstring_field = *static_cast<const TAO::WString_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "wstring_field") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->wstring_field.in(), static_cast<const T*>(rhs)->wstring_field.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::WStringMessage>()
{
  static MetaStructImpl<Bound::WStringMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::WStringMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::WStringMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: WStringMessage */


/* Begin TYPEDEF: ShortArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::ShortArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += 10 * gen_max_marshaled_size(CORBA::Short());
}

bool operator<<(Serializer& strm, const Bound::ShortArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_short_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::ShortArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_short_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::ShortArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ShortArray */


/* Begin TYPEDEF: UnsignedShortArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::UnsignedShortArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += 10 * gen_max_marshaled_size(CORBA::UShort());
}

bool operator<<(Serializer& strm, const Bound::UnsignedShortArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ushort_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::UnsignedShortArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ushort_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::UnsignedShortArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedShortArray */


/* Begin TYPEDEF: LongArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::LongArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 10 * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Bound::LongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_long_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::LongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_long_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::LongArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongArray */


/* Begin TYPEDEF: UnsignedLongArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::UnsignedLongArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 10 * gen_max_marshaled_size(CORBA::ULong());
}

bool operator<<(Serializer& strm, const Bound::UnsignedLongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ulong_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::UnsignedLongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ulong_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::UnsignedLongArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedLongArray */


/* Begin TYPEDEF: LongLongArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::LongLongArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 10 * gen_max_marshaled_size(CORBA::LongLong());
}

bool operator<<(Serializer& strm, const Bound::LongLongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_longlong_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::LongLongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_longlong_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::LongLongArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongLongArray */


/* Begin TYPEDEF: UnsignedLongLongArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::UnsignedLongLongArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 10 * gen_max_marshaled_size(CORBA::ULongLong());
}

bool operator<<(Serializer& strm, const Bound::UnsignedLongLongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_ulonglong_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::UnsignedLongLongArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_ulonglong_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::UnsignedLongLongArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: UnsignedLongLongArray */


/* Begin TYPEDEF: CharArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::CharArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 10 * max_marshaled_size_char();
}

bool operator<<(Serializer& strm, const Bound::CharArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_char_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::CharArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_char_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::CharArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: CharArray */


/* Begin TYPEDEF: WCharArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::WCharArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 10 * max_marshaled_size_wchar();
}

bool operator<<(Serializer& strm, const Bound::WCharArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_wchar_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::WCharArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_wchar_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::WCharArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 10; ++i) {
    ACE_CDR::Octet o;
    ser >> ACE_InputCDR::to_octet(o);
    ser.skip(o);
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WCharArray */


/* Begin TYPEDEF: FloatArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::FloatArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += 10 * gen_max_marshaled_size(CORBA::Float());
}

bool operator<<(Serializer& strm, const Bound::FloatArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_float_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::FloatArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_float_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::FloatArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FloatArray */


/* Begin TYPEDEF: DoubleArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::DoubleArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 10 * gen_max_marshaled_size(CORBA::Double());
}

bool operator<<(Serializer& strm, const Bound::DoubleArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_double_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::DoubleArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_double_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::DoubleArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 8);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: DoubleArray */


/* Begin TYPEDEF: LongDoubleArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::LongDoubleArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += 10 * gen_max_marshaled_size(CORBA::LongDouble());
}

bool operator<<(Serializer& strm, const Bound::LongDoubleArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_longdouble_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::LongDoubleArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_longdouble_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::LongDoubleArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 16);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongDoubleArray */


/* Begin TYPEDEF: BooleanArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::BooleanArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 10 * max_marshaled_size_boolean();
}

bool operator<<(Serializer& strm, const Bound::BooleanArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_boolean_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::BooleanArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_boolean_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::BooleanArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: BooleanArray */


/* Begin TYPEDEF: OctetArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::OctetArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 10 * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const Bound::OctetArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_octet_array(arr.in(), 10);
}

bool operator>>(Serializer& strm, Bound::OctetArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_octet_array(arr.out(), 10);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::OctetArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 1);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetArray */


/* Begin TYPEDEF: EnumTypeArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::EnumTypeArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += 9 * max_marshaled_size_ulong();
}

bool operator<<(Serializer& strm, const Bound::EnumTypeArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Bound::EnumTypeArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm >> arr[i0])) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::EnumTypeArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(10, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: EnumTypeArray */


/* Begin STRUCT: SimpleBoundedArrayMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::SimpleBoundedArrayMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  Bound::ShortArray_forany stru_short_array(const_cast<Bound::ShortArray_slice*>(stru.short_array));
  Bound::UnsignedShortArray_forany stru_unsigned_short_array(const_cast<Bound::UnsignedShortArray_slice*>(stru.unsigned_short_array));
  Bound::LongArray_forany stru_long_array(const_cast<Bound::LongArray_slice*>(stru.long_array));
  Bound::UnsignedLongArray_forany stru_unsigned_long_array(const_cast<Bound::UnsignedLongArray_slice*>(stru.unsigned_long_array));
  Bound::LongLongArray_forany stru_long_long_array(const_cast<Bound::LongLongArray_slice*>(stru.long_long_array));
  Bound::UnsignedLongLongArray_forany stru_unsigned_long_long_array(const_cast<Bound::UnsignedLongLongArray_slice*>(stru.unsigned_long_long_array));
  Bound::CharArray_forany stru_char_array(const_cast<Bound::CharArray_slice*>(stru.char_array));
  Bound::WCharArray_forany stru_wchar_array(const_cast<Bound::WCharArray_slice*>(stru.wchar_array));
  Bound::FloatArray_forany stru_float_array(const_cast<Bound::FloatArray_slice*>(stru.float_array));
  Bound::DoubleArray_forany stru_double_array(const_cast<Bound::DoubleArray_slice*>(stru.double_array));
  Bound::LongDoubleArray_forany stru_long_double_array(const_cast<Bound::LongDoubleArray_slice*>(stru.long_double_array));
  Bound::BooleanArray_forany stru_boolean_array(const_cast<Bound::BooleanArray_slice*>(stru.boolean_array));
  Bound::OctetArray_forany stru_octet_array(const_cast<Bound::OctetArray_slice*>(stru.octet_array));
  Bound::EnumTypeArray_forany stru_enum_array(const_cast<Bound::EnumTypeArray_slice*>(stru.enum_array));
  gen_find_size(stru_short_array, size, padding);
  gen_find_size(stru_unsigned_short_array, size, padding);
  gen_find_size(stru_long_array, size, padding);
  gen_find_size(stru_unsigned_long_array, size, padding);
  gen_find_size(stru_long_long_array, size, padding);
  gen_find_size(stru_unsigned_long_long_array, size, padding);
  gen_find_size(stru_char_array, size, padding);
  gen_find_size(stru_wchar_array, size, padding);
  gen_find_size(stru_float_array, size, padding);
  gen_find_size(stru_double_array, size, padding);
  gen_find_size(stru_long_double_array, size, padding);
  gen_find_size(stru_boolean_array, size, padding);
  gen_find_size(stru_octet_array, size, padding);
  gen_find_size(stru_enum_array, size, padding);
}

bool operator<<(Serializer& strm, const Bound::SimpleBoundedArrayMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Bound::ShortArray_forany stru_short_array(const_cast<Bound::ShortArray_slice*>(stru.short_array));
  Bound::UnsignedShortArray_forany stru_unsigned_short_array(const_cast<Bound::UnsignedShortArray_slice*>(stru.unsigned_short_array));
  Bound::LongArray_forany stru_long_array(const_cast<Bound::LongArray_slice*>(stru.long_array));
  Bound::UnsignedLongArray_forany stru_unsigned_long_array(const_cast<Bound::UnsignedLongArray_slice*>(stru.unsigned_long_array));
  Bound::LongLongArray_forany stru_long_long_array(const_cast<Bound::LongLongArray_slice*>(stru.long_long_array));
  Bound::UnsignedLongLongArray_forany stru_unsigned_long_long_array(const_cast<Bound::UnsignedLongLongArray_slice*>(stru.unsigned_long_long_array));
  Bound::CharArray_forany stru_char_array(const_cast<Bound::CharArray_slice*>(stru.char_array));
  Bound::WCharArray_forany stru_wchar_array(const_cast<Bound::WCharArray_slice*>(stru.wchar_array));
  Bound::FloatArray_forany stru_float_array(const_cast<Bound::FloatArray_slice*>(stru.float_array));
  Bound::DoubleArray_forany stru_double_array(const_cast<Bound::DoubleArray_slice*>(stru.double_array));
  Bound::LongDoubleArray_forany stru_long_double_array(const_cast<Bound::LongDoubleArray_slice*>(stru.long_double_array));
  Bound::BooleanArray_forany stru_boolean_array(const_cast<Bound::BooleanArray_slice*>(stru.boolean_array));
  Bound::OctetArray_forany stru_octet_array(const_cast<Bound::OctetArray_slice*>(stru.octet_array));
  Bound::EnumTypeArray_forany stru_enum_array(const_cast<Bound::EnumTypeArray_slice*>(stru.enum_array));
  return (strm << stru_short_array)
    && (strm << stru_unsigned_short_array)
    && (strm << stru_long_array)
    && (strm << stru_unsigned_long_array)
    && (strm << stru_long_long_array)
    && (strm << stru_unsigned_long_long_array)
    && (strm << stru_char_array)
    && (strm << stru_wchar_array)
    && (strm << stru_float_array)
    && (strm << stru_double_array)
    && (strm << stru_long_double_array)
    && (strm << stru_boolean_array)
    && (strm << stru_octet_array)
    && (strm << stru_enum_array);
}

bool operator>>(Serializer& strm, Bound::SimpleBoundedArrayMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Bound::ShortArray_forany stru_short_array(const_cast<Bound::ShortArray_slice*>(stru.short_array));
  Bound::UnsignedShortArray_forany stru_unsigned_short_array(const_cast<Bound::UnsignedShortArray_slice*>(stru.unsigned_short_array));
  Bound::LongArray_forany stru_long_array(const_cast<Bound::LongArray_slice*>(stru.long_array));
  Bound::UnsignedLongArray_forany stru_unsigned_long_array(const_cast<Bound::UnsignedLongArray_slice*>(stru.unsigned_long_array));
  Bound::LongLongArray_forany stru_long_long_array(const_cast<Bound::LongLongArray_slice*>(stru.long_long_array));
  Bound::UnsignedLongLongArray_forany stru_unsigned_long_long_array(const_cast<Bound::UnsignedLongLongArray_slice*>(stru.unsigned_long_long_array));
  Bound::CharArray_forany stru_char_array(const_cast<Bound::CharArray_slice*>(stru.char_array));
  Bound::WCharArray_forany stru_wchar_array(const_cast<Bound::WCharArray_slice*>(stru.wchar_array));
  Bound::FloatArray_forany stru_float_array(const_cast<Bound::FloatArray_slice*>(stru.float_array));
  Bound::DoubleArray_forany stru_double_array(const_cast<Bound::DoubleArray_slice*>(stru.double_array));
  Bound::LongDoubleArray_forany stru_long_double_array(const_cast<Bound::LongDoubleArray_slice*>(stru.long_double_array));
  Bound::BooleanArray_forany stru_boolean_array(const_cast<Bound::BooleanArray_slice*>(stru.boolean_array));
  Bound::OctetArray_forany stru_octet_array(const_cast<Bound::OctetArray_slice*>(stru.octet_array));
  Bound::EnumTypeArray_forany stru_enum_array(const_cast<Bound::EnumTypeArray_slice*>(stru.enum_array));
  return (strm >> stru_short_array)
    && (strm >> stru_unsigned_short_array)
    && (strm >> stru_long_array)
    && (strm >> stru_unsigned_long_array)
    && (strm >> stru_long_long_array)
    && (strm >> stru_unsigned_long_long_array)
    && (strm >> stru_char_array)
    && (strm >> stru_wchar_array)
    && (strm >> stru_float_array)
    && (strm >> stru_double_array)
    && (strm >> stru_long_double_array)
    && (strm >> stru_boolean_array)
    && (strm >> stru_octet_array)
    && (strm >> stru_enum_array);
}

size_t gen_max_marshaled_size(const Bound::SimpleBoundedArrayMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 660;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::SimpleBoundedArrayMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::SimpleBoundedArrayMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::SimpleBoundedArrayMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::SimpleBoundedArrayMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr SimpleBoundedArrayMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<SimpleBoundedArrayMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr SimpleBoundedArrayMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SimpleBoundedArrayMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr SimpleBoundedArrayMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SimpleBoundedArrayMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<SimpleBoundedArrayMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& SimpleBoundedArrayMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<SimpleBoundedArrayMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool SimpleBoundedArrayMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* SimpleBoundedArrayMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
SimpleBoundedArrayMessageTypeSupport::_ptr_type SimpleBoundedArrayMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::SimpleBoundedArrayMessage> : MetaStruct {
  typedef Bound::SimpleBoundedArrayMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::SimpleBoundedArrayMessage& typed = *static_cast<const Bound::SimpleBoundedArrayMessage*>(stru);
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedArrayMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    gen_skip_over(ser, static_cast<Bound::ShortArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::UnsignedShortArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::LongArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::UnsignedLongArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::LongLongArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::UnsignedLongLongArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::CharArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::WCharArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::FloatArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::DoubleArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::LongDoubleArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::BooleanArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::OctetArray_forany*>(0));
    gen_skip_over(ser, static_cast<Bound::EnumTypeArray_forany*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::SimpleBoundedArrayMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedArrayMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"short_array", "unsigned_short_array", "long_array", "unsigned_long_array", "long_long_array", "unsigned_long_long_array", "char_array", "wchar_array", "float_array", "double_array", "long_double_array", "boolean_array", "octet_array", "enum_array", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "short_array") == 0) {
      return &static_cast<const T*>(stru)->short_array;
    }
    if (std::strcmp(field, "unsigned_short_array") == 0) {
      return &static_cast<const T*>(stru)->unsigned_short_array;
    }
    if (std::strcmp(field, "long_array") == 0) {
      return &static_cast<const T*>(stru)->long_array;
    }
    if (std::strcmp(field, "unsigned_long_array") == 0) {
      return &static_cast<const T*>(stru)->unsigned_long_array;
    }
    if (std::strcmp(field, "long_long_array") == 0) {
      return &static_cast<const T*>(stru)->long_long_array;
    }
    if (std::strcmp(field, "unsigned_long_long_array") == 0) {
      return &static_cast<const T*>(stru)->unsigned_long_long_array;
    }
    if (std::strcmp(field, "char_array") == 0) {
      return &static_cast<const T*>(stru)->char_array;
    }
    if (std::strcmp(field, "wchar_array") == 0) {
      return &static_cast<const T*>(stru)->wchar_array;
    }
    if (std::strcmp(field, "float_array") == 0) {
      return &static_cast<const T*>(stru)->float_array;
    }
    if (std::strcmp(field, "double_array") == 0) {
      return &static_cast<const T*>(stru)->double_array;
    }
    if (std::strcmp(field, "long_double_array") == 0) {
      return &static_cast<const T*>(stru)->long_double_array;
    }
    if (std::strcmp(field, "boolean_array") == 0) {
      return &static_cast<const T*>(stru)->boolean_array;
    }
    if (std::strcmp(field, "octet_array") == 0) {
      return &static_cast<const T*>(stru)->octet_array;
    }
    if (std::strcmp(field, "enum_array") == 0) {
      return &static_cast<const T*>(stru)->enum_array;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedArrayMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "short_array") == 0) {
      Bound::ShortArray* lhsArr = &static_cast<T*>(lhs)->short_array;
      const Bound::ShortArray* rhsArr = static_cast<const Bound::ShortArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "unsigned_short_array") == 0) {
      Bound::UnsignedShortArray* lhsArr = &static_cast<T*>(lhs)->unsigned_short_array;
      const Bound::UnsignedShortArray* rhsArr = static_cast<const Bound::UnsignedShortArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "long_array") == 0) {
      Bound::LongArray* lhsArr = &static_cast<T*>(lhs)->long_array;
      const Bound::LongArray* rhsArr = static_cast<const Bound::LongArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "unsigned_long_array") == 0) {
      Bound::UnsignedLongArray* lhsArr = &static_cast<T*>(lhs)->unsigned_long_array;
      const Bound::UnsignedLongArray* rhsArr = static_cast<const Bound::UnsignedLongArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "long_long_array") == 0) {
      Bound::LongLongArray* lhsArr = &static_cast<T*>(lhs)->long_long_array;
      const Bound::LongLongArray* rhsArr = static_cast<const Bound::LongLongArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "unsigned_long_long_array") == 0) {
      Bound::UnsignedLongLongArray* lhsArr = &static_cast<T*>(lhs)->unsigned_long_long_array;
      const Bound::UnsignedLongLongArray* rhsArr = static_cast<const Bound::UnsignedLongLongArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "char_array") == 0) {
      Bound::CharArray* lhsArr = &static_cast<T*>(lhs)->char_array;
      const Bound::CharArray* rhsArr = static_cast<const Bound::CharArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "wchar_array") == 0) {
      Bound::WCharArray* lhsArr = &static_cast<T*>(lhs)->wchar_array;
      const Bound::WCharArray* rhsArr = static_cast<const Bound::WCharArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "float_array") == 0) {
      Bound::FloatArray* lhsArr = &static_cast<T*>(lhs)->float_array;
      const Bound::FloatArray* rhsArr = static_cast<const Bound::FloatArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "double_array") == 0) {
      Bound::DoubleArray* lhsArr = &static_cast<T*>(lhs)->double_array;
      const Bound::DoubleArray* rhsArr = static_cast<const Bound::DoubleArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "long_double_array") == 0) {
      Bound::LongDoubleArray* lhsArr = &static_cast<T*>(lhs)->long_double_array;
      const Bound::LongDoubleArray* rhsArr = static_cast<const Bound::LongDoubleArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "boolean_array") == 0) {
      Bound::BooleanArray* lhsArr = &static_cast<T*>(lhs)->boolean_array;
      const Bound::BooleanArray* rhsArr = static_cast<const Bound::BooleanArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "octet_array") == 0) {
      Bound::OctetArray* lhsArr = &static_cast<T*>(lhs)->octet_array;
      const Bound::OctetArray* rhsArr = static_cast<const Bound::OctetArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "enum_array") == 0) {
      Bound::EnumTypeArray* lhsArr = &static_cast<T*>(lhs)->enum_array;
      const Bound::EnumTypeArray* rhsArr = static_cast<const Bound::EnumTypeArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedArrayMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::SimpleBoundedArrayMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::SimpleBoundedArrayMessage>()
{
  static MetaStructImpl<Bound::SimpleBoundedArrayMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::SimpleBoundedArrayMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::SimpleBoundedArrayMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SimpleBoundedArrayMessage */


/* Begin TYPEDEF: StringArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::StringArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    find_size_ulong(size, padding);
    size += ACE_OS::strlen(arr[i0].in()) + 1;
  }
}

bool operator<<(Serializer& strm, const Bound::StringArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm << arr[i0].in())) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Bound::StringArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm >> arr[i0].out())) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::StringArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 10; ++i) {
    ACE_CDR::ULong strlength;
    ser >> strlength;
    ser.skip(strlength);
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StringArray */


/* Begin STRUCT: StringArrayMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::StringArrayMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  Bound::StringArray_forany stru_string_array(const_cast<Bound::StringArray_slice*>(stru.string_array));
  gen_find_size(stru_string_array, size, padding);
}

bool operator<<(Serializer& strm, const Bound::StringArrayMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Bound::StringArray_forany stru_string_array(const_cast<Bound::StringArray_slice*>(stru.string_array));
  return (strm << stru_string_array);
}

bool operator>>(Serializer& strm, Bound::StringArrayMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Bound::StringArray_forany stru_string_array(const_cast<Bound::StringArray_slice*>(stru.string_array));
  return (strm >> stru_string_array);
}

size_t gen_max_marshaled_size(const Bound::StringArrayMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::StringArrayMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::StringArrayMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::StringArrayMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::StringArrayMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr StringArrayMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<StringArrayMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr StringArrayMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<StringArrayMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr StringArrayMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<StringArrayMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<StringArrayMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& StringArrayMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<StringArrayMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool StringArrayMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* StringArrayMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
StringArrayMessageTypeSupport::_ptr_type StringArrayMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::StringArrayMessage> : MetaStruct {
  typedef Bound::StringArrayMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::StringArrayMessage& typed = *static_cast<const Bound::StringArrayMessage*>(stru);
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringArrayMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    gen_skip_over(ser, static_cast<Bound::StringArray_forany*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::StringArrayMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringArrayMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"string_array", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "string_array") == 0) {
      return &static_cast<const T*>(stru)->string_array;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringArrayMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "string_array") == 0) {
      Bound::StringArray* lhsArr = &static_cast<T*>(lhs)->string_array;
      const Bound::StringArray* rhsArr = static_cast<const Bound::StringArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringArrayMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::StringArrayMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::StringArrayMessage>()
{
  static MetaStructImpl<Bound::StringArrayMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::StringArrayMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::StringArrayMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StringArrayMessage */


/* Begin TYPEDEF: WStringArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::WStringArray_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    find_size_ulong(size, padding);
    size += ACE_OS::strlen(arr[i0].in()) * OpenDDS::DCPS::Serializer::WCHAR_SIZE;
  }
}

bool operator<<(Serializer& strm, const Bound::WStringArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm << arr[i0].in())) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, Bound::WStringArray_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
    if (!(strm >> arr[i0].out())) {
      return false;
    }
  }
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Bound::WStringArray_forany*)
{
  ACE_UNUSED_ARG(ser);
  for (ACE_CDR::ULong i = 0; i < 10; ++i) {
    ACE_CDR::ULong strlength;
    ser >> strlength;
    ser.skip(strlength);
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: WStringArray */


/* Begin STRUCT: WStringArrayMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::WStringArrayMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  Bound::WStringArray_forany stru_wstring_array(const_cast<Bound::WStringArray_slice*>(stru.wstring_array));
  gen_find_size(stru_wstring_array, size, padding);
}

bool operator<<(Serializer& strm, const Bound::WStringArrayMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Bound::WStringArray_forany stru_wstring_array(const_cast<Bound::WStringArray_slice*>(stru.wstring_array));
  return (strm << stru_wstring_array);
}

bool operator>>(Serializer& strm, Bound::WStringArrayMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  Bound::WStringArray_forany stru_wstring_array(const_cast<Bound::WStringArray_slice*>(stru.wstring_array));
  return (strm >> stru_wstring_array);
}

size_t gen_max_marshaled_size(const Bound::WStringArrayMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::WStringArrayMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::WStringArrayMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::WStringArrayMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::WStringArrayMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr WStringArrayMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<WStringArrayMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr WStringArrayMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<WStringArrayMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr WStringArrayMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<WStringArrayMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<WStringArrayMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& WStringArrayMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<WStringArrayMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool WStringArrayMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* WStringArrayMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
WStringArrayMessageTypeSupport::_ptr_type WStringArrayMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::WStringArrayMessage> : MetaStruct {
  typedef Bound::WStringArrayMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::WStringArrayMessage& typed = *static_cast<const Bound::WStringArrayMessage*>(stru);
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringArrayMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    gen_skip_over(ser, static_cast<Bound::WStringArray_forany*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::WStringArrayMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringArrayMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"wstring_array", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "wstring_array") == 0) {
      return &static_cast<const T*>(stru)->wstring_array;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringArrayMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "wstring_array") == 0) {
      Bound::WStringArray* lhsArr = &static_cast<T*>(lhs)->wstring_array;
      const Bound::WStringArray* rhsArr = static_cast<const Bound::WStringArray*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 10; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringArrayMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::WStringArrayMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::WStringArrayMessage>()
{
  static MetaStructImpl<Bound::WStringArrayMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::WStringArrayMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::WStringArrayMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: WStringArrayMessage */


/* Begin STRUCT: Nest1 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::Nest1& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.long_field);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.short_field);
}

bool operator<<(Serializer& strm, const Bound::Nest1& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.long_field)
    && (strm << stru.short_field);
}

bool operator>>(Serializer& strm, Bound::Nest1& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.long_field)
    && (strm >> stru.short_field);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::Nest1> : MetaStruct {
  typedef Bound::Nest1 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::Nest1& typed = *static_cast<const Bound::Nest1*>(stru);
    if (std::strcmp(field, "long_field") == 0) {
      return typed.long_field;
    }
    if (std::strcmp(field, "short_field") == 0) {
      return typed.short_field;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest1)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "long_field") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "short_field") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'short_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 2);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::Nest1");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "long_field") == 0) {
      return make_field_cmp(&T::long_field, next);
    }
    if (std::strcmp(field, "short_field") == 0) {
      return make_field_cmp(&T::short_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest1)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"long_field", "short_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "long_field") == 0) {
      return &static_cast<const T*>(stru)->long_field;
    }
    if (std::strcmp(field, "short_field") == 0) {
      return &static_cast<const T*>(stru)->short_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest1)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "long_field") == 0) {
      static_cast<T*>(lhs)->long_field = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "short_field") == 0) {
      static_cast<T*>(lhs)->short_field = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest1)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "long_field") == 0) {
      return static_cast<const T*>(lhs)->long_field == static_cast<const T*>(rhs)->long_field;
    }
    if (std::strcmp(field, "short_field") == 0) {
      return static_cast<const T*>(lhs)->short_field == static_cast<const T*>(rhs)->short_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest1)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::Nest1>()
{
  static MetaStructImpl<Bound::Nest1> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::Nest1*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::Nest1>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Nest1 */


/* Begin STRUCT: Nest2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::Nest2& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.nest1_field, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.float_field);
}

bool operator<<(Serializer& strm, const Bound::Nest2& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.nest1_field)
    && (strm << stru.float_field);
}

bool operator>>(Serializer& strm, Bound::Nest2& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.nest1_field)
    && (strm >> stru.float_field);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::Nest2> : MetaStruct {
  typedef Bound::Nest2 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::Nest2& typed = *static_cast<const Bound::Nest2*>(stru);
    if (std::strncmp(field, "nest1_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest1>().getValue(&typed.nest1_field, field + 12);
    }
    if (std::strcmp(field, "float_field") == 0) {
      return typed.float_field;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest2)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "nest1_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest1>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<Bound::Nest1*>(0));
    }
    if (std::strcmp(field, "float_field") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'float_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::Nest2");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "nest1_field.", 12) == 0) {
      return make_struct_cmp(&T::nest1_field, getMetaStruct<Bound::Nest1>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "float_field") == 0) {
      return make_field_cmp(&T::float_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest2)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"nest1_field", "float_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "nest1_field") == 0) {
      return &static_cast<const T*>(stru)->nest1_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return &static_cast<const T*>(stru)->float_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest2)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "nest1_field") == 0) {
      static_cast<T*>(lhs)->nest1_field = *static_cast<const Bound::Nest1*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "float_field") == 0) {
      static_cast<T*>(lhs)->float_field = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest2)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "float_field") == 0) {
      return static_cast<const T*>(lhs)->float_field == static_cast<const T*>(rhs)->float_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest2)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::Nest2>()
{
  static MetaStructImpl<Bound::Nest2> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::Nest2*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::Nest2>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Nest2 */


/* Begin STRUCT: BoundedNestedMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::BoundedNestedMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.nest2_field, size, padding);
}

bool operator<<(Serializer& strm, const Bound::BoundedNestedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.nest2_field);
}

bool operator>>(Serializer& strm, Bound::BoundedNestedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.nest2_field);
}

size_t gen_max_marshaled_size(const Bound::BoundedNestedMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return align ? 12 : 10;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::BoundedNestedMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::BoundedNestedMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::BoundedNestedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::BoundedNestedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr BoundedNestedMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<BoundedNestedMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr BoundedNestedMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<BoundedNestedMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr BoundedNestedMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<BoundedNestedMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<BoundedNestedMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& BoundedNestedMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<BoundedNestedMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool BoundedNestedMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* BoundedNestedMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
BoundedNestedMessageTypeSupport::_ptr_type BoundedNestedMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::BoundedNestedMessage> : MetaStruct {
  typedef Bound::BoundedNestedMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::BoundedNestedMessage& typed = *static_cast<const Bound::BoundedNestedMessage*>(stru);
    if (std::strncmp(field, "nest2_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest2>().getValue(&typed.nest2_field, field + 12);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::BoundedNestedMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "nest2_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest2>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<Bound::Nest2*>(0));
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::BoundedNestedMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "nest2_field.", 12) == 0) {
      return make_struct_cmp(&T::nest2_field, getMetaStruct<Bound::Nest2>().create_qc_comparator(field + 12), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::BoundedNestedMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"nest2_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "nest2_field") == 0) {
      return &static_cast<const T*>(stru)->nest2_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::BoundedNestedMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "nest2_field") == 0) {
      static_cast<T*>(lhs)->nest2_field = *static_cast<const Bound::Nest2*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::BoundedNestedMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::BoundedNestedMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::BoundedNestedMessage>()
{
  static MetaStructImpl<Bound::BoundedNestedMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::BoundedNestedMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::BoundedNestedMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: BoundedNestedMessage */


/* Begin STRUCT: Nest3 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::Nest3& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.long_field);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.short_field);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.string_field.in()) + 1;
}

bool operator<<(Serializer& strm, const Bound::Nest3& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.long_field)
    && (strm << stru.short_field)
    && (strm << stru.string_field.in());
}

bool operator>>(Serializer& strm, Bound::Nest3& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.long_field)
    && (strm >> stru.short_field)
    && (strm >> stru.string_field.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::Nest3> : MetaStruct {
  typedef Bound::Nest3 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::Nest3& typed = *static_cast<const Bound::Nest3*>(stru);
    if (std::strcmp(field, "long_field") == 0) {
      return typed.long_field;
    }
    if (std::strcmp(field, "short_field") == 0) {
      return typed.short_field;
    }
    if (std::strcmp(field, "string_field") == 0) {
      return typed.string_field.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest3)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "long_field") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'long_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "short_field") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'short_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 2);
    }
    if (std::strcmp(field, "string_field") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'string_field' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'string_field' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::Nest3");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "long_field") == 0) {
      return make_field_cmp(&T::long_field, next);
    }
    if (std::strcmp(field, "short_field") == 0) {
      return make_field_cmp(&T::short_field, next);
    }
    if (std::strcmp(field, "string_field") == 0) {
      return make_field_cmp(&T::string_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest3)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"long_field", "short_field", "string_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "long_field") == 0) {
      return &static_cast<const T*>(stru)->long_field;
    }
    if (std::strcmp(field, "short_field") == 0) {
      return &static_cast<const T*>(stru)->short_field;
    }
    if (std::strcmp(field, "string_field") == 0) {
      return &static_cast<const T*>(stru)->string_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest3)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "long_field") == 0) {
      static_cast<T*>(lhs)->long_field = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "short_field") == 0) {
      static_cast<T*>(lhs)->short_field = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "string_field") == 0) {
      static_cast<T*>(lhs)->string_field = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest3)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "long_field") == 0) {
      return static_cast<const T*>(lhs)->long_field == static_cast<const T*>(rhs)->long_field;
    }
    if (std::strcmp(field, "short_field") == 0) {
      return static_cast<const T*>(lhs)->short_field == static_cast<const T*>(rhs)->short_field;
    }
    if (std::strcmp(field, "string_field") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->string_field.in(), static_cast<const T*>(rhs)->string_field.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest3)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::Nest3>()
{
  static MetaStructImpl<Bound::Nest3> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::Nest3*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::Nest3>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Nest3 */


/* Begin STRUCT: Nest4 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::Nest4& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.nest3_field, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.float_field);
}

bool operator<<(Serializer& strm, const Bound::Nest4& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.nest3_field)
    && (strm << stru.float_field);
}

bool operator>>(Serializer& strm, Bound::Nest4& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.nest3_field)
    && (strm >> stru.float_field);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::Nest4> : MetaStruct {
  typedef Bound::Nest4 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::Nest4& typed = *static_cast<const Bound::Nest4*>(stru);
    if (std::strncmp(field, "nest3_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest3>().getValue(&typed.nest3_field, field + 12);
    }
    if (std::strcmp(field, "float_field") == 0) {
      return typed.float_field;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest4)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "nest3_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest3>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<Bound::Nest3*>(0));
    }
    if (std::strcmp(field, "float_field") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'float_field' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::Nest4");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "nest3_field.", 12) == 0) {
      return make_struct_cmp(&T::nest3_field, getMetaStruct<Bound::Nest3>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "float_field") == 0) {
      return make_field_cmp(&T::float_field, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest4)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"nest3_field", "float_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "nest3_field") == 0) {
      return &static_cast<const T*>(stru)->nest3_field;
    }
    if (std::strcmp(field, "float_field") == 0) {
      return &static_cast<const T*>(stru)->float_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest4)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "nest3_field") == 0) {
      static_cast<T*>(lhs)->nest3_field = *static_cast<const Bound::Nest3*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "float_field") == 0) {
      static_cast<T*>(lhs)->float_field = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest4)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "float_field") == 0) {
      return static_cast<const T*>(lhs)->float_field == static_cast<const T*>(rhs)->float_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::Nest4)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::Nest4>()
{
  static MetaStructImpl<Bound::Nest4> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::Nest4*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::Nest4>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Nest4 */


/* Begin STRUCT: UnboundedNestedMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Bound::UnboundedNestedMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.nest4_field, size, padding);
}

bool operator<<(Serializer& strm, const Bound::UnboundedNestedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.nest4_field);
}

bool operator>>(Serializer& strm, Bound::UnboundedNestedMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.nest4_field);
}

size_t gen_max_marshaled_size(const Bound::UnboundedNestedMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Bound::UnboundedNestedMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const Bound::UnboundedNestedMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const Bound::UnboundedNestedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<Bound::UnboundedNestedMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Bound {
::DDS::DataWriter_ptr UnboundedNestedMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<UnboundedNestedMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr UnboundedNestedMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<UnboundedNestedMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr UnboundedNestedMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<UnboundedNestedMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<UnboundedNestedMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& UnboundedNestedMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<UnboundedNestedMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool UnboundedNestedMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* UnboundedNestedMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
UnboundedNestedMessageTypeSupport::_ptr_type UnboundedNestedMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Bound::UnboundedNestedMessage> : MetaStruct {
  typedef Bound::UnboundedNestedMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Bound::UnboundedNestedMessage& typed = *static_cast<const Bound::UnboundedNestedMessage*>(stru);
    if (std::strncmp(field, "nest4_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest4>().getValue(&typed.nest4_field, field + 12);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::UnboundedNestedMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "nest4_field.", 12) == 0) {
      return getMetaStruct<Bound::Nest4>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<Bound::Nest4*>(0));
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Bound::UnboundedNestedMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "nest4_field.", 12) == 0) {
      return make_struct_cmp(&T::nest4_field, getMetaStruct<Bound::Nest4>().create_qc_comparator(field + 12), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::UnboundedNestedMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"nest4_field", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "nest4_field") == 0) {
      return &static_cast<const T*>(stru)->nest4_field;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::UnboundedNestedMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "nest4_field") == 0) {
      static_cast<T*>(lhs)->nest4_field = *static_cast<const Bound::Nest4*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::UnboundedNestedMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Bound::UnboundedNestedMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<Bound::UnboundedNestedMessage>()
{
  static MetaStructImpl<Bound::UnboundedNestedMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Bound::UnboundedNestedMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Bound::UnboundedNestedMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: UnboundedNestedMessage */

/* End MODULE: Bound */
