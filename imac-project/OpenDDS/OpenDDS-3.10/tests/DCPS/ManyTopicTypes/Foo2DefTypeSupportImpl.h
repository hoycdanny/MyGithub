/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Foo2Def.idl */
#ifndef OPENDDS_IDL_GENERATED_FOO2DEFTYPESUPPORTIMPL_H_JFU4JN
#define OPENDDS_IDL_GENERATED_FOO2DEFTYPESUPPORTIMPL_H_JFU4JN
#include "Foo2DefC.h"
#include "dds/DCPS/Definitions.h"
#include "Foo2DefTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: T2 */



/* Begin STRUCT: Foo2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

FooLib_Export
void gen_find_size(const T2::Foo2& stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, const T2::Foo2& stru);

FooLib_Export
bool operator>>(Serializer& strm, T2::Foo2& stru);

FooLib_Export
size_t gen_max_marshaled_size(const T2::Foo2& stru, bool align);

FooLib_Export
size_t gen_max_marshaled_size(KeyOnly<const T2::Foo2> stru, bool align);

FooLib_Export
void gen_find_size(KeyOnly<const T2::Foo2> stru, size_t& size, size_t& padding);

FooLib_Export
bool operator<<(Serializer& strm, KeyOnly<const T2::Foo2> stru);

FooLib_Export
bool operator>>(Serializer& strm, KeyOnly<T2::Foo2> stru);

template <>
struct MarshalTraits<T2::Foo2> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace T2 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct FooLib_Export Foo2_OpenDDS_KeyLessThan {
  bool operator()(const T2::Foo2& v1, const T2::Foo2& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.key < v2.key) return true;
    if (v2.key < v1.key) return false;
    return false;
  }
};
}


namespace T2 {
class Foo2TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<T2::Foo2> {
  typedef T2::Foo2 MessageType;
  typedef T2::Foo2Seq MessageSequenceType;
  typedef T2::Foo2TypeSupport TypeSupportType;
  typedef T2::Foo2TypeSupportImpl TypeSupportTypeImpl;
  typedef T2::Foo2DataWriter DataWriterType;
  typedef T2::Foo2DataReader DataReaderType;
  typedef T2::Foo2_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "T2::Foo2"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace T2 {
class FooLib_Export Foo2TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Foo2TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Foo2> TraitsType;
  typedef Foo2TypeSupport TypeSupportType;
  typedef Foo2TypeSupport::_var_type _var_type;
  typedef Foo2TypeSupport::_ptr_type _ptr_type;

  Foo2TypeSupportImpl() {}
  virtual ~Foo2TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Foo2TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
FooLib_Export
const MetaStruct& getMetaStruct<T2::Foo2>();
FooLib_Export
void gen_skip_over(Serializer& ser, T2::Foo2*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Foo2 */

/* End MODULE: T2 */
#endif /* OPENDDS_IDL_GENERATED_FOO2DEFTYPESUPPORTIMPL_H_JFU4JN */
