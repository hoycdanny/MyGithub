// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_FOO3DEFTYPESUPPORTC_QWQAI9_H_
#define _TAO_IDL_FOO3DEFTYPESUPPORTC_QWQAI9_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "foolib_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "Foo3DefC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO FooLib_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace T3
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< T3::Foo3, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> Foo3Seq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_T3_FOO3TYPESUPPORT__VAR_OUT_CH_)
#define _T3_FOO3TYPESUPPORT__VAR_OUT_CH_

  class Foo3TypeSupport;
  typedef Foo3TypeSupport *Foo3TypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        Foo3TypeSupport
      >
    Foo3TypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        Foo3TypeSupport
      >
    Foo3TypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class FooLib_Export Foo3TypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef Foo3TypeSupport_ptr _ptr_type;
    typedef Foo3TypeSupport_var _var_type;
    typedef Foo3TypeSupport_out _out_type;

    // The static operations.
    static Foo3TypeSupport_ptr _duplicate (Foo3TypeSupport_ptr obj);

    static void _tao_release (Foo3TypeSupport_ptr obj);

    static Foo3TypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static Foo3TypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Foo3TypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Foo3TypeSupport (void);

    

    virtual ~Foo3TypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Foo3TypeSupport (const Foo3TypeSupport &);

    void operator= (const Foo3TypeSupport &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_T3_FOO3DATAWRITER__VAR_OUT_CH_)
#define _T3_FOO3DATAWRITER__VAR_OUT_CH_

  class Foo3DataWriter;
  typedef Foo3DataWriter *Foo3DataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        Foo3DataWriter
      >
    Foo3DataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        Foo3DataWriter
      >
    Foo3DataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class FooLib_Export Foo3DataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef Foo3DataWriter_ptr _ptr_type;
    typedef Foo3DataWriter_var _var_type;
    typedef Foo3DataWriter_out _out_type;

    // The static operations.
    static Foo3DataWriter_ptr _duplicate (Foo3DataWriter_ptr obj);

    static void _tao_release (Foo3DataWriter_ptr obj);

    static Foo3DataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static Foo3DataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Foo3DataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::T3::Foo3 & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::T3::Foo3 & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::T3::Foo3 & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::T3::Foo3 & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::T3::Foo3 & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::T3::Foo3 & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::T3::Foo3 & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::T3::Foo3 & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::T3::Foo3 & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::T3::Foo3 & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Foo3DataWriter (void);

    

    virtual ~Foo3DataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Foo3DataWriter (const Foo3DataWriter &);

    void operator= (const Foo3DataWriter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_T3_FOO3DATAREADER__VAR_OUT_CH_)
#define _T3_FOO3DATAREADER__VAR_OUT_CH_

  class Foo3DataReader;
  typedef Foo3DataReader *Foo3DataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        Foo3DataReader
      >
    Foo3DataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        Foo3DataReader
      >
    Foo3DataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class FooLib_Export Foo3DataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef Foo3DataReader_ptr _ptr_type;
    typedef Foo3DataReader_var _var_type;
    typedef Foo3DataReader_out _out_type;

    // The static operations.
    static Foo3DataReader_ptr _duplicate (Foo3DataReader_ptr obj);

    static void _tao_release (Foo3DataReader_ptr obj);

    static Foo3DataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static Foo3DataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Foo3DataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::T3::Foo3Seq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::T3::Foo3Seq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::T3::Foo3 & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::T3::Foo3 & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::T3::Foo3Seq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::T3::Foo3Seq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::T3::Foo3Seq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::T3::Foo3 & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::T3::Foo3 & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Foo3DataReader (void);

    

    virtual ~Foo3DataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Foo3DataReader (const Foo3DataReader &);

    void operator= (const Foo3DataReader &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module T3

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_T3_FOO3TYPESUPPORT__TRAITS_)
#define _T3_FOO3TYPESUPPORT__TRAITS_

  template<>
  struct FooLib_Export Objref_Traits< ::T3::Foo3TypeSupport>
  {
    static ::T3::Foo3TypeSupport_ptr duplicate (
        ::T3::Foo3TypeSupport_ptr p);
    static void release (
        ::T3::Foo3TypeSupport_ptr p);
    static ::T3::Foo3TypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::T3::Foo3TypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_T3_FOO3DATAWRITER__TRAITS_)
#define _T3_FOO3DATAWRITER__TRAITS_

  template<>
  struct FooLib_Export Objref_Traits< ::T3::Foo3DataWriter>
  {
    static ::T3::Foo3DataWriter_ptr duplicate (
        ::T3::Foo3DataWriter_ptr p);
    static void release (
        ::T3::Foo3DataWriter_ptr p);
    static ::T3::Foo3DataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::T3::Foo3DataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_T3_FOO3DATAREADER__TRAITS_)
#define _T3_FOO3DATAREADER__TRAITS_

  template<>
  struct FooLib_Export Objref_Traits< ::T3::Foo3DataReader>
  {
    static ::T3::Foo3DataReader_ptr duplicate (
        ::T3::Foo3DataReader_ptr p);
    static void release (
        ::T3::Foo3DataReader_ptr p);
    static ::T3::Foo3DataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::T3::Foo3DataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "Foo3DefTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

