/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file SampleType.idl */
#ifndef OPENDDS_IDL_GENERATED_SAMPLETYPETYPESUPPORTIMPL_H_GBH5YV
#define OPENDDS_IDL_GENERATED_SAMPLETYPETYPESUPPORTIMPL_H_GBH5YV
#include "SampleTypeC.h"
#include "dds/DCPS/Definitions.h"
#include "SampleTypeTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Xyz */



/* Begin STRUCT: SampleType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

SampleTypeLib_Export
void gen_find_size(const Xyz::SampleType& stru, size_t& size, size_t& padding);

SampleTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::SampleType& stru);

SampleTypeLib_Export
bool operator>>(Serializer& strm, Xyz::SampleType& stru);

SampleTypeLib_Export
size_t gen_max_marshaled_size(const Xyz::SampleType& stru, bool align);

SampleTypeLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::SampleType> stru, bool align);

SampleTypeLib_Export
void gen_find_size(KeyOnly<const Xyz::SampleType> stru, size_t& size, size_t& padding);

SampleTypeLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::SampleType> stru);

SampleTypeLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::SampleType> stru);

template <>
struct MarshalTraits<Xyz::SampleType> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct SampleTypeLib_Export SampleType_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::SampleType& v1, const Xyz::SampleType& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.a_long_value < v2.a_long_value) return true;
    if (v2.a_long_value < v1.a_long_value) return false;
    return false;
  }
};
}


namespace Xyz {
class SampleTypeTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::SampleType> {
  typedef Xyz::SampleType MessageType;
  typedef Xyz::SampleTypeSeq MessageSequenceType;
  typedef Xyz::SampleTypeTypeSupport TypeSupportType;
  typedef Xyz::SampleTypeTypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::SampleTypeDataWriter DataWriterType;
  typedef Xyz::SampleTypeDataReader DataReaderType;
  typedef Xyz::SampleType_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::SampleType"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class SampleTypeLib_Export SampleTypeTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<SampleTypeTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<SampleType> TraitsType;
  typedef SampleTypeTypeSupport TypeSupportType;
  typedef SampleTypeTypeSupport::_var_type _var_type;
  typedef SampleTypeTypeSupport::_ptr_type _ptr_type;

  SampleTypeTypeSupportImpl() {}
  virtual ~SampleTypeTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static SampleTypeTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
SampleTypeLib_Export
const MetaStruct& getMetaStruct<Xyz::SampleType>();
SampleTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::SampleType*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SampleType */

/* End MODULE: Xyz */
#endif /* OPENDDS_IDL_GENERATED_SAMPLETYPETYPESUPPORTIMPL_H_GBH5YV */
