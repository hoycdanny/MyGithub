/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Test.idl */
#ifndef OPENDDS_IDL_GENERATED_TESTTYPESUPPORTIMPL_H_QN7MGT
#define OPENDDS_IDL_GENERATED_TESTTYPESUPPORTIMPL_H_QN7MGT
#include "TestC.h"
#include "dds/DCPS/Definitions.h"
#include "TestTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Ex */



/* Begin STRUCT: Test */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Ex::Test& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Ex::Test& stru);

bool operator>>(Serializer& strm, Ex::Test& stru);

size_t gen_max_marshaled_size(const Ex::Test& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Ex::Test> stru, bool align);

void gen_find_size(KeyOnly<const Ex::Test> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Ex::Test> stru);

bool operator>>(Serializer& strm, KeyOnly<Ex::Test> stru);

template <>
struct MarshalTraits<Ex::Test> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Ex {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Test_OpenDDS_KeyLessThan {
  bool operator()(const Ex::Test& v1, const Ex::Test& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.key < v2.key) return true;
    if (v2.key < v1.key) return false;
    return false;
  }
};
}


namespace Ex {
class TestTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Ex::Test> {
  typedef Ex::Test MessageType;
  typedef Ex::TestSeq MessageSequenceType;
  typedef Ex::TestTypeSupport TypeSupportType;
  typedef Ex::TestTypeSupportImpl TypeSupportTypeImpl;
  typedef Ex::TestDataWriter DataWriterType;
  typedef Ex::TestDataReader DataReaderType;
  typedef Ex::Test_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Ex::Test"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Ex {
class  TestTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<TestTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Test> TraitsType;
  typedef TestTypeSupport TypeSupportType;
  typedef TestTypeSupport::_var_type _var_type;
  typedef TestTypeSupport::_ptr_type _ptr_type;

  TestTypeSupportImpl() {}
  virtual ~TestTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static TestTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<Ex::Test>();
void gen_skip_over(Serializer& ser, Ex::Test*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Test */

/* End MODULE: Ex */
#endif /* OPENDDS_IDL_GENERATED_TESTTYPESUPPORTIMPL_H_QN7MGT */
