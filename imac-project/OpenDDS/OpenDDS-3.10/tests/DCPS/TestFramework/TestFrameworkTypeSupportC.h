// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_TESTFRAMEWORKTYPESUPPORTC_YCEBTM_H_
#define _TAO_IDL_TESTFRAMEWORKTYPESUPPORTC_YCEBTM_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TestFramework_Export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "TestFrameworkC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TestFramework_Export

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:102

typedef ::TAO::DCPS::ZeroCopyDataSeq< TestMessage, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> TestMessageSeq;


// TAO_IDL - Generated from
// be/be_interface.cpp:751

#if !defined (_TESTMESSAGETYPESUPPORT__VAR_OUT_CH_)
#define _TESTMESSAGETYPESUPPORT__VAR_OUT_CH_

class TestMessageTypeSupport;
typedef TestMessageTypeSupport *TestMessageTypeSupport_ptr;

typedef
  TAO_Objref_Var_T<
      TestMessageTypeSupport
    >
  TestMessageTypeSupport_var;

typedef
  TAO_Objref_Out_T<
      TestMessageTypeSupport
    >
  TestMessageTypeSupport_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:43

class TestFramework_Export TestMessageTypeSupport
  : public virtual ::OpenDDS::DCPS::TypeSupport

{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  typedef TestMessageTypeSupport_ptr _ptr_type;
  typedef TestMessageTypeSupport_var _var_type;
  typedef TestMessageTypeSupport_out _out_type;

  // The static operations.
  static TestMessageTypeSupport_ptr _duplicate (TestMessageTypeSupport_ptr obj);

  static void _tao_release (TestMessageTypeSupport_ptr obj);

  static TestMessageTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
  static TestMessageTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static TestMessageTypeSupport_ptr _nil (void);

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:140

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  TestMessageTypeSupport (void);

  

  virtual ~TestMessageTypeSupport (void);

private:
  // Private and unimplemented for concrete interfaces.
  TestMessageTypeSupport (const TestMessageTypeSupport &);

  void operator= (const TestMessageTypeSupport &);
};

// TAO_IDL - Generated from
// be/be_interface.cpp:751

#if !defined (_TESTMESSAGEDATAWRITER__VAR_OUT_CH_)
#define _TESTMESSAGEDATAWRITER__VAR_OUT_CH_

class TestMessageDataWriter;
typedef TestMessageDataWriter *TestMessageDataWriter_ptr;

typedef
  TAO_Objref_Var_T<
      TestMessageDataWriter
    >
  TestMessageDataWriter_var;

typedef
  TAO_Objref_Out_T<
      TestMessageDataWriter
    >
  TestMessageDataWriter_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:43

class TestFramework_Export TestMessageDataWriter
  : public virtual ::DDS::DataWriter

{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  typedef TestMessageDataWriter_ptr _ptr_type;
  typedef TestMessageDataWriter_var _var_type;
  typedef TestMessageDataWriter_out _out_type;

  // The static operations.
  static TestMessageDataWriter_ptr _duplicate (TestMessageDataWriter_ptr obj);

  static void _tao_release (TestMessageDataWriter_ptr obj);

  static TestMessageDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
  static TestMessageDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static TestMessageDataWriter_ptr _nil (void);

  virtual ::DDS::InstanceHandle_t register_instance (
    const ::TestMessage & instance) = 0;

  virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
    const ::TestMessage & instance,
    const ::DDS::Time_t & timestamp) = 0;

  virtual ::DDS::ReturnCode_t unregister_instance (
    const ::TestMessage & instance,
    ::DDS::InstanceHandle_t handle) = 0;

  virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
    const ::TestMessage & instance,
    ::DDS::InstanceHandle_t handle,
    const ::DDS::Time_t & timestamp) = 0;

  virtual ::DDS::ReturnCode_t write (
    const ::TestMessage & instance_data,
    ::DDS::InstanceHandle_t handle) = 0;

  virtual ::DDS::ReturnCode_t write_w_timestamp (
    const ::TestMessage & instance_data,
    ::DDS::InstanceHandle_t handle,
    const ::DDS::Time_t & source_timestamp) = 0;

  virtual ::DDS::ReturnCode_t dispose (
    const ::TestMessage & instance_data,
    ::DDS::InstanceHandle_t instance_handle) = 0;

  virtual ::DDS::ReturnCode_t dispose_w_timestamp (
    const ::TestMessage & instance_data,
    ::DDS::InstanceHandle_t instance_handle,
    const ::DDS::Time_t & source_timestamp) = 0;

  virtual ::DDS::ReturnCode_t get_key_value (
    ::TestMessage & key_holder,
    ::DDS::InstanceHandle_t handle) = 0;

  virtual ::DDS::InstanceHandle_t lookup_instance (
    const ::TestMessage & instance_data) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:140

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  TestMessageDataWriter (void);

  

  virtual ~TestMessageDataWriter (void);

private:
  // Private and unimplemented for concrete interfaces.
  TestMessageDataWriter (const TestMessageDataWriter &);

  void operator= (const TestMessageDataWriter &);
};

// TAO_IDL - Generated from
// be/be_interface.cpp:751

#if !defined (_TESTMESSAGEDATAREADER__VAR_OUT_CH_)
#define _TESTMESSAGEDATAREADER__VAR_OUT_CH_

class TestMessageDataReader;
typedef TestMessageDataReader *TestMessageDataReader_ptr;

typedef
  TAO_Objref_Var_T<
      TestMessageDataReader
    >
  TestMessageDataReader_var;

typedef
  TAO_Objref_Out_T<
      TestMessageDataReader
    >
  TestMessageDataReader_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:43

class TestFramework_Export TestMessageDataReader
  : public virtual ::OpenDDS::DCPS::DataReaderEx

{
public:

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  typedef TestMessageDataReader_ptr _ptr_type;
  typedef TestMessageDataReader_var _var_type;
  typedef TestMessageDataReader_out _out_type;

  // The static operations.
  static TestMessageDataReader_ptr _duplicate (TestMessageDataReader_ptr obj);

  static void _tao_release (TestMessageDataReader_ptr obj);

  static TestMessageDataReader_ptr _narrow (::CORBA::Object_ptr obj);
  static TestMessageDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static TestMessageDataReader_ptr _nil (void);

  virtual ::DDS::ReturnCode_t read (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states) = 0;

  virtual ::DDS::ReturnCode_t take (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states) = 0;

  virtual ::DDS::ReturnCode_t read_w_condition (
    ::TestMessageSeq & data_values,
    ::DDS::SampleInfoSeq & sample_infos,
    ::CORBA::Long max_samples,
    ::DDS::ReadCondition_ptr a_condition) = 0;

  virtual ::DDS::ReturnCode_t take_w_condition (
    ::TestMessageSeq & data_values,
    ::DDS::SampleInfoSeq & sample_infos,
    ::CORBA::Long max_samples,
    ::DDS::ReadCondition_ptr a_condition) = 0;

  virtual ::DDS::ReturnCode_t read_next_sample (
    ::TestMessage & received_data,
    ::DDS::SampleInfo & sample_info) = 0;

  virtual ::DDS::ReturnCode_t take_next_sample (
    ::TestMessage & received_data,
    ::DDS::SampleInfo & sample_info) = 0;

  virtual ::DDS::ReturnCode_t read_instance (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states) = 0;

  virtual ::DDS::ReturnCode_t take_instance (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states) = 0;

  virtual ::DDS::ReturnCode_t read_instance_w_condition (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & sample_infos,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::ReadCondition_ptr a_condition) = 0;

  virtual ::DDS::ReturnCode_t take_instance_w_condition (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & sample_infos,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::ReadCondition_ptr a_condition) = 0;

  virtual ::DDS::ReturnCode_t read_next_instance (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states) = 0;

  virtual ::DDS::ReturnCode_t take_next_instance (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states) = 0;

  virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
    ::TestMessageSeq & data_values,
    ::DDS::SampleInfoSeq & sample_infos,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t previous_handle,
    ::DDS::ReadCondition_ptr a_condition) = 0;

  virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
    ::TestMessageSeq & data_values,
    ::DDS::SampleInfoSeq & sample_infos,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t previous_handle,
    ::DDS::ReadCondition_ptr a_condition) = 0;

  virtual ::DDS::ReturnCode_t return_loan (
    ::TestMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq) = 0;

  virtual ::DDS::ReturnCode_t get_key_value (
    ::TestMessage & key_holder,
    ::DDS::InstanceHandle_t handle) = 0;

  virtual ::DDS::InstanceHandle_t lookup_instance (
    const ::TestMessage & instance_data) = 0;

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:140

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  TestMessageDataReader (void);

  

  virtual ~TestMessageDataReader (void);

private:
  // Private and unimplemented for concrete interfaces.
  TestMessageDataReader (const TestMessageDataReader &);

  void operator= (const TestMessageDataReader &);
};

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TESTMESSAGETYPESUPPORT__TRAITS_)
#define _TESTMESSAGETYPESUPPORT__TRAITS_

  template<>
  struct TestFramework_Export Objref_Traits< ::TestMessageTypeSupport>
  {
    static ::TestMessageTypeSupport_ptr duplicate (
        ::TestMessageTypeSupport_ptr p);
    static void release (
        ::TestMessageTypeSupport_ptr p);
    static ::TestMessageTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TestMessageTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TESTMESSAGEDATAWRITER__TRAITS_)
#define _TESTMESSAGEDATAWRITER__TRAITS_

  template<>
  struct TestFramework_Export Objref_Traits< ::TestMessageDataWriter>
  {
    static ::TestMessageDataWriter_ptr duplicate (
        ::TestMessageDataWriter_ptr p);
    static void release (
        ::TestMessageDataWriter_ptr p);
    static ::TestMessageDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TestMessageDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TESTMESSAGEDATAREADER__TRAITS_)
#define _TESTMESSAGEDATAREADER__TRAITS_

  template<>
  struct TestFramework_Export Objref_Traits< ::TestMessageDataReader>
  {
    static ::TestMessageDataReader_ptr duplicate (
        ::TestMessageDataReader_ptr p);
    static void release (
        ::TestMessageDataReader_ptr p);
    static ::TestMessageDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TestMessageDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "TestFrameworkTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

