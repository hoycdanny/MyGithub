/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Messenger2.idl */
#include "Messenger2TypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/CorbaSeq/LongSeqTypeSupportImpl.h"
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/CorbaSeq/BooleanSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/CharSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/DoubleSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/FloatSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/LongDoubleSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/LongLongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/LongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/OctetSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/ShortSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/StringSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/ULongLongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/ULongSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/UShortSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/WCharSeqTypeSupportImpl.h"
#include "dds/CorbaSeq/WStringSeqTypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Messenger2 */



/* Begin TYPEDEF: LongSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger2::LongSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Long());
}

bool operator<<(Serializer& strm, const Messenger2::LongSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_long_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, Messenger2::LongSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_long_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, Messenger2::LongSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  ser >> length;
  ser.skip(length, 4);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongSeq */


/* Begin STRUCT: Message2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger2::Message2& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.from.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.count);
  gen_find_size(stru.bool_seq, size, padding);
  gen_find_size(stru.longdouble_seq, size, padding);
  gen_find_size(stru.short_seq, size, padding);
  gen_find_size(stru.ushort_seq, size, padding);
  gen_find_size(stru.char_seq, size, padding);
  gen_find_size(stru.longlong_seq, size, padding);
  gen_find_size(stru.string_seq, size, padding);
  gen_find_size(stru.wchar_seq, size, padding);
  gen_find_size(stru.double_seq, size, padding);
  gen_find_size(stru.long_seq, size, padding);
  gen_find_size(stru.ulonglong_seq, size, padding);
  gen_find_size(stru.wstring_seq, size, padding);
  gen_find_size(stru.float_seq, size, padding);
  gen_find_size(stru.octet_seq, size, padding);
  gen_find_size(stru.ulong_seq, size, padding);
}

bool operator<<(Serializer& strm, const Messenger2::Message2& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.from.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.text.in())
    && (strm << stru.count)
    && (strm << stru.bool_seq)
    && (strm << stru.longdouble_seq)
    && (strm << stru.short_seq)
    && (strm << stru.ushort_seq)
    && (strm << stru.char_seq)
    && (strm << stru.longlong_seq)
    && (strm << stru.string_seq)
    && (strm << stru.wchar_seq)
    && (strm << stru.double_seq)
    && (strm << stru.long_seq)
    && (strm << stru.ulonglong_seq)
    && (strm << stru.wstring_seq)
    && (strm << stru.float_seq)
    && (strm << stru.octet_seq)
    && (strm << stru.ulong_seq);
}

bool operator>>(Serializer& strm, Messenger2::Message2& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.from.out())
    && (strm >> stru.subject.out())
    && (strm >> stru.subject_id)
    && (strm >> stru.text.out())
    && (strm >> stru.count)
    && (strm >> stru.bool_seq)
    && (strm >> stru.longdouble_seq)
    && (strm >> stru.short_seq)
    && (strm >> stru.ushort_seq)
    && (strm >> stru.char_seq)
    && (strm >> stru.longlong_seq)
    && (strm >> stru.string_seq)
    && (strm >> stru.wchar_seq)
    && (strm >> stru.double_seq)
    && (strm >> stru.long_seq)
    && (strm >> stru.ulonglong_seq)
    && (strm >> stru.wstring_seq)
    && (strm >> stru.float_seq)
    && (strm >> stru.octet_seq)
    && (strm >> stru.ulong_seq);
}

size_t gen_max_marshaled_size(const Messenger2::Message2& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger2::Message2> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Messenger2::Message2> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.subject_id);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger2::Message2> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.subject_id);
}

bool operator>>(Serializer& strm, KeyOnly<Messenger2::Message2> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger2 {
::DDS::DataWriter_ptr Message2TypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message2> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr Message2TypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message2> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr Message2TypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message2> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message2, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& Message2TypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message2>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool Message2TypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* Message2TypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
Message2TypeSupport::_ptr_type Message2TypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger2::Message2> : MetaStruct {
  typedef Messenger2::Message2 T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger2::Message2& typed = *static_cast<const Messenger2::Message2*>(stru);
    if (std::strcmp(field, "from") == 0) {
      return typed.from.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message2)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'from' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'from' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "text") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    gen_skip_over(ser, static_cast<CORBA::BooleanSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::LongDoubleSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::ShortSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::UShortSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::CharSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::LongLongSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::StringSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::WCharSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::DoubleSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::LongSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::ULongLongSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::WStringSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::FloatSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::OctetSeq*>(0));
    gen_skip_over(ser, static_cast<CORBA::ULongSeq*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger2::Message2");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "from") == 0) {
      return make_field_cmp(&T::from, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message2)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"from", "subject", "subject_id", "text", "count", "bool_seq", "longdouble_seq", "short_seq", "ushort_seq", "char_seq", "longlong_seq", "string_seq", "wchar_seq", "double_seq", "long_seq", "ulonglong_seq", "wstring_seq", "float_seq", "octet_seq", "ulong_seq", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "from") == 0) {
      return &static_cast<const T*>(stru)->from;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    if (std::strcmp(field, "bool_seq") == 0) {
      return &static_cast<const T*>(stru)->bool_seq;
    }
    if (std::strcmp(field, "longdouble_seq") == 0) {
      return &static_cast<const T*>(stru)->longdouble_seq;
    }
    if (std::strcmp(field, "short_seq") == 0) {
      return &static_cast<const T*>(stru)->short_seq;
    }
    if (std::strcmp(field, "ushort_seq") == 0) {
      return &static_cast<const T*>(stru)->ushort_seq;
    }
    if (std::strcmp(field, "char_seq") == 0) {
      return &static_cast<const T*>(stru)->char_seq;
    }
    if (std::strcmp(field, "longlong_seq") == 0) {
      return &static_cast<const T*>(stru)->longlong_seq;
    }
    if (std::strcmp(field, "string_seq") == 0) {
      return &static_cast<const T*>(stru)->string_seq;
    }
    if (std::strcmp(field, "wchar_seq") == 0) {
      return &static_cast<const T*>(stru)->wchar_seq;
    }
    if (std::strcmp(field, "double_seq") == 0) {
      return &static_cast<const T*>(stru)->double_seq;
    }
    if (std::strcmp(field, "long_seq") == 0) {
      return &static_cast<const T*>(stru)->long_seq;
    }
    if (std::strcmp(field, "ulonglong_seq") == 0) {
      return &static_cast<const T*>(stru)->ulonglong_seq;
    }
    if (std::strcmp(field, "wstring_seq") == 0) {
      return &static_cast<const T*>(stru)->wstring_seq;
    }
    if (std::strcmp(field, "float_seq") == 0) {
      return &static_cast<const T*>(stru)->float_seq;
    }
    if (std::strcmp(field, "octet_seq") == 0) {
      return &static_cast<const T*>(stru)->octet_seq;
    }
    if (std::strcmp(field, "ulong_seq") == 0) {
      return &static_cast<const T*>(stru)->ulong_seq;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message2)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "from") == 0) {
      static_cast<T*>(lhs)->from = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "bool_seq") == 0) {
      static_cast<T*>(lhs)->bool_seq = *static_cast<const CORBA::BooleanSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "longdouble_seq") == 0) {
      static_cast<T*>(lhs)->longdouble_seq = *static_cast<const CORBA::LongDoubleSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "short_seq") == 0) {
      static_cast<T*>(lhs)->short_seq = *static_cast<const CORBA::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ushort_seq") == 0) {
      static_cast<T*>(lhs)->ushort_seq = *static_cast<const CORBA::UShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "char_seq") == 0) {
      static_cast<T*>(lhs)->char_seq = *static_cast<const CORBA::CharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "longlong_seq") == 0) {
      static_cast<T*>(lhs)->longlong_seq = *static_cast<const CORBA::LongLongSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "string_seq") == 0) {
      static_cast<T*>(lhs)->string_seq = *static_cast<const CORBA::StringSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wchar_seq") == 0) {
      static_cast<T*>(lhs)->wchar_seq = *static_cast<const CORBA::WCharSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "double_seq") == 0) {
      static_cast<T*>(lhs)->double_seq = *static_cast<const CORBA::DoubleSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "long_seq") == 0) {
      static_cast<T*>(lhs)->long_seq = *static_cast<const CORBA::LongSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ulonglong_seq") == 0) {
      static_cast<T*>(lhs)->ulonglong_seq = *static_cast<const CORBA::ULongLongSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wstring_seq") == 0) {
      static_cast<T*>(lhs)->wstring_seq = *static_cast<const CORBA::WStringSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "float_seq") == 0) {
      static_cast<T*>(lhs)->float_seq = *static_cast<const CORBA::FloatSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "octet_seq") == 0) {
      static_cast<T*>(lhs)->octet_seq = *static_cast<const CORBA::OctetSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "ulong_seq") == 0) {
      static_cast<T*>(lhs)->ulong_seq = *static_cast<const CORBA::ULongSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message2)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "from") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->from.in(), static_cast<const T*>(rhs)->from.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger2::Message2)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger2::Message2>()
{
  static MetaStructImpl<Messenger2::Message2> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Messenger2::Message2*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger2::Message2>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message2 */

/* End MODULE: Messenger2 */
