/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Messenger2.idl */
#ifndef OPENDDS_IDL_GENERATED_MESSENGER2TYPESUPPORTIMPL_H_WS8TPU
#define OPENDDS_IDL_GENERATED_MESSENGER2TYPESUPPORTIMPL_H_WS8TPU
#include "Messenger2C.h"
#include "dds/DCPS/Definitions.h"
#include "Messenger2TypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Messenger2 */



/* Begin TYPEDEF: LongSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

CorbaSeq_Export
void gen_find_size(const Messenger2::LongSeq& seq, size_t& size, size_t& padding);

CorbaSeq_Export
bool operator<<(Serializer& strm, const Messenger2::LongSeq& seq);

CorbaSeq_Export
bool operator>>(Serializer& strm, Messenger2::LongSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

CorbaSeq_Export
void gen_skip_over(Serializer& ser, Messenger2::LongSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongSeq */


/* Begin STRUCT: Message2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

CorbaSeq_Export
void gen_find_size(const Messenger2::Message2& stru, size_t& size, size_t& padding);

CorbaSeq_Export
bool operator<<(Serializer& strm, const Messenger2::Message2& stru);

CorbaSeq_Export
bool operator>>(Serializer& strm, Messenger2::Message2& stru);

CorbaSeq_Export
size_t gen_max_marshaled_size(const Messenger2::Message2& stru, bool align);

CorbaSeq_Export
size_t gen_max_marshaled_size(KeyOnly<const Messenger2::Message2> stru, bool align);

CorbaSeq_Export
void gen_find_size(KeyOnly<const Messenger2::Message2> stru, size_t& size, size_t& padding);

CorbaSeq_Export
bool operator<<(Serializer& strm, KeyOnly<const Messenger2::Message2> stru);

CorbaSeq_Export
bool operator>>(Serializer& strm, KeyOnly<Messenger2::Message2> stru);

template <>
struct MarshalTraits<Messenger2::Message2> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger2 {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct CorbaSeq_Export Message2_OpenDDS_KeyLessThan {
  bool operator()(const Messenger2::Message2& v1, const Messenger2::Message2& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.subject_id < v2.subject_id) return true;
    if (v2.subject_id < v1.subject_id) return false;
    return false;
  }
};
}


namespace Messenger2 {
class Message2TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Messenger2::Message2> {
  typedef Messenger2::Message2 MessageType;
  typedef Messenger2::Message2Seq MessageSequenceType;
  typedef Messenger2::Message2TypeSupport TypeSupportType;
  typedef Messenger2::Message2TypeSupportImpl TypeSupportTypeImpl;
  typedef Messenger2::Message2DataWriter DataWriterType;
  typedef Messenger2::Message2DataReader DataReaderType;
  typedef Messenger2::Message2_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Messenger2::Message2"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger2 {
class CorbaSeq_Export Message2TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Message2TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message2> TraitsType;
  typedef Message2TypeSupport TypeSupportType;
  typedef Message2TypeSupport::_var_type _var_type;
  typedef Message2TypeSupport::_ptr_type _ptr_type;

  Message2TypeSupportImpl() {}
  virtual ~Message2TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Message2TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
CorbaSeq_Export
const MetaStruct& getMetaStruct<Messenger2::Message2>();
CorbaSeq_Export
void gen_skip_over(Serializer& ser, Messenger2::Message2*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message2 */

/* End MODULE: Messenger2 */
#endif /* OPENDDS_IDL_GENERATED_MESSENGER2TYPESUPPORTIMPL_H_WS8TPU */
