/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file KeyedData.idl */
#ifndef OPENDDS_IDL_GENERATED_KEYEDDATATYPESUPPORTIMPL_H_U8NKAY
#define OPENDDS_IDL_GENERATED_KEYEDDATATYPESUPPORTIMPL_H_U8NKAY
#include "KeyedDataC.h"
#include "dds/DCPS/Definitions.h"
#include "KeyedDataTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: Current */


/* End INTERFACE: Current */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyType */


/* End TYPEDEF: PolicyType */


/* Begin INTERFACE-FWD: Policy */


/* End INTERFACE-FWD: Policy */


/* Begin TYPEDEF: PolicyList */


/* End TYPEDEF: PolicyList */


/* Begin TYPEDEF: PolicyTypeSeq */


/* End TYPEDEF: PolicyTypeSeq */


/* Begin INTERFACE-FWD: PolicyCurrent */


/* End INTERFACE-FWD: PolicyCurrent */


/* Begin ENUM: SetOverrideType */


/* End ENUM: SetOverrideType */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyErrorCode */


/* End TYPEDEF: PolicyErrorCode */


/* Begin CONST: BAD_POLICY */


/* End CONST: BAD_POLICY */


/* Begin CONST: UNSUPPORTED_POLICY */


/* End CONST: UNSUPPORTED_POLICY */


/* Begin CONST: BAD_POLICY_TYPE */


/* End CONST: BAD_POLICY_TYPE */


/* Begin CONST: BAD_POLICY_VALUE */


/* End CONST: BAD_POLICY_VALUE */


/* Begin CONST: UNSUPPORTED_POLICY_VALUE */


/* End CONST: UNSUPPORTED_POLICY_VALUE */


/* Begin INTERFACE: Policy */


/* End INTERFACE: Policy */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyManager */


/* End INTERFACE: PolicyManager */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyCurrent */


/* End INTERFACE: PolicyCurrent */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ServiceType */


/* End TYPEDEF: ServiceType */


/* Begin TYPEDEF: ServiceOption */


/* End TYPEDEF: ServiceOption */


/* Begin TYPEDEF: ServiceDetailType */


/* End TYPEDEF: ServiceDetailType */


/* Begin TYPEDEF: ServiceDetailData */


/* End TYPEDEF: ServiceDetailData */


/* Begin TYPEDEF: ServiceOptionSeq */


/* End TYPEDEF: ServiceOptionSeq */


/* Begin CONST: Security */


/* End CONST: Security */


/* Begin STRUCT: ServiceDetail */


/* End STRUCT: ServiceDetail */


/* Begin TYPEDEF: ServiceDetailSeq */


/* End TYPEDEF: ServiceDetailSeq */


/* Begin STRUCT: ServiceInformation */


/* End STRUCT: ServiceInformation */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: ParameterMode */


/* End ENUM: ParameterMode */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ORBid */


/* End TYPEDEF: ORBid */


/* Begin TYPEDEF: Flags */


/* End TYPEDEF: Flags */


/* Begin TYPEDEF: Identifier */


/* End TYPEDEF: Identifier */


/* Begin TYPEDEF: RepositoryId */


/* End TYPEDEF: RepositoryId */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: TCKind */


/* End ENUM: TCKind */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin STRUCT: NamedValue */


/* End STRUCT: NamedValue */


/* Begin ENUM: exception_type */


/* End ENUM: exception_type */


/* Begin NATIVE: ValueFactory */


/* End NATIVE: ValueFactory */

/* End MODULE: CORBA */


/* Begin MODULE: Xyz */



/* Begin STRUCT: KeyedData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

InstancesLib_Export
void gen_find_size(const Xyz::KeyedData& stru, size_t& size, size_t& padding);

InstancesLib_Export
bool operator<<(Serializer& strm, const Xyz::KeyedData& stru);

InstancesLib_Export
bool operator>>(Serializer& strm, Xyz::KeyedData& stru);

InstancesLib_Export
size_t gen_max_marshaled_size(const Xyz::KeyedData& stru, bool align);

InstancesLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::KeyedData> stru, bool align);

InstancesLib_Export
void gen_find_size(KeyOnly<const Xyz::KeyedData> stru, size_t& size, size_t& padding);

InstancesLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::KeyedData> stru);

InstancesLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::KeyedData> stru);

template <>
struct MarshalTraits<Xyz::KeyedData> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct InstancesLib_Export KeyedData_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::KeyedData& v1, const Xyz::KeyedData& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.a_long_value < v2.a_long_value) return true;
    if (v2.a_long_value < v1.a_long_value) return false;
    return false;
  }
};
}


namespace Xyz {
class KeyedDataTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::KeyedData> {
  typedef Xyz::KeyedData MessageType;
  typedef Xyz::KeyedDataSeq MessageSequenceType;
  typedef Xyz::KeyedDataTypeSupport TypeSupportType;
  typedef Xyz::KeyedDataTypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::KeyedDataDataWriter DataWriterType;
  typedef Xyz::KeyedDataDataReader DataReaderType;
  typedef Xyz::KeyedData_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::KeyedData"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class InstancesLib_Export KeyedDataTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<KeyedDataTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<KeyedData> TraitsType;
  typedef KeyedDataTypeSupport TypeSupportType;
  typedef KeyedDataTypeSupport::_var_type _var_type;
  typedef KeyedDataTypeSupport::_ptr_type _ptr_type;

  KeyedDataTypeSupportImpl() {}
  virtual ~KeyedDataTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static KeyedDataTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
InstancesLib_Export
const MetaStruct& getMetaStruct<Xyz::KeyedData>();
InstancesLib_Export
void gen_skip_over(Serializer& ser, Xyz::KeyedData*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: KeyedData */

/* End MODULE: Xyz */
#endif /* OPENDDS_IDL_GENERATED_KEYEDDATATYPESUPPORTIMPL_H_U8NKAY */
