/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file KeyedData.idl */
#include "KeyedDataTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: BooleanSeq */


/* End TYPEDEF: BooleanSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: CharSeq */


/* End TYPEDEF: CharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: DoubleSeq */


/* End TYPEDEF: DoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: FloatSeq */


/* End TYPEDEF: FloatSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongDoubleSeq */


/* End TYPEDEF: LongDoubleSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongSeq */


/* End TYPEDEF: ULongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: UShortSeq */


/* End TYPEDEF: UShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WCharSeq */


/* End TYPEDEF: WCharSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: WStringSeq */


/* End TYPEDEF: WStringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongLongSeq */


/* End TYPEDEF: LongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ULongLongSeq */


/* End TYPEDEF: ULongLongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: Current */


/* End INTERFACE: Current */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyType */


/* End TYPEDEF: PolicyType */


/* Begin INTERFACE-FWD: Policy */


/* End INTERFACE-FWD: Policy */


/* Begin TYPEDEF: PolicyList */


/* End TYPEDEF: PolicyList */


/* Begin TYPEDEF: PolicyTypeSeq */


/* End TYPEDEF: PolicyTypeSeq */


/* Begin INTERFACE-FWD: PolicyCurrent */


/* End INTERFACE-FWD: PolicyCurrent */


/* Begin ENUM: SetOverrideType */


/* End ENUM: SetOverrideType */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: PolicyErrorCode */


/* End TYPEDEF: PolicyErrorCode */


/* Begin CONST: BAD_POLICY */


/* End CONST: BAD_POLICY */


/* Begin CONST: UNSUPPORTED_POLICY */


/* End CONST: UNSUPPORTED_POLICY */


/* Begin CONST: BAD_POLICY_TYPE */


/* End CONST: BAD_POLICY_TYPE */


/* Begin CONST: BAD_POLICY_VALUE */


/* End CONST: BAD_POLICY_VALUE */


/* Begin CONST: UNSUPPORTED_POLICY_VALUE */


/* End CONST: UNSUPPORTED_POLICY_VALUE */


/* Begin INTERFACE: Policy */


/* End INTERFACE: Policy */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyManager */


/* End INTERFACE: PolicyManager */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin INTERFACE: PolicyCurrent */


/* End INTERFACE: PolicyCurrent */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ServiceType */


/* End TYPEDEF: ServiceType */


/* Begin TYPEDEF: ServiceOption */


/* End TYPEDEF: ServiceOption */


/* Begin TYPEDEF: ServiceDetailType */


/* End TYPEDEF: ServiceDetailType */


/* Begin TYPEDEF: ServiceDetailData */


/* End TYPEDEF: ServiceDetailData */


/* Begin TYPEDEF: ServiceOptionSeq */


/* End TYPEDEF: ServiceOptionSeq */


/* Begin CONST: Security */


/* End CONST: Security */


/* Begin STRUCT: ServiceDetail */


/* End STRUCT: ServiceDetail */


/* Begin TYPEDEF: ServiceDetailSeq */


/* End TYPEDEF: ServiceDetailSeq */


/* Begin STRUCT: ServiceInformation */


/* End STRUCT: ServiceInformation */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: ParameterMode */


/* End ENUM: ParameterMode */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ORBid */


/* End TYPEDEF: ORBid */


/* Begin TYPEDEF: Flags */


/* End TYPEDEF: Flags */


/* Begin TYPEDEF: Identifier */


/* End TYPEDEF: Identifier */


/* Begin TYPEDEF: RepositoryId */


/* End TYPEDEF: RepositoryId */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin ENUM: TCKind */


/* End ENUM: TCKind */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin STRUCT: NamedValue */


/* End STRUCT: NamedValue */


/* Begin ENUM: exception_type */


/* End ENUM: exception_type */


/* Begin NATIVE: ValueFactory */


/* End NATIVE: ValueFactory */

/* End MODULE: CORBA */


/* Begin MODULE: Xyz */



/* Begin STRUCT: KeyedData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Xyz::KeyedData& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.a_long_value);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.handle_value);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sample_sequence);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.writer_id);
}

bool operator<<(Serializer& strm, const Xyz::KeyedData& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.a_long_value)
    && (strm << stru.handle_value)
    && (strm << stru.sample_sequence)
    && (strm << stru.writer_id);
}

bool operator>>(Serializer& strm, Xyz::KeyedData& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.a_long_value)
    && (strm >> stru.handle_value)
    && (strm >> stru.sample_sequence)
    && (strm >> stru.writer_id);
}

size_t gen_max_marshaled_size(const Xyz::KeyedData& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 16;
}

size_t gen_max_marshaled_size(KeyOnly<const Xyz::KeyedData> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Xyz::KeyedData> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.a_long_value);
}

bool operator<<(Serializer& strm, KeyOnly<const Xyz::KeyedData> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.a_long_value);
}

bool operator>>(Serializer& strm, KeyOnly<Xyz::KeyedData> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.a_long_value);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
::DDS::DataWriter_ptr KeyedDataTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<KeyedData> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr KeyedDataTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<KeyedData> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr KeyedDataTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<KeyedData> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<KeyedData, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& KeyedDataTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<KeyedData>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool KeyedDataTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* KeyedDataTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
KeyedDataTypeSupport::_ptr_type KeyedDataTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Xyz::KeyedData> : MetaStruct {
  typedef Xyz::KeyedData T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const Xyz::KeyedData& typed = *static_cast<const Xyz::KeyedData*>(stru);
    if (std::strcmp(field, "a_long_value") == 0) {
      return typed.a_long_value;
    }
    if (std::strcmp(field, "handle_value") == 0) {
      return typed.handle_value;
    }
    if (std::strcmp(field, "sample_sequence") == 0) {
      return typed.sample_sequence;
    }
    if (std::strcmp(field, "writer_id") == 0) {
      return typed.writer_id;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Xyz::KeyedData)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "a_long_value") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'a_long_value' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "handle_value") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'handle_value' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "sample_sequence") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sample_sequence' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "writer_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'writer_id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Xyz::KeyedData");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "a_long_value") == 0) {
      return make_field_cmp(&T::a_long_value, next);
    }
    if (std::strcmp(field, "handle_value") == 0) {
      return make_field_cmp(&T::handle_value, next);
    }
    if (std::strcmp(field, "sample_sequence") == 0) {
      return make_field_cmp(&T::sample_sequence, next);
    }
    if (std::strcmp(field, "writer_id") == 0) {
      return make_field_cmp(&T::writer_id, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Xyz::KeyedData)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"a_long_value", "handle_value", "sample_sequence", "writer_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "a_long_value") == 0) {
      return &static_cast<const T*>(stru)->a_long_value;
    }
    if (std::strcmp(field, "handle_value") == 0) {
      return &static_cast<const T*>(stru)->handle_value;
    }
    if (std::strcmp(field, "sample_sequence") == 0) {
      return &static_cast<const T*>(stru)->sample_sequence;
    }
    if (std::strcmp(field, "writer_id") == 0) {
      return &static_cast<const T*>(stru)->writer_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Xyz::KeyedData)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "a_long_value") == 0) {
      static_cast<T*>(lhs)->a_long_value = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "handle_value") == 0) {
      static_cast<T*>(lhs)->handle_value = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sample_sequence") == 0) {
      static_cast<T*>(lhs)->sample_sequence = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "writer_id") == 0) {
      static_cast<T*>(lhs)->writer_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Xyz::KeyedData)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "a_long_value") == 0) {
      return static_cast<const T*>(lhs)->a_long_value == static_cast<const T*>(rhs)->a_long_value;
    }
    if (std::strcmp(field, "handle_value") == 0) {
      return static_cast<const T*>(lhs)->handle_value == static_cast<const T*>(rhs)->handle_value;
    }
    if (std::strcmp(field, "sample_sequence") == 0) {
      return static_cast<const T*>(lhs)->sample_sequence == static_cast<const T*>(rhs)->sample_sequence;
    }
    if (std::strcmp(field, "writer_id") == 0) {
      return static_cast<const T*>(lhs)->writer_id == static_cast<const T*>(rhs)->writer_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Xyz::KeyedData)");
  }
};

template<>
const MetaStruct& getMetaStruct<Xyz::KeyedData>()
{
  static MetaStructImpl<Xyz::KeyedData> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, Xyz::KeyedData*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Xyz::KeyedData>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: KeyedData */

/* End MODULE: Xyz */
