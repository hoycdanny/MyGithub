// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_METASTRUCTTESTC_8JNSJT_H_
#define _TAO_IDL_METASTRUCTTESTC_8JNSJT_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_type.cpp:261

struct A;

typedef
  ::TAO_Var_Var_T<
      A
    >
  A_var;

typedef
  ::TAO_Out_T<
      A
    >
  A_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:51

struct  A
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef A_var _var_type;
  typedef A_out _out_type;
  
  ::TAO::String_Manager s;
  ::CORBA::Long l;
};

// TAO_IDL - Generated from
// be/be_visitor_array/array_ch.cpp:54

typedef ::CORBA::Short ShortArray[3];
typedef ::CORBA::Short ShortArray_slice;
struct ShortArray_tag {};


typedef
  TAO_FixedArray_Var_T<
      ShortArray,
      ShortArray_slice,
      ShortArray_tag
    >
  ShortArray_var;

typedef
  ShortArray
  ShortArray_out;

typedef
  TAO_Array_Forany_T<
      ShortArray,
      ShortArray_slice,
      ShortArray_tag
    >
  ShortArray_forany;

TAO_EXPORT_MACRO ShortArray_slice *
ShortArray_alloc (void);

TAO_EXPORT_MACRO void
ShortArray_free (
    ShortArray_slice *_tao_slice);

TAO_EXPORT_MACRO ShortArray_slice *
ShortArray_dup (
    const ShortArray_slice *_tao_slice);

TAO_EXPORT_MACRO void
ShortArray_copy (
    ShortArray_slice *_tao_to,
    const ShortArray_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_array/array_ch.cpp:54

typedef ShortArray ArrayOfShortArray[4];
typedef ShortArray ArrayOfShortArray_slice;
struct ArrayOfShortArray_tag {};


typedef
  TAO_FixedArray_Var_T<
      ArrayOfShortArray,
      ArrayOfShortArray_slice,
      ArrayOfShortArray_tag
    >
  ArrayOfShortArray_var;

typedef
  ArrayOfShortArray
  ArrayOfShortArray_out;

typedef
  TAO_Array_Forany_T<
      ArrayOfShortArray,
      ArrayOfShortArray_slice,
      ArrayOfShortArray_tag
    >
  ArrayOfShortArray_forany;

TAO_EXPORT_MACRO ArrayOfShortArray_slice *
ArrayOfShortArray_alloc (void);

TAO_EXPORT_MACRO void
ArrayOfShortArray_free (
    ArrayOfShortArray_slice *_tao_slice);

TAO_EXPORT_MACRO ArrayOfShortArray_slice *
ArrayOfShortArray_dup (
    const ArrayOfShortArray_slice *_tao_slice);

TAO_EXPORT_MACRO void
ArrayOfShortArray_copy (
    ArrayOfShortArray_slice *_tao_to,
    const ArrayOfShortArray_slice *_tao_from);

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_STRUCTSEQ_CH_)
#define _STRUCTSEQ_CH_

class StructSeq;

typedef
  ::TAO_VarSeq_Var_T<
      StructSeq
    >
  StructSeq_var;

typedef
  ::TAO_Seq_Out_T<
      StructSeq
    >
  StructSeq_out;

class  StructSeq
  : public
      ::TAO::unbounded_value_sequence<
          A
        >
{
public:
  StructSeq (void);
  StructSeq ( ::CORBA::ULong max);
  StructSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    A* buffer,
    ::CORBA::Boolean release = false);
  StructSeq (const StructSeq &);
  virtual ~StructSeq (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef StructSeq_var _var_type;
  typedef StructSeq_out _out_type;
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_enum/enum_ch.cpp:47

enum MyEnum
{
  b,
  d,
  as,
  sa,
  ss,
  other1,
  other2
};

typedef MyEnum &MyEnum_out;

// TAO_IDL - Generated from
// be/be_type.cpp:261

class MyUnion;

typedef
  ::TAO_Var_Var_T<
      MyUnion
    >
  MyUnion_var;

typedef
  ::TAO_Out_T<
      MyUnion
    >
  MyUnion_out;

class  MyUnion
{
public:
  MyUnion (void);
  MyUnion (const MyUnion &);
  ~MyUnion (void);

  MyUnion &operator= (const MyUnion &);

  // TAO_IDL - Generated from
  // be/be_visitor_union/discriminant_ch.cpp:70

  void _d (MyEnum);
  MyEnum _d (void) const;

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef MyUnion_var _var_type;
  typedef MyUnion_out _out_type;

  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:452

  void u_b ( ::CORBA::Boolean);
  ::CORBA::Boolean u_b (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:452

  void u_d ( ::CORBA::Double);
  ::CORBA::Double u_d (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:659

  void u_as (const A &);
  const A &u_as (void) const;
  A &u_as (void);

  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:129

  void u_sa (ShortArray);
  ShortArray_slice * u_sa (void) const;

  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:551

  void u_ss (const StructSeq &);
  const StructSeq &u_ss (void) const;
  StructSeq &u_ss (void);

  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:452

  void u_f ( ::CORBA::Float);
  ::CORBA::Float u_f (void) const;
private:
  MyEnum disc_;

  union
  {
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:380
    ::CORBA::Boolean u_b_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:380
    ::CORBA::Double u_d_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:522
    A *u_as_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:93
    ShortArray_slice *u_sa_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:447
    StructSeq *u_ss_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:380
    ::CORBA::Float u_f_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset (void);
};

// TAO_IDL - Generated from
// be/be_type.cpp:261

struct Source;

typedef
  ::TAO_Var_Var_T<
      Source
    >
  Source_var;

typedef
  ::TAO_Out_T<
      Source
    >
  Source_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:51

struct  Source
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef Source_var _var_type;
  typedef Source_out _out_type;
  
  A rhs_a;
  ShortArray rhs_sa;
  ArrayOfShortArray rhs_asa;
  StructSeq rhs_ss;
  MyEnum rhs_e;
  

  MyUnion rhs_u;
};

// TAO_IDL - Generated from
// be/be_type.cpp:261

struct Target;

typedef
  ::TAO_Var_Var_T<
      Target
    >
  Target_var;

typedef
  ::TAO_Out_T<
      Target
    >
  Target_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:51

struct  Target
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef Target_var _var_type;
  typedef Target_out _out_type;
  
  A lhs_a;
  ShortArray lhs_sa;
  ArrayOfShortArray lhs_asa;
  StructSeq lhs_ss;
  MyEnum lhs_e;
  

  MyUnion lhs_u;
};

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::A>
    : public
        Var_Size_Arg_Traits_T<
            ::A,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::ShortArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::ShortArray_var,
            ::ShortArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::ArrayOfShortArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::ArrayOfShortArray_var,
            ::ArrayOfShortArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::StructSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::StructSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:904

  template<>
  class Arg_Traits< ::MyEnum>
    : public
        Basic_Arg_Traits_T<
            ::MyEnum,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1058

  template<>
  class Arg_Traits< ::MyUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::MyUnion,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Source>
    : public
        Var_Size_Arg_Traits_T<
            ::Source,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Target>
    : public
        Var_Size_Arg_Traits_T<
            ::Target,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      ShortArray_forany
    >
  {
    static void free (
        ShortArray_slice * _tao_slice);
    static ShortArray_slice * dup (
        const ShortArray_slice * _tao_slice);
    static void copy (
        ShortArray_slice * _tao_to,
        const ShortArray_slice * _tao_from);
    static ShortArray_slice * alloc (void);
    static void zero (
        ShortArray_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      ArrayOfShortArray_forany
    >
  {
    static void free (
        ArrayOfShortArray_slice * _tao_slice);
    static ArrayOfShortArray_slice * dup (
        const ArrayOfShortArray_slice * _tao_slice);
    static void copy (
        ArrayOfShortArray_slice * _tao_to,
        const ArrayOfShortArray_slice * _tao_from);
    static ArrayOfShortArray_slice * alloc (void);
    static void zero (
        ArrayOfShortArray_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, A &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::ShortArray_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ::ShortArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::ArrayOfShortArray_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ::ArrayOfShortArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_StructSeq_H_
#define _TAO_CDR_OP_StructSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StructSeq &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StructSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_StructSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, MyEnum _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, MyEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MyUnion &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, MyUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Source &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Source &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Target &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Target &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "MetaStructTestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

