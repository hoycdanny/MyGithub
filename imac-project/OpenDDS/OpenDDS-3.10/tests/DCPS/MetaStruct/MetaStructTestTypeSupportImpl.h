/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file MetaStructTest.idl */
#ifndef OPENDDS_IDL_GENERATED_METASTRUCTTESTTYPESUPPORTIMPL_H_D2BHXL
#define OPENDDS_IDL_GENERATED_METASTRUCTTESTTYPESUPPORTIMPL_H_D2BHXL
#include "MetaStructTestC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DCPS/Serializer.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin STRUCT: A */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const A& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const A& stru);

bool operator>>(Serializer& strm, A& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<A>();
void gen_skip_over(Serializer& ser, A*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: A */


/* Begin TYPEDEF: ShortArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const ShortArray_forany& arr, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const ShortArray_forany& arr);

bool operator>>(Serializer& strm, ShortArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, ShortArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ShortArray */


/* Begin TYPEDEF: ArrayOfShortArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const ArrayOfShortArray_forany& arr, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const ArrayOfShortArray_forany& arr);

bool operator>>(Serializer& strm, ArrayOfShortArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, ArrayOfShortArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ArrayOfShortArray */


/* Begin TYPEDEF: StructSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const StructSeq& seq, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const StructSeq& seq);

bool operator>>(Serializer& strm, StructSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, StructSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: StructSeq */


/* Begin ENUM: MyEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const MyEnum& enumval);

bool operator>>(Serializer& strm, MyEnum& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_MyEnum_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: MyEnum */


/* Begin UNION: MyUnion */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const MyUnion& uni, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const MyUnion& uni);

bool operator>>(Serializer& strm, MyUnion& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, MyUnion*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End UNION: MyUnion */


/* Begin STRUCT: Source */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Source& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Source& stru);

bool operator>>(Serializer& strm, Source& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Source>();
void gen_skip_over(Serializer& ser, Source*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Source */


/* Begin STRUCT: Target */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Target& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Target& stru);

bool operator>>(Serializer& strm, Target& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Target>();
void gen_skip_over(Serializer& ser, Target*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Target */
#endif /* OPENDDS_IDL_GENERATED_METASTRUCTTESTTYPESUPPORTIMPL_H_D2BHXL */
