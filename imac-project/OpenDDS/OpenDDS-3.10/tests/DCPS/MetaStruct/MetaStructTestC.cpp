// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "MetaStructTestC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "MetaStructTestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

ShortArray_slice *
ShortArray_dup (const ShortArray_slice *_tao_src_array)
{
  ShortArray_slice *_tao_dup_array =
    ShortArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <ShortArray_slice *> (0);
    }
  
  ShortArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

ShortArray_slice *
ShortArray_alloc (void)
{
  ShortArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Short[3], 0);
  return retval;
}

void
ShortArray_free (
    ShortArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ShortArray_copy (
    ShortArray_slice * _tao_to,
    const ShortArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

ArrayOfShortArray_slice *
ArrayOfShortArray_dup (const ArrayOfShortArray_slice *_tao_src_array)
{
  ArrayOfShortArray_slice *_tao_dup_array =
    ArrayOfShortArray_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <ArrayOfShortArray_slice *> (0);
    }
  
  ArrayOfShortArray_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

ArrayOfShortArray_slice *
ArrayOfShortArray_alloc (void)
{
  ArrayOfShortArray_slice *retval = 0;
  ACE_NEW_RETURN (retval, ShortArray[4], 0);
  return retval;
}

void
ArrayOfShortArray_free (
    ArrayOfShortArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ArrayOfShortArray_copy (
    ArrayOfShortArray_slice * _tao_to,
    const ArrayOfShortArray_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      // call the underlying _copy
      ShortArray_copy (_tao_to[i0], _tao_from[i0]);
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_STRUCTSEQ_CS_)
#define _STRUCTSEQ_CS_

StructSeq::StructSeq (void)
{}

StructSeq::StructSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        A
      > (max)
{}

StructSeq::StructSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    A * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        A
      >
    (max, length, buffer, release)
{}

StructSeq::StructSeq (
    const StructSeq &seq)
  : ::TAO::unbounded_value_sequence<
        A
      > (seq)
{}

StructSeq::~StructSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

MyUnion::MyUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = other1;
}

MyUnion::MyUnion (const ::MyUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::b:
    {
      this->u_.u_b_ = u.u_.u_b_;
    }
    break;
    case ::d:
    {
      this->u_.u_d_ = u.u_.u_d_;
    }
    break;
    case ::as:
    {
      if (u.u_.u_as_ == 0)
        {
          this->u_.u_as_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.u_as_,
              A (*u.u_.u_as_)
            );
        }
    }
    break;
    case ::sa:
    {
      // Make a deep copy.
      this->u_.u_sa_ = 
        ShortArray_dup (u.u_.u_sa_);
    }
    break;
    case ::ss:
    {
      if (u.u_.u_ss_ == 0)
        {
          this->u_.u_ss_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.u_ss_,
              StructSeq (*u.u_.u_ss_)
            );
        }
    }
    break;
    default:
    {
      this->u_.u_f_ = u.u_.u_f_;
    }
    break;
  }
}

MyUnion::~MyUnion (void)
{
  // Finalize.
  this->_reset ();
}

MyUnion &
MyUnion::operator= (const ::MyUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::b:
    {
      this->u_.u_b_ = u.u_.u_b_;
    }
    break;
    case ::d:
    {
      this->u_.u_d_ = u.u_.u_d_;
    }
    break;
    case ::as:
    {
      if (u.u_.u_as_ == 0)
        {
          this->u_.u_as_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.u_as_,
              A (*u.u_.u_as_),
              *this
            );
        }
    }
    break;
    case ::sa:
    {
      // Make a deep copy.
      this->u_.u_sa_ = 
        ShortArray_dup (u.u_.u_sa_);
    }
    break;
    case ::ss:
    {
      if (u.u_.u_ss_ == 0)
        {
          this->u_.u_ss_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.u_ss_,
              StructSeq (*u.u_.u_ss_),
              *this
            );
        }
    }
    break;
    default:
    {
      this->u_.u_f_ = u.u_.u_f_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void MyUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case ::b:
      
    break;
    
    case ::d:
      
    break;
    
    case ::as:
      delete this->u_.u_as_;
      this->u_.u_as_ = 0;
      
    break;
    
    case ::sa:
      ShortArray_free (this->u_.u_sa_);
      this->u_.u_sa_ = 0;
      
    break;
    
    case ::ss:
      delete this->u_.u_ss_;
      this->u_.u_ss_ = 0;
      
    break;
    
    default:
      
    break;
    
  }
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.s.in ()) &&
    (strm << _tao_aggregate.l);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.s.out ()) &&
    (strm >> _tao_aggregate.l);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ShortArray_forany &_tao_array)
{
  return
    strm.write_short_array (
        reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
        3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ShortArray_forany &_tao_array)
{
  return
    strm.read_short_array (
        reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
        3);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ArrayOfShortArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 4 && _tao_marshal_flag; ++i0)
    {
      ShortArray_var tmp_var (ShortArray_dup (_tao_array[i0]));
      ShortArray_forany tmp (tmp_var.inout ());
      _tao_marshal_flag = (strm << tmp);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ArrayOfShortArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 4 && _tao_marshal_flag; ++i0)
    {
      ShortArray_forany tmp (ShortArray_alloc ());
      _tao_marshal_flag = (strm >> tmp);
      ShortArray_copy (_tao_array[i0], tmp.in ());
      ShortArray_free (tmp.inout ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_StructSeq_CPP_
#define _TAO_CDR_OP_StructSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StructSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StructSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_StructSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, MyEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, MyEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<MyEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MyUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::b:
      {
        result = strm << ::ACE_OutputCDR::from_boolean (_tao_union.u_b ());
      }
      break;
    case ::d:
      {
        result = strm << _tao_union.u_d ();
      }
      break;
    case ::as:
      {
        result = strm << _tao_union.u_as ();
      }
      break;
    case ::sa:
      {
        ShortArray_forany _tao_union_tmp (
            _tao_union.u_sa ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case ::ss:
      {
        result = strm << _tao_union.u_ss ();
      }
      break;
    default:
      {
        result = strm << _tao_union.u_f ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MyUnion &_tao_union
  )
{
  MyEnum _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::b:
      {
        ::CORBA::Boolean _tao_union_tmp;
        ::ACE_InputCDR::to_boolean _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.u_b (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::d:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_d (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::as:
      {
        A _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_as (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::sa:
      {
        ShortArray _tao_union_tmp;
        ShortArray_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;

        if (result)
          {
            _tao_union.u_sa (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::ss:
      {
        StructSeq _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_ss (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Float _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.u_f (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Source &_tao_aggregate)
{
  ShortArray_forany _tao_aggregate_rhs_sa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ShortArray_slice*) (
      #else
      (const_cast<
          ShortArray_slice*> (
      #endif
          _tao_aggregate.rhs_sa
        )
    );
  ArrayOfShortArray_forany _tao_aggregate_rhs_asa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ArrayOfShortArray_slice*) (
      #else
      (const_cast<
          ArrayOfShortArray_slice*> (
      #endif
          _tao_aggregate.rhs_asa
        )
    );
  return
    (strm << _tao_aggregate.rhs_a) &&
    (strm << _tao_aggregate_rhs_sa) &&
    (strm << _tao_aggregate_rhs_asa) &&
    (strm << _tao_aggregate.rhs_ss) &&
    (strm << _tao_aggregate.rhs_e) &&
    (strm << _tao_aggregate.rhs_u);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Source &_tao_aggregate)
{
  ShortArray_forany _tao_aggregate_rhs_sa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ShortArray_slice*) (
      #else
      (const_cast<
          ShortArray_slice*> (
      #endif
          _tao_aggregate.rhs_sa
        )
    );
  ArrayOfShortArray_forany _tao_aggregate_rhs_asa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ArrayOfShortArray_slice*) (
      #else
      (const_cast<
          ArrayOfShortArray_slice*> (
      #endif
          _tao_aggregate.rhs_asa
        )
    );
  return
    (strm >> _tao_aggregate.rhs_a) &&
    (strm >> _tao_aggregate_rhs_sa) &&
    (strm >> _tao_aggregate_rhs_asa) &&
    (strm >> _tao_aggregate.rhs_ss) &&
    (strm >> _tao_aggregate.rhs_e) &&
    (strm >> _tao_aggregate.rhs_u);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Target &_tao_aggregate)
{
  ShortArray_forany _tao_aggregate_lhs_sa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ShortArray_slice*) (
      #else
      (const_cast<
          ShortArray_slice*> (
      #endif
          _tao_aggregate.lhs_sa
        )
    );
  ArrayOfShortArray_forany _tao_aggregate_lhs_asa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ArrayOfShortArray_slice*) (
      #else
      (const_cast<
          ArrayOfShortArray_slice*> (
      #endif
          _tao_aggregate.lhs_asa
        )
    );
  return
    (strm << _tao_aggregate.lhs_a) &&
    (strm << _tao_aggregate_lhs_sa) &&
    (strm << _tao_aggregate_lhs_asa) &&
    (strm << _tao_aggregate.lhs_ss) &&
    (strm << _tao_aggregate.lhs_e) &&
    (strm << _tao_aggregate.lhs_u);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Target &_tao_aggregate)
{
  ShortArray_forany _tao_aggregate_lhs_sa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ShortArray_slice*) (
      #else
      (const_cast<
          ShortArray_slice*> (
      #endif
          _tao_aggregate.lhs_sa
        )
    );
  ArrayOfShortArray_forany _tao_aggregate_lhs_asa
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((ArrayOfShortArray_slice*) (
      #else
      (const_cast<
          ArrayOfShortArray_slice*> (
      #endif
          _tao_aggregate.lhs_asa
        )
    );
  return
    (strm >> _tao_aggregate.lhs_a) &&
    (strm >> _tao_aggregate_lhs_sa) &&
    (strm >> _tao_aggregate_lhs_asa) &&
    (strm >> _tao_aggregate.lhs_ss) &&
    (strm >> _tao_aggregate.lhs_e) &&
    (strm >> _tao_aggregate.lhs_u);
}

TAO_END_VERSIONED_NAMESPACE_DECL



