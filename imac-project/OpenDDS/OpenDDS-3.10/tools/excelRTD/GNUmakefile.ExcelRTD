# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ExcelRTD
#
# $Id: gnu.mpd 2866 2016-09-08 21:53:48Z huangh $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.ExcelRTD
DEPENDENCY_FILE  = .depend.ExcelRTD

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)OpenDDS_ExcelRTD.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)OpenDDS_ExcelRTD

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)OpenDDS_ExcelRTD.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  IRTDServer.idl \
  RTDMonitor.cpp \
  IRTDServer_i.c \
  RTDDataThread.cpp \
  RTDServer.def \
  RTDServerDLL.cpp \
  RTDServer.cpp \
  MonitorDataModel_moc.cpp \
  ../monitor/Options.cpp \
  ../monitor/MonitorTask.cpp \
  ../monitor/MonitorData.cpp \
  ../monitor/MonitorDataModel.cpp \
  ../monitor/MonitorDataStorage.cpp \
  ../monitor/QosFormatter.cpp

VPATH = .:../monitor


LIBPATHS := . "$(ACE_ROOT)/lib" "../../lib" "$(QTDIR)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lOpenDDS_monitor -lOpenDDS_Tcp -lOpenDDS_InfoRepoDiscovery -lOpenDDS_Dcps -lTAO_BiDirGIOP -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE -lQtGui$(QT_CFG) -lQtCore$(QT_CFG)
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  resource.h \
  Script.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)$(ACE_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT) \
        $(RC_INCLUDE_FLAG)../.. \
        $(RC_INCLUDE_FLAG)$(QTDIR)/include \
        $(RC_INCLUDE_FLAG)../../tools/monitor
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/ExcelRTD
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_monitor OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../lib $(if $(ARCH),../../lib/$(ARCH)) $(QTDIR)/lib $(if $(ARCH),$(QTDIR)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_monitor OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(qt4),1)
ifeq ($(microsoft),1)
ifeq ($(built_in_topics),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif

ifeq ($(qt4),1)
ifeq ($(microsoft),1)
ifeq ($(built_in_topics),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../lib -L$(QTDIR)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../lib $(if $(ARCH),-L../../lib/$(ARCH)) -L$(QTDIR)/lib $(if $(ARCH),-L$(QTDIR)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../.. -I$(QTDIR)/include -I../../tools/monitor
CPPFLAGS     += -D_USRDLL -DRTDServer_EXPORTS -DRTD_DLL_NAME=\"$(TargetFileName)\"
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo ExcelRTD will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(qt4),1)
requires_disabled_macros += qt4
endif
ifneq ($(microsoft),1)
requires_disabled_macros += microsoft
endif
ifneq ($(built_in_topics),1)
requires_disabled_macros += built_in_topics
endif
require_warning:
	@echo ExcelRTD will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += MonitorDataModel_moc.cpp
MonitorDataModel_moc.cpp: ../monitor/MonitorDataModel.h
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  ../monitor/MonitorDataModel.h -o $@


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(qt4),1)
ifeq ($(microsoft),1)
ifeq ($(built_in_topics),1)
	@-:
endif
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


