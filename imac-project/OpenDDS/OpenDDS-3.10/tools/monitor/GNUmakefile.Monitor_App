# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.Monitor_App
#
# $Id: gnu.mpd 2866 2016-09-08 21:53:48Z huangh $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.Monitor_App
DEPENDENCY_FILE  = .depend.Monitor_App
BIN_UNCHECKED    = monitor

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  Monitor_qrc.cpp \
  Options.cpp \
  MonitorTask.cpp \
  MonitorData.cpp \
  MonitorDataModel.cpp \
  MonitorDataModel_moc.cpp \
  MonitorDataStorage.cpp \
  Edge.cpp \
  Node.cpp \
  NodeGenerator.cpp \
  QosFormatter.cpp \
  Monitor_main.cpp \
  RepoSelect.cpp \
  RepoSelect_moc.cpp \
  GraphGenerator.cpp \
  Viewer.cpp \
  Viewer_moc.cpp \
  GvOptions.cpp \
  NodeOptions.cpp \
  GvOptions_moc.cpp \
  NodeOptions_moc.cpp


LIBPATHS := . "$(ACE_ROOT)/lib" "../../lib" "$(QTDIR)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lOpenDDS_monitor -lOpenDDS_Tcp -lOpenDDS_InfoRepoDiscovery -lOpenDDS_Dcps -lTAO_BiDirGIOP -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE -lQtGui$(QT_CFG) -lQtCore$(QT_CFG)
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = rtp

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSBIN ?= $(call COLLAPSE_SLASHES,../../bin)
ifeq ($(INSBIN),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(if $(ARCH),$(if $(INSBIN),$(INSBIN)/$(ARCH)),$(INSBIN))

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/Monitor_App
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_monitor OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../lib $(if $(ARCH),../../lib/$(ARCH)) $(QTDIR)/lib $(if $(ARCH),$(QTDIR)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_monitor OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(qt4),1)
ifeq ($(built_in_topics),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
ifdef ARCH
  ARCH_BIN = $(ARCH)/$(BIN)
endif #ARCH
else
  all: lib_warning
endif
else
  all: require_warning
endif
else
  all: require_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(INSBIN),)
ifneq ($(INSBIN),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/$(if $(ARCH),$(ARCH)/)%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../lib -L$(QTDIR)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../lib $(if $(ARCH),-L../../lib/$(ARCH)) -L$(QTDIR)/lib $(if $(ARCH),-L$(QTDIR)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../.. -I$(QTDIR)/include
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo Monitor_App will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(qt4),1)
requires_disabled_macros += qt4
endif
ifneq ($(built_in_topics),1)
requires_disabled_macros += built_in_topics
endif
require_warning:
	@echo Monitor_App will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += ui_GvOptions.h
OBJS_DEPEND_ON_GENERATED = 1
ui_GvOptions.h: GvOptions.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  GvOptions.ui -o $@


GENERATED_DIRTY += ui_Monitor.h
OBJS_DEPEND_ON_GENERATED = 1
ui_Monitor.h: Monitor.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  Monitor.ui -o $@


GENERATED_DIRTY += ui_NodeOptions.h
OBJS_DEPEND_ON_GENERATED = 1
ui_NodeOptions.h: NodeOptions.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  NodeOptions.ui -o $@


GENERATED_DIRTY += ui_RepoDialog.h
OBJS_DEPEND_ON_GENERATED = 1
ui_RepoDialog.h: RepoDialog.ui
	$(if $(findstring ",$(QTDIR)/bin/uic),$(QTDIR)/bin/uic,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/uic)))  RepoDialog.ui -o $@


GENERATED_DIRTY += MonitorDataModel_moc.cpp
MonitorDataModel_moc.cpp: MonitorDataModel.h
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  MonitorDataModel.h -o $@


GENERATED_DIRTY += RepoSelect_moc.cpp
RepoSelect_moc.cpp: RepoSelect.h
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  RepoSelect.h -o $@


GENERATED_DIRTY += GvOptions_moc.cpp
GvOptions_moc.cpp: GvOptions.h
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  GvOptions.h -o $@


GENERATED_DIRTY += NodeOptions_moc.cpp
NodeOptions_moc.cpp: NodeOptions.h
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  NodeOptions.h -o $@


GENERATED_DIRTY += Viewer_moc.cpp
Viewer_moc.cpp: Viewer.h
	$(if $(findstring ",$(QTDIR)/bin/moc),$(QTDIR)/bin/moc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/moc)))  Viewer.h -o $@


GENERATED_DIRTY += Monitor_qrc.cpp
Monitor_qrc.cpp: Monitor.qrc
	$(if $(findstring ",$(QTDIR)/bin/rcc),$(QTDIR)/bin/rcc,$(call ADD_QUOTE,$(call ADD_ARCH,$(QTDIR)/bin/rcc))) -name Monitor Monitor.qrc -o $@


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),1)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, OpenDDS_monitor OpenDDS_Tcp OpenDDS_InfoRepoDiscovery OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE "QtGui$(QT_CFG)" QtCore$(QT_CFG), $(foreach libpath, . $(ACE_ROOT)/lib ../../lib $(QTDIR)/lib, $(wildcard $(libpath)/$(LIB_PREFIX)$(lib).$(LIBEXT))))
  endif
endif

$(VBIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
  ifneq (,$(LINK.cc.override))
	$(LINK.cc.override)
  else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $(filter-out %.a,$^) $(VLDLIBS) $(POSTLINK)
  endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(qt4),1)
ifeq ($(built_in_topics),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


