/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file Federator.idl */
#include "DcpsInfo_pch.h"
#include "FederatorTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DdsDcpsCoreTypeSupportImpl.h"
#include "dds/DdsDcpsGuidTypeSupportImpl.h"
#include "dds/DdsDcpsInfoUtilsTypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: GuidVendorId_t */


/* End TYPEDEF: GuidVendorId_t */


/* Begin TYPEDEF: GuidPrefix_t */


/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */


/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */


/* End STRUCT: EntityId_t */


/* Begin CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* End CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* Begin CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* End CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_UNKNOWN */


/* End CONST: ENTITYKIND_USER_UNKNOWN */


/* Begin CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_NO_KEY */


/* End CONST: ENTITYKIND_USER_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* End CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* Begin CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* End CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* Begin CONST: ENTITYKIND_OPENDDS_TOPIC */


/* End CONST: ENTITYKIND_OPENDDS_TOPIC */


/* Begin CONST: ENTITYKIND_OPENDDS_USER */


/* End CONST: ENTITYKIND_OPENDDS_USER */


/* Begin CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* End CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* Begin STRUCT: GUID_t */


/* End STRUCT: GUID_t */


/* Begin TYPEDEF: GUIDSeq */


/* End TYPEDEF: GUIDSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: RepoId */


/* End TYPEDEF: RepoId */


/* Begin TYPEDEF: TransportBLOB */


/* End TYPEDEF: TransportBLOB */


/* Begin STRUCT: TransportLocator */


/* End STRUCT: TransportLocator */


/* Begin TYPEDEF: TransportLocatorSeq */


/* End TYPEDEF: TransportLocatorSeq */


/* Begin STRUCT: IncompatibleQosStatus */


/* End STRUCT: IncompatibleQosStatus */


/* Begin STRUCT: AddDomainStatus */


/* End STRUCT: AddDomainStatus */


/* Begin ENUM: TopicStatus */


/* End ENUM: TopicStatus */


/* Begin STRUCT: WriterAssociation */


/* End STRUCT: WriterAssociation */


/* Begin STRUCT: ReaderAssociation */


/* End STRUCT: ReaderAssociation */


/* Begin TYPEDEF: WriterIdSeq */


/* End TYPEDEF: WriterIdSeq */


/* Begin TYPEDEF: ReaderIdSeq */


/* End TYPEDEF: ReaderIdSeq */


/* Begin TYPEDEF: OctetArray16 */


/* End TYPEDEF: OctetArray16 */


/* Begin STRUCT: Locator_t */


/* End STRUCT: Locator_t */


/* Begin TYPEDEF: LocatorSeq */


/* End TYPEDEF: LocatorSeq */


/* Begin TYPEDEF: String256 */


/* End TYPEDEF: String256 */


/* Begin STRUCT: ContentFilterProperty_t */


/* End STRUCT: ContentFilterProperty_t */


/* Begin STRUCT: ReaderProxy_t */


/* End STRUCT: ReaderProxy_t */


/* Begin STRUCT: DiscoveredReaderData */


/* End STRUCT: DiscoveredReaderData */


/* Begin STRUCT: WriterProxy_t */


/* End STRUCT: WriterProxy_t */


/* Begin STRUCT: DiscoveredWriterData */


/* End STRUCT: DiscoveredWriterData */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Condition */


/* End INTERFACE-FWD: Condition */


/* Begin TYPEDEF: ConditionSeq */


/* End TYPEDEF: ConditionSeq */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: DomainId_t */


/* End TYPEDEF: DomainId_t */


/* Begin TYPEDEF: ReturnCode_t */


/* End TYPEDEF: ReturnCode_t */


/* Begin CONST: HANDLE_NIL */


/* End CONST: HANDLE_NIL */


/* Begin CONST: LENGTH_UNLIMITED */


/* End CONST: LENGTH_UNLIMITED */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin CONST: RETCODE_OK */


/* End CONST: RETCODE_OK */


/* Begin CONST: RETCODE_ERROR */


/* End CONST: RETCODE_ERROR */


/* Begin CONST: RETCODE_UNSUPPORTED */


/* End CONST: RETCODE_UNSUPPORTED */


/* Begin CONST: RETCODE_BAD_PARAMETER */


/* End CONST: RETCODE_BAD_PARAMETER */


/* Begin CONST: RETCODE_PRECONDITION_NOT_MET */


/* End CONST: RETCODE_PRECONDITION_NOT_MET */


/* Begin CONST: RETCODE_OUT_OF_RESOURCES */


/* End CONST: RETCODE_OUT_OF_RESOURCES */


/* Begin CONST: RETCODE_NOT_ENABLED */


/* End CONST: RETCODE_NOT_ENABLED */


/* Begin CONST: RETCODE_IMMUTABLE_POLICY */


/* End CONST: RETCODE_IMMUTABLE_POLICY */


/* Begin CONST: RETCODE_INCONSISTENT_POLICY */


/* End CONST: RETCODE_INCONSISTENT_POLICY */


/* Begin CONST: RETCODE_ALREADY_DELETED */


/* End CONST: RETCODE_ALREADY_DELETED */


/* Begin CONST: RETCODE_TIMEOUT */


/* End CONST: RETCODE_TIMEOUT */


/* Begin CONST: RETCODE_NO_DATA */


/* End CONST: RETCODE_NO_DATA */


/* Begin CONST: RETCODE_ILLEGAL_OPERATION */


/* End CONST: RETCODE_ILLEGAL_OPERATION */


/* Begin TYPEDEF: StatusKind */


/* End TYPEDEF: StatusKind */


/* Begin TYPEDEF: StatusMask */


/* End TYPEDEF: StatusMask */


/* Begin CONST: INCONSISTENT_TOPIC_STATUS */


/* End CONST: INCONSISTENT_TOPIC_STATUS */


/* Begin CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* End CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* Begin CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* End CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* Begin CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: SAMPLE_LOST_STATUS */


/* End CONST: SAMPLE_LOST_STATUS */


/* Begin CONST: SAMPLE_REJECTED_STATUS */


/* End CONST: SAMPLE_REJECTED_STATUS */


/* Begin CONST: DATA_ON_READERS_STATUS */


/* End CONST: DATA_ON_READERS_STATUS */


/* Begin CONST: DATA_AVAILABLE_STATUS */


/* End CONST: DATA_AVAILABLE_STATUS */


/* Begin CONST: LIVELINESS_LOST_STATUS */


/* End CONST: LIVELINESS_LOST_STATUS */


/* Begin CONST: LIVELINESS_CHANGED_STATUS */


/* End CONST: LIVELINESS_CHANGED_STATUS */


/* Begin CONST: PUBLICATION_MATCHED_STATUS */


/* End CONST: PUBLICATION_MATCHED_STATUS */


/* Begin CONST: SUBSCRIPTION_MATCHED_STATUS */


/* End CONST: SUBSCRIPTION_MATCHED_STATUS */


/* Begin STRUCT: InconsistentTopicStatus */


/* End STRUCT: InconsistentTopicStatus */


/* Begin STRUCT: SampleLostStatus */


/* End STRUCT: SampleLostStatus */


/* Begin ENUM: SampleRejectedStatusKind */


/* End ENUM: SampleRejectedStatusKind */


/* Begin STRUCT: SampleRejectedStatus */


/* End STRUCT: SampleRejectedStatus */


/* Begin STRUCT: LivelinessLostStatus */


/* End STRUCT: LivelinessLostStatus */


/* Begin STRUCT: LivelinessChangedStatus */


/* End STRUCT: LivelinessChangedStatus */


/* Begin STRUCT: OfferedDeadlineMissedStatus */


/* End STRUCT: OfferedDeadlineMissedStatus */


/* Begin STRUCT: RequestedDeadlineMissedStatus */


/* End STRUCT: RequestedDeadlineMissedStatus */


/* Begin STRUCT: OfferedIncompatibleQosStatus */


/* End STRUCT: OfferedIncompatibleQosStatus */


/* Begin STRUCT: RequestedIncompatibleQosStatus */


/* End STRUCT: RequestedIncompatibleQosStatus */


/* Begin STRUCT: PublicationMatchedStatus */


/* End STRUCT: PublicationMatchedStatus */


/* Begin STRUCT: SubscriptionMatchedStatus */


/* End STRUCT: SubscriptionMatchedStatus */


/* Begin INTERFACE-FWD: Listener */


/* End INTERFACE-FWD: Listener */


/* Begin INTERFACE-FWD: Entity */


/* End INTERFACE-FWD: Entity */


/* Begin INTERFACE: Listener */


/* End INTERFACE: Listener */


/* Begin INTERFACE: Condition */


/* End INTERFACE: Condition */


/* Begin INTERFACE: WaitSetInterf */


/* End INTERFACE: WaitSetInterf */


/* Begin INTERFACE: GuardConditionInterf */


/* End INTERFACE: GuardConditionInterf */


/* Begin INTERFACE: StatusCondition */


/* End INTERFACE: StatusCondition */


/* Begin CONST: USERDATA_QOS_POLICY_NAME */


/* End CONST: USERDATA_QOS_POLICY_NAME */


/* Begin CONST: DURABILITY_QOS_POLICY_NAME */


/* End CONST: DURABILITY_QOS_POLICY_NAME */


/* Begin CONST: PRESENTATION_QOS_POLICY_NAME */


/* End CONST: PRESENTATION_QOS_POLICY_NAME */


/* Begin CONST: DEADLINE_QOS_POLICY_NAME */


/* End CONST: DEADLINE_QOS_POLICY_NAME */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* End CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIP_QOS_POLICY_NAME */


/* End CONST: OWNERSHIP_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* Begin CONST: LIVELINESS_QOS_POLICY_NAME */


/* End CONST: LIVELINESS_QOS_POLICY_NAME */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* Begin CONST: PARTITION_QOS_POLICY_NAME */


/* End CONST: PARTITION_QOS_POLICY_NAME */


/* Begin CONST: RELIABILITY_QOS_POLICY_NAME */


/* End CONST: RELIABILITY_QOS_POLICY_NAME */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* End CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* Begin CONST: HISTORY_QOS_POLICY_NAME */


/* End CONST: HISTORY_QOS_POLICY_NAME */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* End CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* End CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: TOPICDATA_QOS_POLICY_NAME */


/* End CONST: TOPICDATA_QOS_POLICY_NAME */


/* Begin CONST: GROUPDATA_QOS_POLICY_NAME */


/* End CONST: GROUPDATA_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* Begin CONST: LIFESPAN_QOS_POLICY_NAME */


/* End CONST: LIFESPAN_QOS_POLICY_NAME */


/* Begin CONST: DURABILITYSERVICE_POLICY_NAME */


/* End CONST: DURABILITYSERVICE_POLICY_NAME */


/* Begin CONST: INVALID_QOS_POLICY_ID */


/* End CONST: INVALID_QOS_POLICY_ID */


/* Begin CONST: USERDATA_QOS_POLICY_ID */


/* End CONST: USERDATA_QOS_POLICY_ID */


/* Begin CONST: DURABILITY_QOS_POLICY_ID */


/* End CONST: DURABILITY_QOS_POLICY_ID */


/* Begin CONST: PRESENTATION_QOS_POLICY_ID */


/* End CONST: PRESENTATION_QOS_POLICY_ID */


/* Begin CONST: DEADLINE_QOS_POLICY_ID */


/* End CONST: DEADLINE_QOS_POLICY_ID */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* End CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIP_QOS_POLICY_ID */


/* End CONST: OWNERSHIP_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* Begin CONST: LIVELINESS_QOS_POLICY_ID */


/* End CONST: LIVELINESS_QOS_POLICY_ID */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* Begin CONST: PARTITION_QOS_POLICY_ID */


/* End CONST: PARTITION_QOS_POLICY_ID */


/* Begin CONST: RELIABILITY_QOS_POLICY_ID */


/* End CONST: RELIABILITY_QOS_POLICY_ID */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* End CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* Begin CONST: HISTORY_QOS_POLICY_ID */


/* End CONST: HISTORY_QOS_POLICY_ID */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* End CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* End CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: TOPICDATA_QOS_POLICY_ID */


/* End CONST: TOPICDATA_QOS_POLICY_ID */


/* Begin CONST: GROUPDATA_QOS_POLICY_ID */


/* End CONST: GROUPDATA_QOS_POLICY_ID */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* Begin CONST: LIFESPAN_QOS_POLICY_ID */


/* End CONST: LIFESPAN_QOS_POLICY_ID */


/* Begin CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* End CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* Begin INTERFACE: Entity */


/* End INTERFACE: Entity */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* Begin CONST: MAX_USER_DOMAINID */


/* End CONST: MAX_USER_DOMAINID */


/* Begin MODULE: DCPS */



/* Begin CONST: ALL_STATUS_MASK */


/* End CONST: ALL_STATUS_MASK */


/* Begin CONST: NO_STATUS_MASK */


/* End CONST: NO_STATUS_MASK */


/* Begin CONST: DEFAULT_STATUS_MASK */


/* End CONST: DEFAULT_STATUS_MASK */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Topic */


/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataWriter */


/* End INTERFACE-FWD: DataWriter */


/* Begin INTERFACE-FWD: Publisher */


/* End INTERFACE-FWD: Publisher */


/* Begin INTERFACE: DataWriterListener */


/* End INTERFACE: DataWriterListener */


/* Begin INTERFACE: PublisherListener */


/* End INTERFACE: PublisherListener */


/* Begin INTERFACE: DataWriter */


/* End INTERFACE: DataWriter */


/* Begin INTERFACE: Publisher */


/* End INTERFACE: Publisher */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: PublicationLostStatus */


/* End STRUCT: PublicationLostStatus */


/* Begin TYPEDEF: PublicationDisconnectedStatus */


/* End TYPEDEF: PublicationDisconnectedStatus */


/* Begin TYPEDEF: PublicationReconnectedStatus */


/* End TYPEDEF: PublicationReconnectedStatus */


/* Begin TYPEDEF: DisassociationStatus */


/* End TYPEDEF: DisassociationStatus */


/* Begin INTERFACE: DataWriterListener */


/* End INTERFACE: DataWriterListener */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin TYPEDEF: DataReaderSeq */


/* End TYPEDEF: DataReaderSeq */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: TopicDescription */


/* End INTERFACE-FWD: TopicDescription */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin INTERFACE-FWD: Subscriber */


/* End INTERFACE-FWD: Subscriber */


/* Begin INTERFACE: DataReaderListener */


/* End INTERFACE: DataReaderListener */


/* Begin INTERFACE: SubscriberListener */


/* End INTERFACE: SubscriberListener */


/* Begin INTERFACE: ReadCondition */


/* End INTERFACE: ReadCondition */


/* Begin INTERFACE: QueryCondition */


/* End INTERFACE: QueryCondition */


/* Begin INTERFACE: DataReader */


/* End INTERFACE: DataReader */


/* Begin INTERFACE: Subscriber */


/* End INTERFACE: Subscriber */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DataWriterRemote */


/* End INTERFACE: DataWriterRemote */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DataReaderRemote */


/* End INTERFACE: DataReaderRemote */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DCPSInfo */


/* End INTERFACE: DCPSInfo */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: Federator */



/* Begin TYPEDEF: RepoKey */


/* End TYPEDEF: RepoKey */


/* Begin TYPEDEF: FederationDomain */


/* End TYPEDEF: FederationDomain */


/* Begin TYPEDEF: FederationId */


/* End TYPEDEF: FederationId */


/* Begin ENUM: UpdateType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const OpenDDS::Federator::UpdateType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, OpenDDS::Federator::UpdateType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<OpenDDS::Federator::UpdateType>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_OpenDDS_Federator_UpdateType_names[] = {
  "CreateEntity",
  "DestroyEntity",
  "UpdateQosValue1",
  "UpdateQosValue2",
  "UpdateFilterExpressionParams"
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: UpdateType */


/* Begin CONST: NIL_REPOSITORY */


/* End CONST: NIL_REPOSITORY */


/* Begin CONST: DEFAULT_FEDERATIONDOMAIN */


/* End CONST: DEFAULT_FEDERATIONDOMAIN */


/* Begin CONST: ANY_FEDERATIONDOMAIN */


/* End CONST: ANY_FEDERATIONDOMAIN */


/* Begin STRUCT: OwnerUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::Federator::OwnerUpdate& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sender);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.owner);
  gen_find_size(stru.participant, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.domain);
  find_size_ulong(size, padding);
}

bool operator<<(Serializer& strm, const OpenDDS::Federator::OwnerUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.sender)
    && (strm << stru.owner)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action);
}

bool operator>>(Serializer& strm, OpenDDS::Federator::OwnerUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.sender)
    && (strm >> stru.owner)
    && (strm >> stru.participant)
    && (strm >> stru.domain)
    && (strm >> stru.action);
}

size_t gen_max_marshaled_size(const OpenDDS::Federator::OwnerUpdate& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 32;
}

size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::OwnerUpdate> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const OpenDDS::Federator::OwnerUpdate> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.sender);
}

bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::OwnerUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.sender);
}

bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::OwnerUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.sender);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr OwnerUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<OwnerUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr OwnerUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<OwnerUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr OwnerUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<OwnerUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<OwnerUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& OwnerUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<OwnerUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool OwnerUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* OwnerUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
OwnerUpdateTypeSupport::_ptr_type OwnerUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::Federator::OwnerUpdate> : MetaStruct {
  typedef OpenDDS::Federator::OwnerUpdate T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::Federator::OwnerUpdate& typed = *static_cast<const OpenDDS::Federator::OwnerUpdate*>(stru);
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return typed.owner;
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::OwnerUpdate)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "sender") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "owner") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'owner' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "domain") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "action") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct OpenDDS::Federator::OwnerUpdate");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strcmp(field, "owner") == 0) {
      return make_field_cmp(&T::owner, next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::OwnerUpdate)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"sender", "owner", "participant", "domain", "action", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return &static_cast<const T*>(stru)->owner;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::OwnerUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "owner") == 0) {
      static_cast<T*>(lhs)->owner = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::OwnerUpdate)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return static_cast<const T*>(lhs)->owner == static_cast<const T*>(rhs)->owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::OwnerUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::Federator::OwnerUpdate>()
{
  static MetaStructImpl<OpenDDS::Federator::OwnerUpdate> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::Federator::OwnerUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::Federator::OwnerUpdate>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: OwnerUpdate */


/* Begin CONST: OWNERUPDATETOPICNAME */


/* End CONST: OWNERUPDATETOPICNAME */


/* Begin CONST: OWNERUPDATETYPENAME */


/* End CONST: OWNERUPDATETYPENAME */


/* Begin STRUCT: TopicUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::Federator::TopicUpdate& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.id, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sender);
  gen_find_size(stru.participant, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.domain);
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.topic.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.datatype.in()) + 1;
  gen_find_size(stru.qos, size, padding);
}

bool operator<<(Serializer& strm, const OpenDDS::Federator::TopicUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.topic.in())
    && (strm << stru.datatype.in())
    && (strm << stru.qos);
}

bool operator>>(Serializer& strm, OpenDDS::Federator::TopicUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.sender)
    && (strm >> stru.participant)
    && (strm >> stru.domain)
    && (strm >> stru.action)
    && (strm >> stru.topic.out())
    && (strm >> stru.datatype.out())
    && (strm >> stru.qos);
}

size_t gen_max_marshaled_size(const OpenDDS::Federator::TopicUpdate& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::TopicUpdate> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const OpenDDS::Federator::TopicUpdate> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.sender);
}

bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::TopicUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.sender);
}

bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::TopicUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.sender);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr TopicUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<TopicUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr TopicUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<TopicUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr TopicUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<TopicUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<TopicUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& TopicUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<TopicUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool TopicUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* TopicUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
TopicUpdateTypeSupport::_ptr_type TopicUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::Federator::TopicUpdate> : MetaStruct {
  typedef OpenDDS::Federator::TopicUpdate T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::Federator::TopicUpdate& typed = *static_cast<const OpenDDS::Federator::TopicUpdate*>(stru);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strcmp(field, "topic") == 0) {
      return typed.topic.in();
    }
    if (std::strcmp(field, "datatype") == 0) {
      return typed.datatype.in();
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return getMetaStruct<DDS::TopicQos>().getValue(&typed.qos, field + 4);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::TopicUpdate)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 3);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "sender") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "domain") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "action") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "topic") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'topic' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'topic' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "datatype") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'datatype' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'datatype' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return getMetaStruct<DDS::TopicQos>().getValue(ser, field + 4);
    } else {
      gen_skip_over(ser, static_cast<DDS::TopicQos*>(0));
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct OpenDDS::Federator::TopicUpdate");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strcmp(field, "topic") == 0) {
      return make_field_cmp(&T::topic, next);
    }
    if (std::strcmp(field, "datatype") == 0) {
      return make_field_cmp(&T::datatype, next);
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return make_struct_cmp(&T::qos, getMetaStruct<DDS::TopicQos>().create_qc_comparator(field + 4), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::TopicUpdate)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "participant", "domain", "action", "topic", "datatype", "qos", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "datatype") == 0) {
      return &static_cast<const T*>(stru)->datatype;
    }
    if (std::strcmp(field, "qos") == 0) {
      return &static_cast<const T*>(stru)->qos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::TopicUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "datatype") == 0) {
      static_cast<T*>(lhs)->datatype = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "qos") == 0) {
      static_cast<T*>(lhs)->qos = *static_cast<const DDS::TopicQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::TopicUpdate)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    if (std::strcmp(field, "topic") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->topic.in(), static_cast<const T*>(rhs)->topic.in());
    }
    if (std::strcmp(field, "datatype") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->datatype.in(), static_cast<const T*>(rhs)->datatype.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::TopicUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::Federator::TopicUpdate>()
{
  static MetaStructImpl<OpenDDS::Federator::TopicUpdate> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::Federator::TopicUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::Federator::TopicUpdate>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: TopicUpdate */


/* Begin CONST: TOPICUPDATETOPICNAME */


/* End CONST: TOPICUPDATETOPICNAME */


/* Begin CONST: TOPICUPDATETYPENAME */


/* End CONST: TOPICUPDATETYPENAME */


/* Begin STRUCT: ParticipantUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::Federator::ParticipantUpdate& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.id, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sender);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.owner);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.domain);
  find_size_ulong(size, padding);
  gen_find_size(stru.qos, size, padding);
}

bool operator<<(Serializer& strm, const OpenDDS::Federator::ParticipantUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.owner)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.qos);
}

bool operator>>(Serializer& strm, OpenDDS::Federator::ParticipantUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.sender)
    && (strm >> stru.owner)
    && (strm >> stru.domain)
    && (strm >> stru.action)
    && (strm >> stru.qos);
}

size_t gen_max_marshaled_size(const OpenDDS::Federator::ParticipantUpdate& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::ParticipantUpdate> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const OpenDDS::Federator::ParticipantUpdate> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.sender);
}

bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::ParticipantUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.sender);
}

bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::ParticipantUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.sender);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr ParticipantUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<ParticipantUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr ParticipantUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ParticipantUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ParticipantUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ParticipantUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<ParticipantUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ParticipantUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<ParticipantUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool ParticipantUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* ParticipantUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
ParticipantUpdateTypeSupport::_ptr_type ParticipantUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::Federator::ParticipantUpdate> : MetaStruct {
  typedef OpenDDS::Federator::ParticipantUpdate T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::Federator::ParticipantUpdate& typed = *static_cast<const OpenDDS::Federator::ParticipantUpdate*>(stru);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return typed.owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return getMetaStruct<DDS::DomainParticipantQos>().getValue(&typed.qos, field + 4);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::ParticipantUpdate)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 3);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "sender") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "owner") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'owner' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "domain") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "action") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return getMetaStruct<DDS::DomainParticipantQos>().getValue(ser, field + 4);
    } else {
      gen_skip_over(ser, static_cast<DDS::DomainParticipantQos*>(0));
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct OpenDDS::Federator::ParticipantUpdate");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strcmp(field, "owner") == 0) {
      return make_field_cmp(&T::owner, next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return make_struct_cmp(&T::qos, getMetaStruct<DDS::DomainParticipantQos>().create_qc_comparator(field + 4), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::ParticipantUpdate)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "owner", "domain", "action", "qos", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return &static_cast<const T*>(stru)->owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "qos") == 0) {
      return &static_cast<const T*>(stru)->qos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::ParticipantUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "owner") == 0) {
      static_cast<T*>(lhs)->owner = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "qos") == 0) {
      static_cast<T*>(lhs)->qos = *static_cast<const DDS::DomainParticipantQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::ParticipantUpdate)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return static_cast<const T*>(lhs)->owner == static_cast<const T*>(rhs)->owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::ParticipantUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::Federator::ParticipantUpdate>()
{
  static MetaStructImpl<OpenDDS::Federator::ParticipantUpdate> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::Federator::ParticipantUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::Federator::ParticipantUpdate>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ParticipantUpdate */


/* Begin CONST: PARTICIPANTUPDATETOPICNAME */


/* End CONST: PARTICIPANTUPDATETOPICNAME */


/* Begin CONST: PARTICIPANTUPDATETYPENAME */


/* End CONST: PARTICIPANTUPDATETYPENAME */


/* Begin STRUCT: PublicationUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::Federator::PublicationUpdate& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.id, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sender);
  gen_find_size(stru.topic, size, padding);
  gen_find_size(stru.participant, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.domain);
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.callback.in()) + 1;
  gen_find_size(stru.publisher_qos, size, padding);
  gen_find_size(stru.datawriter_qos, size, padding);
  gen_find_size(stru.transport_info, size, padding);
}

bool operator<<(Serializer& strm, const OpenDDS::Federator::PublicationUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.topic)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.callback.in())
    && (strm << stru.publisher_qos)
    && (strm << stru.datawriter_qos)
    && (strm << stru.transport_info);
}

bool operator>>(Serializer& strm, OpenDDS::Federator::PublicationUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.sender)
    && (strm >> stru.topic)
    && (strm >> stru.participant)
    && (strm >> stru.domain)
    && (strm >> stru.action)
    && (strm >> stru.callback.out())
    && (strm >> stru.publisher_qos)
    && (strm >> stru.datawriter_qos)
    && (strm >> stru.transport_info);
}

size_t gen_max_marshaled_size(const OpenDDS::Federator::PublicationUpdate& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::PublicationUpdate> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const OpenDDS::Federator::PublicationUpdate> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.sender);
}

bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::PublicationUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.sender);
}

bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::PublicationUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.sender);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr PublicationUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<PublicationUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr PublicationUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PublicationUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr PublicationUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PublicationUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<PublicationUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& PublicationUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<PublicationUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool PublicationUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* PublicationUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
PublicationUpdateTypeSupport::_ptr_type PublicationUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::Federator::PublicationUpdate> : MetaStruct {
  typedef OpenDDS::Federator::PublicationUpdate T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::Federator::PublicationUpdate& typed = *static_cast<const OpenDDS::Federator::PublicationUpdate*>(stru);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.topic, field + 6);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strcmp(field, "callback") == 0) {
      return typed.callback.in();
    }
    if (std::strncmp(field, "publisher_qos.", 14) == 0) {
      return getMetaStruct<DDS::PublisherQos>().getValue(&typed.publisher_qos, field + 14);
    }
    if (std::strncmp(field, "datawriter_qos.", 15) == 0) {
      return getMetaStruct<DDS::DataWriterQos>().getValue(&typed.datawriter_qos, field + 15);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::PublicationUpdate)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 3);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "sender") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 6);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "domain") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "action") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "callback") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'callback' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'callback' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strncmp(field, "publisher_qos.", 14) == 0) {
      return getMetaStruct<DDS::PublisherQos>().getValue(ser, field + 14);
    } else {
      gen_skip_over(ser, static_cast<DDS::PublisherQos*>(0));
    }
    if (std::strncmp(field, "datawriter_qos.", 15) == 0) {
      return getMetaStruct<DDS::DataWriterQos>().getValue(ser, field + 15);
    } else {
      gen_skip_over(ser, static_cast<DDS::DataWriterQos*>(0));
    }
    gen_skip_over(ser, static_cast<OpenDDS::DCPS::TransportLocatorSeq*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct OpenDDS::Federator::PublicationUpdate");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return make_struct_cmp(&T::topic, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 6), next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strcmp(field, "callback") == 0) {
      return make_field_cmp(&T::callback, next);
    }
    if (std::strncmp(field, "publisher_qos.", 14) == 0) {
      return make_struct_cmp(&T::publisher_qos, getMetaStruct<DDS::PublisherQos>().create_qc_comparator(field + 14), next);
    }
    if (std::strncmp(field, "datawriter_qos.", 15) == 0) {
      return make_struct_cmp(&T::datawriter_qos, getMetaStruct<DDS::DataWriterQos>().create_qc_comparator(field + 15), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::PublicationUpdate)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "topic", "participant", "domain", "action", "callback", "publisher_qos", "datawriter_qos", "transport_info", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return &static_cast<const T*>(stru)->callback;
    }
    if (std::strcmp(field, "publisher_qos") == 0) {
      return &static_cast<const T*>(stru)->publisher_qos;
    }
    if (std::strcmp(field, "datawriter_qos") == 0) {
      return &static_cast<const T*>(stru)->datawriter_qos;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      return &static_cast<const T*>(stru)->transport_info;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::PublicationUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "callback") == 0) {
      static_cast<T*>(lhs)->callback = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "publisher_qos") == 0) {
      static_cast<T*>(lhs)->publisher_qos = *static_cast<const DDS::PublisherQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "datawriter_qos") == 0) {
      static_cast<T*>(lhs)->datawriter_qos = *static_cast<const DDS::DataWriterQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      static_cast<T*>(lhs)->transport_info = *static_cast<const OpenDDS::DCPS::TransportLocatorSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::PublicationUpdate)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->callback.in(), static_cast<const T*>(rhs)->callback.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::PublicationUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::Federator::PublicationUpdate>()
{
  static MetaStructImpl<OpenDDS::Federator::PublicationUpdate> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::Federator::PublicationUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::Federator::PublicationUpdate>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PublicationUpdate */


/* Begin CONST: PUBLICATIONUPDATETOPICNAME */


/* End CONST: PUBLICATIONUPDATETOPICNAME */


/* Begin CONST: PUBLICATIONUPDATETYPENAME */


/* End CONST: PUBLICATIONUPDATETYPENAME */


/* Begin STRUCT: SubscriptionUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::Federator::SubscriptionUpdate& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.id, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sender);
  gen_find_size(stru.topic, size, padding);
  gen_find_size(stru.participant, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.domain);
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.callback.in()) + 1;
  gen_find_size(stru.subscriber_qos, size, padding);
  gen_find_size(stru.datareader_qos, size, padding);
  gen_find_size(stru.transport_info, size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.filter_class_name.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.filter_expression.in()) + 1;
  gen_find_size(stru.expression_params, size, padding);
}

bool operator<<(Serializer& strm, const OpenDDS::Federator::SubscriptionUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.topic)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.callback.in())
    && (strm << stru.subscriber_qos)
    && (strm << stru.datareader_qos)
    && (strm << stru.transport_info)
    && (strm << stru.filter_class_name.in())
    && (strm << stru.filter_expression.in())
    && (strm << stru.expression_params);
}

bool operator>>(Serializer& strm, OpenDDS::Federator::SubscriptionUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.sender)
    && (strm >> stru.topic)
    && (strm >> stru.participant)
    && (strm >> stru.domain)
    && (strm >> stru.action)
    && (strm >> stru.callback.out())
    && (strm >> stru.subscriber_qos)
    && (strm >> stru.datareader_qos)
    && (strm >> stru.transport_info)
    && (strm >> stru.filter_class_name.out())
    && (strm >> stru.filter_expression.out())
    && (strm >> stru.expression_params);
}

size_t gen_max_marshaled_size(const OpenDDS::Federator::SubscriptionUpdate& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::SubscriptionUpdate> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const OpenDDS::Federator::SubscriptionUpdate> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.sender);
}

bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::SubscriptionUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.sender);
}

bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::SubscriptionUpdate> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.sender);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr SubscriptionUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<SubscriptionUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr SubscriptionUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SubscriptionUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr SubscriptionUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SubscriptionUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<SubscriptionUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& SubscriptionUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<SubscriptionUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool SubscriptionUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* SubscriptionUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
SubscriptionUpdateTypeSupport::_ptr_type SubscriptionUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::Federator::SubscriptionUpdate> : MetaStruct {
  typedef OpenDDS::Federator::SubscriptionUpdate T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::Federator::SubscriptionUpdate& typed = *static_cast<const OpenDDS::Federator::SubscriptionUpdate*>(stru);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.topic, field + 6);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strcmp(field, "callback") == 0) {
      return typed.callback.in();
    }
    if (std::strncmp(field, "subscriber_qos.", 15) == 0) {
      return getMetaStruct<DDS::SubscriberQos>().getValue(&typed.subscriber_qos, field + 15);
    }
    if (std::strncmp(field, "datareader_qos.", 15) == 0) {
      return getMetaStruct<DDS::DataReaderQos>().getValue(&typed.datareader_qos, field + 15);
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return typed.filter_class_name.in();
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return typed.filter_expression.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::SubscriptionUpdate)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 3);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "sender") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 6);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct<OpenDDS::Federator::FederationId>().getValue(ser, field + 12);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::Federator::FederationId*>(0));
    }
    if (std::strcmp(field, "domain") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "action") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "callback") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'callback' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'callback' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strncmp(field, "subscriber_qos.", 15) == 0) {
      return getMetaStruct<DDS::SubscriberQos>().getValue(ser, field + 15);
    } else {
      gen_skip_over(ser, static_cast<DDS::SubscriberQos*>(0));
    }
    if (std::strncmp(field, "datareader_qos.", 15) == 0) {
      return getMetaStruct<DDS::DataReaderQos>().getValue(ser, field + 15);
    } else {
      gen_skip_over(ser, static_cast<DDS::DataReaderQos*>(0));
    }
    gen_skip_over(ser, static_cast<OpenDDS::DCPS::TransportLocatorSeq*>(0));
    if (std::strcmp(field, "filter_class_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'filter_class_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'filter_class_name' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'filter_expression' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'filter_expression' length could not be deserialized");
      }
      ser.skip(len);
    }
    gen_skip_over(ser, static_cast<DDS::StringSeq*>(0));
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct OpenDDS::Federator::SubscriptionUpdate");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return make_struct_cmp(&T::topic, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 6), next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct<OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strcmp(field, "callback") == 0) {
      return make_field_cmp(&T::callback, next);
    }
    if (std::strncmp(field, "subscriber_qos.", 15) == 0) {
      return make_struct_cmp(&T::subscriber_qos, getMetaStruct<DDS::SubscriberQos>().create_qc_comparator(field + 15), next);
    }
    if (std::strncmp(field, "datareader_qos.", 15) == 0) {
      return make_struct_cmp(&T::datareader_qos, getMetaStruct<DDS::DataReaderQos>().create_qc_comparator(field + 15), next);
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return make_field_cmp(&T::filter_class_name, next);
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return make_field_cmp(&T::filter_expression, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::SubscriptionUpdate)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "topic", "participant", "domain", "action", "callback", "subscriber_qos", "datareader_qos", "transport_info", "filter_class_name", "filter_expression", "expression_params", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return &static_cast<const T*>(stru)->callback;
    }
    if (std::strcmp(field, "subscriber_qos") == 0) {
      return &static_cast<const T*>(stru)->subscriber_qos;
    }
    if (std::strcmp(field, "datareader_qos") == 0) {
      return &static_cast<const T*>(stru)->datareader_qos;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      return &static_cast<const T*>(stru)->transport_info;
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return &static_cast<const T*>(stru)->filter_class_name;
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return &static_cast<const T*>(stru)->filter_expression;
    }
    if (std::strcmp(field, "expression_params") == 0) {
      return &static_cast<const T*>(stru)->expression_params;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::SubscriptionUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "callback") == 0) {
      static_cast<T*>(lhs)->callback = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subscriber_qos") == 0) {
      static_cast<T*>(lhs)->subscriber_qos = *static_cast<const DDS::SubscriberQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "datareader_qos") == 0) {
      static_cast<T*>(lhs)->datareader_qos = *static_cast<const DDS::DataReaderQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      static_cast<T*>(lhs)->transport_info = *static_cast<const OpenDDS::DCPS::TransportLocatorSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      static_cast<T*>(lhs)->filter_class_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      static_cast<T*>(lhs)->filter_expression = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "expression_params") == 0) {
      static_cast<T*>(lhs)->expression_params = *static_cast<const DDS::StringSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::SubscriptionUpdate)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->callback.in(), static_cast<const T*>(rhs)->callback.in());
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->filter_class_name.in(), static_cast<const T*>(rhs)->filter_class_name.in());
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->filter_expression.in(), static_cast<const T*>(rhs)->filter_expression.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OpenDDS::Federator::SubscriptionUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::Federator::SubscriptionUpdate>()
{
  static MetaStructImpl<OpenDDS::Federator::SubscriptionUpdate> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::Federator::SubscriptionUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::Federator::SubscriptionUpdate>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SubscriptionUpdate */


/* Begin CONST: SUBSCRIPTIONUPDATETOPICNAME */


/* End CONST: SUBSCRIPTIONUPDATETOPICNAME */


/* Begin CONST: SUBSCRIPTIONUPDATETYPENAME */


/* End CONST: SUBSCRIPTIONUPDATETYPENAME */


/* Begin EXCEPTION: Incomplete */


/* End EXCEPTION: Incomplete */


/* Begin INTERFACE: Manager */


/* End INTERFACE: Manager */


/* Begin CONST: REPOSITORY_IORTABLE_KEY */


/* End CONST: REPOSITORY_IORTABLE_KEY */


/* Begin CONST: FEDERATOR_IORTABLE_KEY */


/* End CONST: FEDERATOR_IORTABLE_KEY */

/* End MODULE: Federator */

/* End MODULE: OpenDDS */
