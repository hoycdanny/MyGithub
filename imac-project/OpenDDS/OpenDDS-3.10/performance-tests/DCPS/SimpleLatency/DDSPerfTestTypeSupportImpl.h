/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file DDSPerfTest.idl */
#ifndef OPENDDS_IDL_GENERATED_DDSPERFTESTTYPESUPPORTIMPL_H_70GCSK
#define OPENDDS_IDL_GENERATED_DDSPERFTESTTYPESUPPORTIMPL_H_70GCSK
#include "DDSPerfTestC.h"
#include "dds/DCPS/Definitions.h"
#include "DDSPerfTestTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSPerfTest */



/* Begin STRUCT: PubMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

SimpleLatency_Export
void gen_find_size(const DDSPerfTest::PubMessage& stru, size_t& size, size_t& padding);

SimpleLatency_Export
bool operator<<(Serializer& strm, const DDSPerfTest::PubMessage& stru);

SimpleLatency_Export
bool operator>>(Serializer& strm, DDSPerfTest::PubMessage& stru);

SimpleLatency_Export
size_t gen_max_marshaled_size(const DDSPerfTest::PubMessage& stru, bool align);

SimpleLatency_Export
size_t gen_max_marshaled_size(KeyOnly<const DDSPerfTest::PubMessage> stru, bool align);

SimpleLatency_Export
void gen_find_size(KeyOnly<const DDSPerfTest::PubMessage> stru, size_t& size, size_t& padding);

SimpleLatency_Export
bool operator<<(Serializer& strm, KeyOnly<const DDSPerfTest::PubMessage> stru);

SimpleLatency_Export
bool operator>>(Serializer& strm, KeyOnly<DDSPerfTest::PubMessage> stru);

template <>
struct MarshalTraits<DDSPerfTest::PubMessage> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSPerfTest {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct SimpleLatency_Export PubMessage_OpenDDS_KeyLessThan {
  bool operator()(const DDSPerfTest::PubMessage&, const DDSPerfTest::PubMessage&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace DDSPerfTest {
class PubMessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<DDSPerfTest::PubMessage> {
  typedef DDSPerfTest::PubMessage MessageType;
  typedef DDSPerfTest::PubMessageSeq MessageSequenceType;
  typedef DDSPerfTest::PubMessageTypeSupport TypeSupportType;
  typedef DDSPerfTest::PubMessageTypeSupportImpl TypeSupportTypeImpl;
  typedef DDSPerfTest::PubMessageDataWriter DataWriterType;
  typedef DDSPerfTest::PubMessageDataReader DataReaderType;
  typedef DDSPerfTest::PubMessage_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "DDSPerfTest::PubMessage"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSPerfTest {
class SimpleLatency_Export PubMessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<PubMessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<PubMessage> TraitsType;
  typedef PubMessageTypeSupport TypeSupportType;
  typedef PubMessageTypeSupport::_var_type _var_type;
  typedef PubMessageTypeSupport::_ptr_type _ptr_type;

  PubMessageTypeSupportImpl() {}
  virtual ~PubMessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static PubMessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
SimpleLatency_Export
const MetaStruct& getMetaStruct<DDSPerfTest::PubMessage>();
SimpleLatency_Export
void gen_skip_over(Serializer& ser, DDSPerfTest::PubMessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PubMessage */


/* Begin STRUCT: AckMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

SimpleLatency_Export
void gen_find_size(const DDSPerfTest::AckMessage& stru, size_t& size, size_t& padding);

SimpleLatency_Export
bool operator<<(Serializer& strm, const DDSPerfTest::AckMessage& stru);

SimpleLatency_Export
bool operator>>(Serializer& strm, DDSPerfTest::AckMessage& stru);

SimpleLatency_Export
size_t gen_max_marshaled_size(const DDSPerfTest::AckMessage& stru, bool align);

SimpleLatency_Export
size_t gen_max_marshaled_size(KeyOnly<const DDSPerfTest::AckMessage> stru, bool align);

SimpleLatency_Export
void gen_find_size(KeyOnly<const DDSPerfTest::AckMessage> stru, size_t& size, size_t& padding);

SimpleLatency_Export
bool operator<<(Serializer& strm, KeyOnly<const DDSPerfTest::AckMessage> stru);

SimpleLatency_Export
bool operator>>(Serializer& strm, KeyOnly<DDSPerfTest::AckMessage> stru);

template <>
struct MarshalTraits<DDSPerfTest::AckMessage> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSPerfTest {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct SimpleLatency_Export AckMessage_OpenDDS_KeyLessThan {
  bool operator()(const DDSPerfTest::AckMessage&, const DDSPerfTest::AckMessage&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace DDSPerfTest {
class AckMessageTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<DDSPerfTest::AckMessage> {
  typedef DDSPerfTest::AckMessage MessageType;
  typedef DDSPerfTest::AckMessageSeq MessageSequenceType;
  typedef DDSPerfTest::AckMessageTypeSupport TypeSupportType;
  typedef DDSPerfTest::AckMessageTypeSupportImpl TypeSupportTypeImpl;
  typedef DDSPerfTest::AckMessageDataWriter DataWriterType;
  typedef DDSPerfTest::AckMessageDataReader DataReaderType;
  typedef DDSPerfTest::AckMessage_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "DDSPerfTest::AckMessage"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSPerfTest {
class SimpleLatency_Export AckMessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<AckMessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<AckMessage> TraitsType;
  typedef AckMessageTypeSupport TypeSupportType;
  typedef AckMessageTypeSupport::_var_type _var_type;
  typedef AckMessageTypeSupport::_ptr_type _ptr_type;

  AckMessageTypeSupportImpl() {}
  virtual ~AckMessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static AckMessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
SimpleLatency_Export
const MetaStruct& getMetaStruct<DDSPerfTest::AckMessage>();
SimpleLatency_Export
void gen_skip_over(Serializer& ser, DDSPerfTest::AckMessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: AckMessage */

/* End MODULE: DDSPerfTest */
#endif /* OPENDDS_IDL_GENERATED_DDSPERFTESTTYPESUPPORTIMPL_H_70GCSK */
