/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file DDSPerfTest.idl */
#include "DDSPerfTestTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSPerfTest */



/* Begin STRUCT: PubMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSPerfTest::PubMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seqnum);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_00);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_01);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_02);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_03);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_04);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_05);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_06);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_07);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_08);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_09);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_10);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_11);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_12);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_13);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_14);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_15);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_16);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_17);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_18);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_19);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_20);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_21);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_22);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_23);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_24);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_25);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_26);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_27);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_28);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_29);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_30);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_31);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_32);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_33);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_34);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_35);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_36);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_37);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_38);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_39);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_40);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_41);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_42);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_43);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_44);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_45);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_46);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_47);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_48);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seq_49);
}

bool operator<<(Serializer& strm, const DDSPerfTest::PubMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.seqnum)
    && (strm << stru.seq_00)
    && (strm << stru.seq_01)
    && (strm << stru.seq_02)
    && (strm << stru.seq_03)
    && (strm << stru.seq_04)
    && (strm << stru.seq_05)
    && (strm << stru.seq_06)
    && (strm << stru.seq_07)
    && (strm << stru.seq_08)
    && (strm << stru.seq_09)
    && (strm << stru.seq_10)
    && (strm << stru.seq_11)
    && (strm << stru.seq_12)
    && (strm << stru.seq_13)
    && (strm << stru.seq_14)
    && (strm << stru.seq_15)
    && (strm << stru.seq_16)
    && (strm << stru.seq_17)
    && (strm << stru.seq_18)
    && (strm << stru.seq_19)
    && (strm << stru.seq_20)
    && (strm << stru.seq_21)
    && (strm << stru.seq_22)
    && (strm << stru.seq_23)
    && (strm << stru.seq_24)
    && (strm << stru.seq_25)
    && (strm << stru.seq_26)
    && (strm << stru.seq_27)
    && (strm << stru.seq_28)
    && (strm << stru.seq_29)
    && (strm << stru.seq_30)
    && (strm << stru.seq_31)
    && (strm << stru.seq_32)
    && (strm << stru.seq_33)
    && (strm << stru.seq_34)
    && (strm << stru.seq_35)
    && (strm << stru.seq_36)
    && (strm << stru.seq_37)
    && (strm << stru.seq_38)
    && (strm << stru.seq_39)
    && (strm << stru.seq_40)
    && (strm << stru.seq_41)
    && (strm << stru.seq_42)
    && (strm << stru.seq_43)
    && (strm << stru.seq_44)
    && (strm << stru.seq_45)
    && (strm << stru.seq_46)
    && (strm << stru.seq_47)
    && (strm << stru.seq_48)
    && (strm << stru.seq_49);
}

bool operator>>(Serializer& strm, DDSPerfTest::PubMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.seqnum)
    && (strm >> stru.seq_00)
    && (strm >> stru.seq_01)
    && (strm >> stru.seq_02)
    && (strm >> stru.seq_03)
    && (strm >> stru.seq_04)
    && (strm >> stru.seq_05)
    && (strm >> stru.seq_06)
    && (strm >> stru.seq_07)
    && (strm >> stru.seq_08)
    && (strm >> stru.seq_09)
    && (strm >> stru.seq_10)
    && (strm >> stru.seq_11)
    && (strm >> stru.seq_12)
    && (strm >> stru.seq_13)
    && (strm >> stru.seq_14)
    && (strm >> stru.seq_15)
    && (strm >> stru.seq_16)
    && (strm >> stru.seq_17)
    && (strm >> stru.seq_18)
    && (strm >> stru.seq_19)
    && (strm >> stru.seq_20)
    && (strm >> stru.seq_21)
    && (strm >> stru.seq_22)
    && (strm >> stru.seq_23)
    && (strm >> stru.seq_24)
    && (strm >> stru.seq_25)
    && (strm >> stru.seq_26)
    && (strm >> stru.seq_27)
    && (strm >> stru.seq_28)
    && (strm >> stru.seq_29)
    && (strm >> stru.seq_30)
    && (strm >> stru.seq_31)
    && (strm >> stru.seq_32)
    && (strm >> stru.seq_33)
    && (strm >> stru.seq_34)
    && (strm >> stru.seq_35)
    && (strm >> stru.seq_36)
    && (strm >> stru.seq_37)
    && (strm >> stru.seq_38)
    && (strm >> stru.seq_39)
    && (strm >> stru.seq_40)
    && (strm >> stru.seq_41)
    && (strm >> stru.seq_42)
    && (strm >> stru.seq_43)
    && (strm >> stru.seq_44)
    && (strm >> stru.seq_45)
    && (strm >> stru.seq_46)
    && (strm >> stru.seq_47)
    && (strm >> stru.seq_48)
    && (strm >> stru.seq_49);
}

size_t gen_max_marshaled_size(const DDSPerfTest::PubMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 204;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSPerfTest::PubMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSPerfTest::PubMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const DDSPerfTest::PubMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<DDSPerfTest::PubMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSPerfTest {
::DDS::DataWriter_ptr PubMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<PubMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr PubMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PubMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr PubMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PubMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<PubMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& PubMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<PubMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool PubMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* PubMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
PubMessageTypeSupport::_ptr_type PubMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSPerfTest::PubMessage> : MetaStruct {
  typedef DDSPerfTest::PubMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSPerfTest::PubMessage& typed = *static_cast<const DDSPerfTest::PubMessage*>(stru);
    if (std::strcmp(field, "seqnum") == 0) {
      return typed.seqnum;
    }
    if (std::strcmp(field, "seq_00") == 0) {
      return typed.seq_00;
    }
    if (std::strcmp(field, "seq_01") == 0) {
      return typed.seq_01;
    }
    if (std::strcmp(field, "seq_02") == 0) {
      return typed.seq_02;
    }
    if (std::strcmp(field, "seq_03") == 0) {
      return typed.seq_03;
    }
    if (std::strcmp(field, "seq_04") == 0) {
      return typed.seq_04;
    }
    if (std::strcmp(field, "seq_05") == 0) {
      return typed.seq_05;
    }
    if (std::strcmp(field, "seq_06") == 0) {
      return typed.seq_06;
    }
    if (std::strcmp(field, "seq_07") == 0) {
      return typed.seq_07;
    }
    if (std::strcmp(field, "seq_08") == 0) {
      return typed.seq_08;
    }
    if (std::strcmp(field, "seq_09") == 0) {
      return typed.seq_09;
    }
    if (std::strcmp(field, "seq_10") == 0) {
      return typed.seq_10;
    }
    if (std::strcmp(field, "seq_11") == 0) {
      return typed.seq_11;
    }
    if (std::strcmp(field, "seq_12") == 0) {
      return typed.seq_12;
    }
    if (std::strcmp(field, "seq_13") == 0) {
      return typed.seq_13;
    }
    if (std::strcmp(field, "seq_14") == 0) {
      return typed.seq_14;
    }
    if (std::strcmp(field, "seq_15") == 0) {
      return typed.seq_15;
    }
    if (std::strcmp(field, "seq_16") == 0) {
      return typed.seq_16;
    }
    if (std::strcmp(field, "seq_17") == 0) {
      return typed.seq_17;
    }
    if (std::strcmp(field, "seq_18") == 0) {
      return typed.seq_18;
    }
    if (std::strcmp(field, "seq_19") == 0) {
      return typed.seq_19;
    }
    if (std::strcmp(field, "seq_20") == 0) {
      return typed.seq_20;
    }
    if (std::strcmp(field, "seq_21") == 0) {
      return typed.seq_21;
    }
    if (std::strcmp(field, "seq_22") == 0) {
      return typed.seq_22;
    }
    if (std::strcmp(field, "seq_23") == 0) {
      return typed.seq_23;
    }
    if (std::strcmp(field, "seq_24") == 0) {
      return typed.seq_24;
    }
    if (std::strcmp(field, "seq_25") == 0) {
      return typed.seq_25;
    }
    if (std::strcmp(field, "seq_26") == 0) {
      return typed.seq_26;
    }
    if (std::strcmp(field, "seq_27") == 0) {
      return typed.seq_27;
    }
    if (std::strcmp(field, "seq_28") == 0) {
      return typed.seq_28;
    }
    if (std::strcmp(field, "seq_29") == 0) {
      return typed.seq_29;
    }
    if (std::strcmp(field, "seq_30") == 0) {
      return typed.seq_30;
    }
    if (std::strcmp(field, "seq_31") == 0) {
      return typed.seq_31;
    }
    if (std::strcmp(field, "seq_32") == 0) {
      return typed.seq_32;
    }
    if (std::strcmp(field, "seq_33") == 0) {
      return typed.seq_33;
    }
    if (std::strcmp(field, "seq_34") == 0) {
      return typed.seq_34;
    }
    if (std::strcmp(field, "seq_35") == 0) {
      return typed.seq_35;
    }
    if (std::strcmp(field, "seq_36") == 0) {
      return typed.seq_36;
    }
    if (std::strcmp(field, "seq_37") == 0) {
      return typed.seq_37;
    }
    if (std::strcmp(field, "seq_38") == 0) {
      return typed.seq_38;
    }
    if (std::strcmp(field, "seq_39") == 0) {
      return typed.seq_39;
    }
    if (std::strcmp(field, "seq_40") == 0) {
      return typed.seq_40;
    }
    if (std::strcmp(field, "seq_41") == 0) {
      return typed.seq_41;
    }
    if (std::strcmp(field, "seq_42") == 0) {
      return typed.seq_42;
    }
    if (std::strcmp(field, "seq_43") == 0) {
      return typed.seq_43;
    }
    if (std::strcmp(field, "seq_44") == 0) {
      return typed.seq_44;
    }
    if (std::strcmp(field, "seq_45") == 0) {
      return typed.seq_45;
    }
    if (std::strcmp(field, "seq_46") == 0) {
      return typed.seq_46;
    }
    if (std::strcmp(field, "seq_47") == 0) {
      return typed.seq_47;
    }
    if (std::strcmp(field, "seq_48") == 0) {
      return typed.seq_48;
    }
    if (std::strcmp(field, "seq_49") == 0) {
      return typed.seq_49;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::PubMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "seqnum") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seqnum' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_00") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_00' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_01") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_01' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_02") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_02' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_03") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_03' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_04") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_04' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_05") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_05' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_06") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_06' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_07") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_07' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_08") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_08' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_09") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_09' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_10") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_10' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_11") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_11' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_12") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_12' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_13") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_13' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_14") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_14' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_15") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_15' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_16") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_16' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_17") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_17' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_18") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_18' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_19") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_19' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_20") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_20' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_21") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_21' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_22") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_22' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_23") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_23' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_24") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_24' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_25") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_25' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_26") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_26' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_27") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_27' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_28") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_28' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_29") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_29' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_30") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_30' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_31") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_31' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_32") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_32' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_33") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_33' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_34") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_34' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_35") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_35' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_36") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_36' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_37") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_37' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_38") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_38' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_39") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_39' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_40") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_40' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_41") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_41' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_42") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_42' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_43") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_43' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_44") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_44' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_45") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_45' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_46") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_46' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_47") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_47' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_48") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_48' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "seq_49") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq_49' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSPerfTest::PubMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "seqnum") == 0) {
      return make_field_cmp(&T::seqnum, next);
    }
    if (std::strcmp(field, "seq_00") == 0) {
      return make_field_cmp(&T::seq_00, next);
    }
    if (std::strcmp(field, "seq_01") == 0) {
      return make_field_cmp(&T::seq_01, next);
    }
    if (std::strcmp(field, "seq_02") == 0) {
      return make_field_cmp(&T::seq_02, next);
    }
    if (std::strcmp(field, "seq_03") == 0) {
      return make_field_cmp(&T::seq_03, next);
    }
    if (std::strcmp(field, "seq_04") == 0) {
      return make_field_cmp(&T::seq_04, next);
    }
    if (std::strcmp(field, "seq_05") == 0) {
      return make_field_cmp(&T::seq_05, next);
    }
    if (std::strcmp(field, "seq_06") == 0) {
      return make_field_cmp(&T::seq_06, next);
    }
    if (std::strcmp(field, "seq_07") == 0) {
      return make_field_cmp(&T::seq_07, next);
    }
    if (std::strcmp(field, "seq_08") == 0) {
      return make_field_cmp(&T::seq_08, next);
    }
    if (std::strcmp(field, "seq_09") == 0) {
      return make_field_cmp(&T::seq_09, next);
    }
    if (std::strcmp(field, "seq_10") == 0) {
      return make_field_cmp(&T::seq_10, next);
    }
    if (std::strcmp(field, "seq_11") == 0) {
      return make_field_cmp(&T::seq_11, next);
    }
    if (std::strcmp(field, "seq_12") == 0) {
      return make_field_cmp(&T::seq_12, next);
    }
    if (std::strcmp(field, "seq_13") == 0) {
      return make_field_cmp(&T::seq_13, next);
    }
    if (std::strcmp(field, "seq_14") == 0) {
      return make_field_cmp(&T::seq_14, next);
    }
    if (std::strcmp(field, "seq_15") == 0) {
      return make_field_cmp(&T::seq_15, next);
    }
    if (std::strcmp(field, "seq_16") == 0) {
      return make_field_cmp(&T::seq_16, next);
    }
    if (std::strcmp(field, "seq_17") == 0) {
      return make_field_cmp(&T::seq_17, next);
    }
    if (std::strcmp(field, "seq_18") == 0) {
      return make_field_cmp(&T::seq_18, next);
    }
    if (std::strcmp(field, "seq_19") == 0) {
      return make_field_cmp(&T::seq_19, next);
    }
    if (std::strcmp(field, "seq_20") == 0) {
      return make_field_cmp(&T::seq_20, next);
    }
    if (std::strcmp(field, "seq_21") == 0) {
      return make_field_cmp(&T::seq_21, next);
    }
    if (std::strcmp(field, "seq_22") == 0) {
      return make_field_cmp(&T::seq_22, next);
    }
    if (std::strcmp(field, "seq_23") == 0) {
      return make_field_cmp(&T::seq_23, next);
    }
    if (std::strcmp(field, "seq_24") == 0) {
      return make_field_cmp(&T::seq_24, next);
    }
    if (std::strcmp(field, "seq_25") == 0) {
      return make_field_cmp(&T::seq_25, next);
    }
    if (std::strcmp(field, "seq_26") == 0) {
      return make_field_cmp(&T::seq_26, next);
    }
    if (std::strcmp(field, "seq_27") == 0) {
      return make_field_cmp(&T::seq_27, next);
    }
    if (std::strcmp(field, "seq_28") == 0) {
      return make_field_cmp(&T::seq_28, next);
    }
    if (std::strcmp(field, "seq_29") == 0) {
      return make_field_cmp(&T::seq_29, next);
    }
    if (std::strcmp(field, "seq_30") == 0) {
      return make_field_cmp(&T::seq_30, next);
    }
    if (std::strcmp(field, "seq_31") == 0) {
      return make_field_cmp(&T::seq_31, next);
    }
    if (std::strcmp(field, "seq_32") == 0) {
      return make_field_cmp(&T::seq_32, next);
    }
    if (std::strcmp(field, "seq_33") == 0) {
      return make_field_cmp(&T::seq_33, next);
    }
    if (std::strcmp(field, "seq_34") == 0) {
      return make_field_cmp(&T::seq_34, next);
    }
    if (std::strcmp(field, "seq_35") == 0) {
      return make_field_cmp(&T::seq_35, next);
    }
    if (std::strcmp(field, "seq_36") == 0) {
      return make_field_cmp(&T::seq_36, next);
    }
    if (std::strcmp(field, "seq_37") == 0) {
      return make_field_cmp(&T::seq_37, next);
    }
    if (std::strcmp(field, "seq_38") == 0) {
      return make_field_cmp(&T::seq_38, next);
    }
    if (std::strcmp(field, "seq_39") == 0) {
      return make_field_cmp(&T::seq_39, next);
    }
    if (std::strcmp(field, "seq_40") == 0) {
      return make_field_cmp(&T::seq_40, next);
    }
    if (std::strcmp(field, "seq_41") == 0) {
      return make_field_cmp(&T::seq_41, next);
    }
    if (std::strcmp(field, "seq_42") == 0) {
      return make_field_cmp(&T::seq_42, next);
    }
    if (std::strcmp(field, "seq_43") == 0) {
      return make_field_cmp(&T::seq_43, next);
    }
    if (std::strcmp(field, "seq_44") == 0) {
      return make_field_cmp(&T::seq_44, next);
    }
    if (std::strcmp(field, "seq_45") == 0) {
      return make_field_cmp(&T::seq_45, next);
    }
    if (std::strcmp(field, "seq_46") == 0) {
      return make_field_cmp(&T::seq_46, next);
    }
    if (std::strcmp(field, "seq_47") == 0) {
      return make_field_cmp(&T::seq_47, next);
    }
    if (std::strcmp(field, "seq_48") == 0) {
      return make_field_cmp(&T::seq_48, next);
    }
    if (std::strcmp(field, "seq_49") == 0) {
      return make_field_cmp(&T::seq_49, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::PubMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"seqnum", "seq_00", "seq_01", "seq_02", "seq_03", "seq_04", "seq_05", "seq_06", "seq_07", "seq_08", "seq_09", "seq_10", "seq_11", "seq_12", "seq_13", "seq_14", "seq_15", "seq_16", "seq_17", "seq_18", "seq_19", "seq_20", "seq_21", "seq_22", "seq_23", "seq_24", "seq_25", "seq_26", "seq_27", "seq_28", "seq_29", "seq_30", "seq_31", "seq_32", "seq_33", "seq_34", "seq_35", "seq_36", "seq_37", "seq_38", "seq_39", "seq_40", "seq_41", "seq_42", "seq_43", "seq_44", "seq_45", "seq_46", "seq_47", "seq_48", "seq_49", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "seqnum") == 0) {
      return &static_cast<const T*>(stru)->seqnum;
    }
    if (std::strcmp(field, "seq_00") == 0) {
      return &static_cast<const T*>(stru)->seq_00;
    }
    if (std::strcmp(field, "seq_01") == 0) {
      return &static_cast<const T*>(stru)->seq_01;
    }
    if (std::strcmp(field, "seq_02") == 0) {
      return &static_cast<const T*>(stru)->seq_02;
    }
    if (std::strcmp(field, "seq_03") == 0) {
      return &static_cast<const T*>(stru)->seq_03;
    }
    if (std::strcmp(field, "seq_04") == 0) {
      return &static_cast<const T*>(stru)->seq_04;
    }
    if (std::strcmp(field, "seq_05") == 0) {
      return &static_cast<const T*>(stru)->seq_05;
    }
    if (std::strcmp(field, "seq_06") == 0) {
      return &static_cast<const T*>(stru)->seq_06;
    }
    if (std::strcmp(field, "seq_07") == 0) {
      return &static_cast<const T*>(stru)->seq_07;
    }
    if (std::strcmp(field, "seq_08") == 0) {
      return &static_cast<const T*>(stru)->seq_08;
    }
    if (std::strcmp(field, "seq_09") == 0) {
      return &static_cast<const T*>(stru)->seq_09;
    }
    if (std::strcmp(field, "seq_10") == 0) {
      return &static_cast<const T*>(stru)->seq_10;
    }
    if (std::strcmp(field, "seq_11") == 0) {
      return &static_cast<const T*>(stru)->seq_11;
    }
    if (std::strcmp(field, "seq_12") == 0) {
      return &static_cast<const T*>(stru)->seq_12;
    }
    if (std::strcmp(field, "seq_13") == 0) {
      return &static_cast<const T*>(stru)->seq_13;
    }
    if (std::strcmp(field, "seq_14") == 0) {
      return &static_cast<const T*>(stru)->seq_14;
    }
    if (std::strcmp(field, "seq_15") == 0) {
      return &static_cast<const T*>(stru)->seq_15;
    }
    if (std::strcmp(field, "seq_16") == 0) {
      return &static_cast<const T*>(stru)->seq_16;
    }
    if (std::strcmp(field, "seq_17") == 0) {
      return &static_cast<const T*>(stru)->seq_17;
    }
    if (std::strcmp(field, "seq_18") == 0) {
      return &static_cast<const T*>(stru)->seq_18;
    }
    if (std::strcmp(field, "seq_19") == 0) {
      return &static_cast<const T*>(stru)->seq_19;
    }
    if (std::strcmp(field, "seq_20") == 0) {
      return &static_cast<const T*>(stru)->seq_20;
    }
    if (std::strcmp(field, "seq_21") == 0) {
      return &static_cast<const T*>(stru)->seq_21;
    }
    if (std::strcmp(field, "seq_22") == 0) {
      return &static_cast<const T*>(stru)->seq_22;
    }
    if (std::strcmp(field, "seq_23") == 0) {
      return &static_cast<const T*>(stru)->seq_23;
    }
    if (std::strcmp(field, "seq_24") == 0) {
      return &static_cast<const T*>(stru)->seq_24;
    }
    if (std::strcmp(field, "seq_25") == 0) {
      return &static_cast<const T*>(stru)->seq_25;
    }
    if (std::strcmp(field, "seq_26") == 0) {
      return &static_cast<const T*>(stru)->seq_26;
    }
    if (std::strcmp(field, "seq_27") == 0) {
      return &static_cast<const T*>(stru)->seq_27;
    }
    if (std::strcmp(field, "seq_28") == 0) {
      return &static_cast<const T*>(stru)->seq_28;
    }
    if (std::strcmp(field, "seq_29") == 0) {
      return &static_cast<const T*>(stru)->seq_29;
    }
    if (std::strcmp(field, "seq_30") == 0) {
      return &static_cast<const T*>(stru)->seq_30;
    }
    if (std::strcmp(field, "seq_31") == 0) {
      return &static_cast<const T*>(stru)->seq_31;
    }
    if (std::strcmp(field, "seq_32") == 0) {
      return &static_cast<const T*>(stru)->seq_32;
    }
    if (std::strcmp(field, "seq_33") == 0) {
      return &static_cast<const T*>(stru)->seq_33;
    }
    if (std::strcmp(field, "seq_34") == 0) {
      return &static_cast<const T*>(stru)->seq_34;
    }
    if (std::strcmp(field, "seq_35") == 0) {
      return &static_cast<const T*>(stru)->seq_35;
    }
    if (std::strcmp(field, "seq_36") == 0) {
      return &static_cast<const T*>(stru)->seq_36;
    }
    if (std::strcmp(field, "seq_37") == 0) {
      return &static_cast<const T*>(stru)->seq_37;
    }
    if (std::strcmp(field, "seq_38") == 0) {
      return &static_cast<const T*>(stru)->seq_38;
    }
    if (std::strcmp(field, "seq_39") == 0) {
      return &static_cast<const T*>(stru)->seq_39;
    }
    if (std::strcmp(field, "seq_40") == 0) {
      return &static_cast<const T*>(stru)->seq_40;
    }
    if (std::strcmp(field, "seq_41") == 0) {
      return &static_cast<const T*>(stru)->seq_41;
    }
    if (std::strcmp(field, "seq_42") == 0) {
      return &static_cast<const T*>(stru)->seq_42;
    }
    if (std::strcmp(field, "seq_43") == 0) {
      return &static_cast<const T*>(stru)->seq_43;
    }
    if (std::strcmp(field, "seq_44") == 0) {
      return &static_cast<const T*>(stru)->seq_44;
    }
    if (std::strcmp(field, "seq_45") == 0) {
      return &static_cast<const T*>(stru)->seq_45;
    }
    if (std::strcmp(field, "seq_46") == 0) {
      return &static_cast<const T*>(stru)->seq_46;
    }
    if (std::strcmp(field, "seq_47") == 0) {
      return &static_cast<const T*>(stru)->seq_47;
    }
    if (std::strcmp(field, "seq_48") == 0) {
      return &static_cast<const T*>(stru)->seq_48;
    }
    if (std::strcmp(field, "seq_49") == 0) {
      return &static_cast<const T*>(stru)->seq_49;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::PubMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "seqnum") == 0) {
      static_cast<T*>(lhs)->seqnum = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_00") == 0) {
      static_cast<T*>(lhs)->seq_00 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_01") == 0) {
      static_cast<T*>(lhs)->seq_01 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_02") == 0) {
      static_cast<T*>(lhs)->seq_02 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_03") == 0) {
      static_cast<T*>(lhs)->seq_03 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_04") == 0) {
      static_cast<T*>(lhs)->seq_04 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_05") == 0) {
      static_cast<T*>(lhs)->seq_05 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_06") == 0) {
      static_cast<T*>(lhs)->seq_06 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_07") == 0) {
      static_cast<T*>(lhs)->seq_07 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_08") == 0) {
      static_cast<T*>(lhs)->seq_08 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_09") == 0) {
      static_cast<T*>(lhs)->seq_09 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_10") == 0) {
      static_cast<T*>(lhs)->seq_10 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_11") == 0) {
      static_cast<T*>(lhs)->seq_11 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_12") == 0) {
      static_cast<T*>(lhs)->seq_12 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_13") == 0) {
      static_cast<T*>(lhs)->seq_13 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_14") == 0) {
      static_cast<T*>(lhs)->seq_14 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_15") == 0) {
      static_cast<T*>(lhs)->seq_15 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_16") == 0) {
      static_cast<T*>(lhs)->seq_16 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_17") == 0) {
      static_cast<T*>(lhs)->seq_17 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_18") == 0) {
      static_cast<T*>(lhs)->seq_18 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_19") == 0) {
      static_cast<T*>(lhs)->seq_19 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_20") == 0) {
      static_cast<T*>(lhs)->seq_20 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_21") == 0) {
      static_cast<T*>(lhs)->seq_21 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_22") == 0) {
      static_cast<T*>(lhs)->seq_22 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_23") == 0) {
      static_cast<T*>(lhs)->seq_23 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_24") == 0) {
      static_cast<T*>(lhs)->seq_24 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_25") == 0) {
      static_cast<T*>(lhs)->seq_25 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_26") == 0) {
      static_cast<T*>(lhs)->seq_26 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_27") == 0) {
      static_cast<T*>(lhs)->seq_27 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_28") == 0) {
      static_cast<T*>(lhs)->seq_28 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_29") == 0) {
      static_cast<T*>(lhs)->seq_29 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_30") == 0) {
      static_cast<T*>(lhs)->seq_30 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_31") == 0) {
      static_cast<T*>(lhs)->seq_31 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_32") == 0) {
      static_cast<T*>(lhs)->seq_32 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_33") == 0) {
      static_cast<T*>(lhs)->seq_33 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_34") == 0) {
      static_cast<T*>(lhs)->seq_34 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_35") == 0) {
      static_cast<T*>(lhs)->seq_35 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_36") == 0) {
      static_cast<T*>(lhs)->seq_36 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_37") == 0) {
      static_cast<T*>(lhs)->seq_37 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_38") == 0) {
      static_cast<T*>(lhs)->seq_38 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_39") == 0) {
      static_cast<T*>(lhs)->seq_39 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_40") == 0) {
      static_cast<T*>(lhs)->seq_40 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_41") == 0) {
      static_cast<T*>(lhs)->seq_41 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_42") == 0) {
      static_cast<T*>(lhs)->seq_42 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_43") == 0) {
      static_cast<T*>(lhs)->seq_43 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_44") == 0) {
      static_cast<T*>(lhs)->seq_44 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_45") == 0) {
      static_cast<T*>(lhs)->seq_45 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_46") == 0) {
      static_cast<T*>(lhs)->seq_46 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_47") == 0) {
      static_cast<T*>(lhs)->seq_47 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_48") == 0) {
      static_cast<T*>(lhs)->seq_48 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq_49") == 0) {
      static_cast<T*>(lhs)->seq_49 = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::PubMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "seqnum") == 0) {
      return static_cast<const T*>(lhs)->seqnum == static_cast<const T*>(rhs)->seqnum;
    }
    if (std::strcmp(field, "seq_00") == 0) {
      return static_cast<const T*>(lhs)->seq_00 == static_cast<const T*>(rhs)->seq_00;
    }
    if (std::strcmp(field, "seq_01") == 0) {
      return static_cast<const T*>(lhs)->seq_01 == static_cast<const T*>(rhs)->seq_01;
    }
    if (std::strcmp(field, "seq_02") == 0) {
      return static_cast<const T*>(lhs)->seq_02 == static_cast<const T*>(rhs)->seq_02;
    }
    if (std::strcmp(field, "seq_03") == 0) {
      return static_cast<const T*>(lhs)->seq_03 == static_cast<const T*>(rhs)->seq_03;
    }
    if (std::strcmp(field, "seq_04") == 0) {
      return static_cast<const T*>(lhs)->seq_04 == static_cast<const T*>(rhs)->seq_04;
    }
    if (std::strcmp(field, "seq_05") == 0) {
      return static_cast<const T*>(lhs)->seq_05 == static_cast<const T*>(rhs)->seq_05;
    }
    if (std::strcmp(field, "seq_06") == 0) {
      return static_cast<const T*>(lhs)->seq_06 == static_cast<const T*>(rhs)->seq_06;
    }
    if (std::strcmp(field, "seq_07") == 0) {
      return static_cast<const T*>(lhs)->seq_07 == static_cast<const T*>(rhs)->seq_07;
    }
    if (std::strcmp(field, "seq_08") == 0) {
      return static_cast<const T*>(lhs)->seq_08 == static_cast<const T*>(rhs)->seq_08;
    }
    if (std::strcmp(field, "seq_09") == 0) {
      return static_cast<const T*>(lhs)->seq_09 == static_cast<const T*>(rhs)->seq_09;
    }
    if (std::strcmp(field, "seq_10") == 0) {
      return static_cast<const T*>(lhs)->seq_10 == static_cast<const T*>(rhs)->seq_10;
    }
    if (std::strcmp(field, "seq_11") == 0) {
      return static_cast<const T*>(lhs)->seq_11 == static_cast<const T*>(rhs)->seq_11;
    }
    if (std::strcmp(field, "seq_12") == 0) {
      return static_cast<const T*>(lhs)->seq_12 == static_cast<const T*>(rhs)->seq_12;
    }
    if (std::strcmp(field, "seq_13") == 0) {
      return static_cast<const T*>(lhs)->seq_13 == static_cast<const T*>(rhs)->seq_13;
    }
    if (std::strcmp(field, "seq_14") == 0) {
      return static_cast<const T*>(lhs)->seq_14 == static_cast<const T*>(rhs)->seq_14;
    }
    if (std::strcmp(field, "seq_15") == 0) {
      return static_cast<const T*>(lhs)->seq_15 == static_cast<const T*>(rhs)->seq_15;
    }
    if (std::strcmp(field, "seq_16") == 0) {
      return static_cast<const T*>(lhs)->seq_16 == static_cast<const T*>(rhs)->seq_16;
    }
    if (std::strcmp(field, "seq_17") == 0) {
      return static_cast<const T*>(lhs)->seq_17 == static_cast<const T*>(rhs)->seq_17;
    }
    if (std::strcmp(field, "seq_18") == 0) {
      return static_cast<const T*>(lhs)->seq_18 == static_cast<const T*>(rhs)->seq_18;
    }
    if (std::strcmp(field, "seq_19") == 0) {
      return static_cast<const T*>(lhs)->seq_19 == static_cast<const T*>(rhs)->seq_19;
    }
    if (std::strcmp(field, "seq_20") == 0) {
      return static_cast<const T*>(lhs)->seq_20 == static_cast<const T*>(rhs)->seq_20;
    }
    if (std::strcmp(field, "seq_21") == 0) {
      return static_cast<const T*>(lhs)->seq_21 == static_cast<const T*>(rhs)->seq_21;
    }
    if (std::strcmp(field, "seq_22") == 0) {
      return static_cast<const T*>(lhs)->seq_22 == static_cast<const T*>(rhs)->seq_22;
    }
    if (std::strcmp(field, "seq_23") == 0) {
      return static_cast<const T*>(lhs)->seq_23 == static_cast<const T*>(rhs)->seq_23;
    }
    if (std::strcmp(field, "seq_24") == 0) {
      return static_cast<const T*>(lhs)->seq_24 == static_cast<const T*>(rhs)->seq_24;
    }
    if (std::strcmp(field, "seq_25") == 0) {
      return static_cast<const T*>(lhs)->seq_25 == static_cast<const T*>(rhs)->seq_25;
    }
    if (std::strcmp(field, "seq_26") == 0) {
      return static_cast<const T*>(lhs)->seq_26 == static_cast<const T*>(rhs)->seq_26;
    }
    if (std::strcmp(field, "seq_27") == 0) {
      return static_cast<const T*>(lhs)->seq_27 == static_cast<const T*>(rhs)->seq_27;
    }
    if (std::strcmp(field, "seq_28") == 0) {
      return static_cast<const T*>(lhs)->seq_28 == static_cast<const T*>(rhs)->seq_28;
    }
    if (std::strcmp(field, "seq_29") == 0) {
      return static_cast<const T*>(lhs)->seq_29 == static_cast<const T*>(rhs)->seq_29;
    }
    if (std::strcmp(field, "seq_30") == 0) {
      return static_cast<const T*>(lhs)->seq_30 == static_cast<const T*>(rhs)->seq_30;
    }
    if (std::strcmp(field, "seq_31") == 0) {
      return static_cast<const T*>(lhs)->seq_31 == static_cast<const T*>(rhs)->seq_31;
    }
    if (std::strcmp(field, "seq_32") == 0) {
      return static_cast<const T*>(lhs)->seq_32 == static_cast<const T*>(rhs)->seq_32;
    }
    if (std::strcmp(field, "seq_33") == 0) {
      return static_cast<const T*>(lhs)->seq_33 == static_cast<const T*>(rhs)->seq_33;
    }
    if (std::strcmp(field, "seq_34") == 0) {
      return static_cast<const T*>(lhs)->seq_34 == static_cast<const T*>(rhs)->seq_34;
    }
    if (std::strcmp(field, "seq_35") == 0) {
      return static_cast<const T*>(lhs)->seq_35 == static_cast<const T*>(rhs)->seq_35;
    }
    if (std::strcmp(field, "seq_36") == 0) {
      return static_cast<const T*>(lhs)->seq_36 == static_cast<const T*>(rhs)->seq_36;
    }
    if (std::strcmp(field, "seq_37") == 0) {
      return static_cast<const T*>(lhs)->seq_37 == static_cast<const T*>(rhs)->seq_37;
    }
    if (std::strcmp(field, "seq_38") == 0) {
      return static_cast<const T*>(lhs)->seq_38 == static_cast<const T*>(rhs)->seq_38;
    }
    if (std::strcmp(field, "seq_39") == 0) {
      return static_cast<const T*>(lhs)->seq_39 == static_cast<const T*>(rhs)->seq_39;
    }
    if (std::strcmp(field, "seq_40") == 0) {
      return static_cast<const T*>(lhs)->seq_40 == static_cast<const T*>(rhs)->seq_40;
    }
    if (std::strcmp(field, "seq_41") == 0) {
      return static_cast<const T*>(lhs)->seq_41 == static_cast<const T*>(rhs)->seq_41;
    }
    if (std::strcmp(field, "seq_42") == 0) {
      return static_cast<const T*>(lhs)->seq_42 == static_cast<const T*>(rhs)->seq_42;
    }
    if (std::strcmp(field, "seq_43") == 0) {
      return static_cast<const T*>(lhs)->seq_43 == static_cast<const T*>(rhs)->seq_43;
    }
    if (std::strcmp(field, "seq_44") == 0) {
      return static_cast<const T*>(lhs)->seq_44 == static_cast<const T*>(rhs)->seq_44;
    }
    if (std::strcmp(field, "seq_45") == 0) {
      return static_cast<const T*>(lhs)->seq_45 == static_cast<const T*>(rhs)->seq_45;
    }
    if (std::strcmp(field, "seq_46") == 0) {
      return static_cast<const T*>(lhs)->seq_46 == static_cast<const T*>(rhs)->seq_46;
    }
    if (std::strcmp(field, "seq_47") == 0) {
      return static_cast<const T*>(lhs)->seq_47 == static_cast<const T*>(rhs)->seq_47;
    }
    if (std::strcmp(field, "seq_48") == 0) {
      return static_cast<const T*>(lhs)->seq_48 == static_cast<const T*>(rhs)->seq_48;
    }
    if (std::strcmp(field, "seq_49") == 0) {
      return static_cast<const T*>(lhs)->seq_49 == static_cast<const T*>(rhs)->seq_49;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::PubMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSPerfTest::PubMessage>()
{
  static MetaStructImpl<DDSPerfTest::PubMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, DDSPerfTest::PubMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSPerfTest::PubMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PubMessage */


/* Begin STRUCT: AckMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSPerfTest::AckMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.seqnum);
}

bool operator<<(Serializer& strm, const DDSPerfTest::AckMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.seqnum);
}

bool operator>>(Serializer& strm, DDSPerfTest::AckMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.seqnum);
}

size_t gen_max_marshaled_size(const DDSPerfTest::AckMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSPerfTest::AckMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSPerfTest::AckMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const DDSPerfTest::AckMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<DDSPerfTest::AckMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSPerfTest {
::DDS::DataWriter_ptr AckMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<AckMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr AckMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<AckMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr AckMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<AckMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<AckMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& AckMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<AckMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool AckMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* AckMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
AckMessageTypeSupport::_ptr_type AckMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSPerfTest::AckMessage> : MetaStruct {
  typedef DDSPerfTest::AckMessage T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSPerfTest::AckMessage& typed = *static_cast<const DDSPerfTest::AckMessage*>(stru);
    if (std::strcmp(field, "seqnum") == 0) {
      return typed.seqnum;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::AckMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "seqnum") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seqnum' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSPerfTest::AckMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "seqnum") == 0) {
      return make_field_cmp(&T::seqnum, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::AckMessage)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"seqnum", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "seqnum") == 0) {
      return &static_cast<const T*>(stru)->seqnum;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::AckMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "seqnum") == 0) {
      static_cast<T*>(lhs)->seqnum = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::AckMessage)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "seqnum") == 0) {
      return static_cast<const T*>(lhs)->seqnum == static_cast<const T*>(rhs)->seqnum;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSPerfTest::AckMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSPerfTest::AckMessage>()
{
  static MetaStructImpl<DDSPerfTest::AckMessage> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, DDSPerfTest::AckMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSPerfTest::AckMessage>().getValue(ser, "");
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: AckMessage */

/* End MODULE: DDSPerfTest */
