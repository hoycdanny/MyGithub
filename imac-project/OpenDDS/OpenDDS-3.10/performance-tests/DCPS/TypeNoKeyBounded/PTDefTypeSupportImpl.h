/* -*- C++ -*- */
/* Generated by /Users/yc/MyGithub/imac-project/OpenDDS/OpenDDS-3.10/bin/opendds_idl version 3.10 (ACE version 6.2a_p11) running on input file PTDef.idl */
#ifndef OPENDDS_IDL_GENERATED_PTDEFTYPESUPPORTIMPL_H_2EK4ZY
#define OPENDDS_IDL_GENERATED_PTDEFTYPESUPPORTIMPL_H_2EK4ZY
#include "PTDefC.h"
#include "dds/DCPS/Definitions.h"
#include "PTDefTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Xyz */



/* Begin TYPEDEF: Flt128Seq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Flt128Seq& seq, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Flt128Seq& seq);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Flt128Seq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Flt128Seq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: Flt128Seq */


/* Begin STRUCT: Pt128 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Pt128& stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Pt128& stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Pt128& stru);

PTTypeLib_Export
size_t gen_max_marshaled_size(const Xyz::Pt128& stru, bool align);

PTTypeLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::Pt128> stru, bool align);

PTTypeLib_Export
void gen_find_size(KeyOnly<const Xyz::Pt128> stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::Pt128> stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::Pt128> stru);

template <>
struct MarshalTraits<Xyz::Pt128> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct PTTypeLib_Export Pt128_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::Pt128&, const Xyz::Pt128&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Xyz {
class Pt128TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::Pt128> {
  typedef Xyz::Pt128 MessageType;
  typedef Xyz::Pt128Seq MessageSequenceType;
  typedef Xyz::Pt128TypeSupport TypeSupportType;
  typedef Xyz::Pt128TypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::Pt128DataWriter DataWriterType;
  typedef Xyz::Pt128DataReader DataReaderType;
  typedef Xyz::Pt128_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::Pt128"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class PTTypeLib_Export Pt128TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Pt128TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Pt128> TraitsType;
  typedef Pt128TypeSupport TypeSupportType;
  typedef Pt128TypeSupport::_var_type _var_type;
  typedef Pt128TypeSupport::_ptr_type _ptr_type;

  Pt128TypeSupportImpl() {}
  virtual ~Pt128TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Pt128TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
PTTypeLib_Export
const MetaStruct& getMetaStruct<Xyz::Pt128>();
PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Pt128*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Pt128 */


/* Begin TYPEDEF: Flt512Seq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Flt512Seq& seq, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Flt512Seq& seq);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Flt512Seq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Flt512Seq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: Flt512Seq */


/* Begin STRUCT: Pt512 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Pt512& stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Pt512& stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Pt512& stru);

PTTypeLib_Export
size_t gen_max_marshaled_size(const Xyz::Pt512& stru, bool align);

PTTypeLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::Pt512> stru, bool align);

PTTypeLib_Export
void gen_find_size(KeyOnly<const Xyz::Pt512> stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::Pt512> stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::Pt512> stru);

template <>
struct MarshalTraits<Xyz::Pt512> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct PTTypeLib_Export Pt512_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::Pt512&, const Xyz::Pt512&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Xyz {
class Pt512TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::Pt512> {
  typedef Xyz::Pt512 MessageType;
  typedef Xyz::Pt512Seq MessageSequenceType;
  typedef Xyz::Pt512TypeSupport TypeSupportType;
  typedef Xyz::Pt512TypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::Pt512DataWriter DataWriterType;
  typedef Xyz::Pt512DataReader DataReaderType;
  typedef Xyz::Pt512_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::Pt512"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class PTTypeLib_Export Pt512TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Pt512TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Pt512> TraitsType;
  typedef Pt512TypeSupport TypeSupportType;
  typedef Pt512TypeSupport::_var_type _var_type;
  typedef Pt512TypeSupport::_ptr_type _ptr_type;

  Pt512TypeSupportImpl() {}
  virtual ~Pt512TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Pt512TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
PTTypeLib_Export
const MetaStruct& getMetaStruct<Xyz::Pt512>();
PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Pt512*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Pt512 */


/* Begin TYPEDEF: Flt2048Seq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Flt2048Seq& seq, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Flt2048Seq& seq);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Flt2048Seq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Flt2048Seq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: Flt2048Seq */


/* Begin STRUCT: Pt2048 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Pt2048& stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Pt2048& stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Pt2048& stru);

PTTypeLib_Export
size_t gen_max_marshaled_size(const Xyz::Pt2048& stru, bool align);

PTTypeLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::Pt2048> stru, bool align);

PTTypeLib_Export
void gen_find_size(KeyOnly<const Xyz::Pt2048> stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::Pt2048> stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::Pt2048> stru);

template <>
struct MarshalTraits<Xyz::Pt2048> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct PTTypeLib_Export Pt2048_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::Pt2048&, const Xyz::Pt2048&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Xyz {
class Pt2048TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::Pt2048> {
  typedef Xyz::Pt2048 MessageType;
  typedef Xyz::Pt2048Seq MessageSequenceType;
  typedef Xyz::Pt2048TypeSupport TypeSupportType;
  typedef Xyz::Pt2048TypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::Pt2048DataWriter DataWriterType;
  typedef Xyz::Pt2048DataReader DataReaderType;
  typedef Xyz::Pt2048_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::Pt2048"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class PTTypeLib_Export Pt2048TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Pt2048TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Pt2048> TraitsType;
  typedef Pt2048TypeSupport TypeSupportType;
  typedef Pt2048TypeSupport::_var_type _var_type;
  typedef Pt2048TypeSupport::_ptr_type _ptr_type;

  Pt2048TypeSupportImpl() {}
  virtual ~Pt2048TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Pt2048TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
PTTypeLib_Export
const MetaStruct& getMetaStruct<Xyz::Pt2048>();
PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Pt2048*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Pt2048 */


/* Begin TYPEDEF: Flt8192Seq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Flt8192Seq& seq, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Flt8192Seq& seq);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Flt8192Seq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Flt8192Seq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: Flt8192Seq */


/* Begin STRUCT: Pt8192 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

PTTypeLib_Export
void gen_find_size(const Xyz::Pt8192& stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, const Xyz::Pt8192& stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, Xyz::Pt8192& stru);

PTTypeLib_Export
size_t gen_max_marshaled_size(const Xyz::Pt8192& stru, bool align);

PTTypeLib_Export
size_t gen_max_marshaled_size(KeyOnly<const Xyz::Pt8192> stru, bool align);

PTTypeLib_Export
void gen_find_size(KeyOnly<const Xyz::Pt8192> stru, size_t& size, size_t& padding);

PTTypeLib_Export
bool operator<<(Serializer& strm, KeyOnly<const Xyz::Pt8192> stru);

PTTypeLib_Export
bool operator>>(Serializer& strm, KeyOnly<Xyz::Pt8192> stru);

template <>
struct MarshalTraits<Xyz::Pt8192> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct PTTypeLib_Export Pt8192_OpenDDS_KeyLessThan {
  bool operator()(const Xyz::Pt8192&, const Xyz::Pt8192&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}


namespace Xyz {
class Pt8192TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Xyz::Pt8192> {
  typedef Xyz::Pt8192 MessageType;
  typedef Xyz::Pt8192Seq MessageSequenceType;
  typedef Xyz::Pt8192TypeSupport TypeSupportType;
  typedef Xyz::Pt8192TypeSupportImpl TypeSupportTypeImpl;
  typedef Xyz::Pt8192DataWriter DataWriterType;
  typedef Xyz::Pt8192DataReader DataReaderType;
  typedef Xyz::Pt8192_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Xyz::Pt8192"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Xyz {
class PTTypeLib_Export Pt8192TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Pt8192TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Pt8192> TraitsType;
  typedef Pt8192TypeSupport TypeSupportType;
  typedef Pt8192TypeSupport::_var_type _var_type;
  typedef Pt8192TypeSupport::_ptr_type _ptr_type;

  Pt8192TypeSupportImpl() {}
  virtual ~Pt8192TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Pt8192TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
PTTypeLib_Export
const MetaStruct& getMetaStruct<Xyz::Pt8192>();
PTTypeLib_Export
void gen_skip_over(Serializer& ser, Xyz::Pt8192*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Pt8192 */

/* End MODULE: Xyz */
#endif /* OPENDDS_IDL_GENERATED_PTDEFTYPESUPPORTIMPL_H_2EK4ZY */
