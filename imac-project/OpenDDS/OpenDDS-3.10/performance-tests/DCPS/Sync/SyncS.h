// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p11
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:461

#ifndef _TAO_IDL_SYNCS_WDRRY4_H_
#define _TAO_IDL_SYNCS_WDRRY4_H_

#include /**/ "ace/pre.h"

#include "SyncC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:147

#if !defined (_SYNC_CLIENT__SARG_TRAITS_)
#define _SYNC_CLIENT__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Sync::Client>
    : public
        Object_SArg_Traits_T<
            ::Sync::Client_ptr,
            ::Sync::Client_var,
            ::Sync::Client_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:904

  template<>
  class SArg_Traits< ::Sync::Role>
    : public
        Basic_SArg_Traits_T<
            ::Sync::Role,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:147

#if !defined (_SYNC_SERVER__SARG_TRAITS_)
#define _SYNC_SERVER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Sync::Server>
    : public
        Object_SArg_Traits_T<
            ::Sync::Server_ptr,
            ::Sync::Server_var,
            ::Sync::Server_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:38

namespace POA_Sync
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:76

  class Server;
  typedef Server *Server_ptr;

  class Sync_Export Server
    : public virtual PortableServer::ServantBase
  {
  protected:
    Server (void);
  
  public:
    /// Useful for template programming.
    typedef ::Sync::Server _stub_type;
    typedef ::Sync::Server_ptr _stub_ptr_type;
    typedef ::Sync::Server_var _stub_var_type;

    Server (const Server& rhs);
    virtual ~Server (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Sync::Server *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void register_me (
      ::Sync::Role rol,
      ::Sync::Client_ptr callback,
      ::Sync::Id_out ide) = 0;

    static void register_me_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void unregister (
      ::Sync::Id ide) = 0;

    static void unregister_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void way_point_reached (
      ::Sync::Id ide,
      ::Sync::WayPoint way_point) = 0;

    static void way_point_reached_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:76

  class Client;
  typedef Client *Client_ptr;

  class Sync_Export Client
    : public virtual PortableServer::ServantBase
  {
  protected:
    Client (void);
  
  public:
    /// Useful for template programming.
    typedef ::Sync::Client _stub_type;
    typedef ::Sync::Client_ptr _stub_ptr_type;
    typedef ::Sync::Client_var _stub_var_type;

    Client (const Client& rhs);
    virtual ~Client (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Sync::Client *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void proceed (
      void) = 0;

    static void proceed_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:69

} // module Sync

#include /**/ "ace/post.h"

#endif /* ifndef */

